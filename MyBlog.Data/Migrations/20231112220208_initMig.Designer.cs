// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.Data.Concrete.EntityFramework.Context;

#nullable disable

namespace MyBlog.Data.Migrations
{
    [DbContext(typeof(MyBlogContext))]
    [Migration("20231112220208_initMig")]
    partial class initMig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMade")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTypeId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(9223),
                            CustomerId = 1,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama2",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(9224),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(4382),
                            Description = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(4383),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CommentCount = 0,
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8805),
                            Date = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8803),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8805),
                            Note = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoTags = "C#, C# 9, .NET5, .NET Framework, .NET Core",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C# 9.0 ve .NET 5 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CommentCount = 0,
                            Content = "Yinelenen bir sayfa içeriğinin okuyucunun dikkatini dağıttığı bilinen bir gerçektir. Lorem Ipsum kullanmanın amacı, sürekli 'buraya metin gelecek, buraya metin gelecek' yazmaya kıyasla daha dengeli bir harf dağılımı sağlayarak okunurluğu artırmasıdır. Şu anda birçok masaüstü yayıncılık paketi ve web sayfa düzenleyicisi, varsayılan mıgır metinler olarak Lorem Ipsum kullanmaktadır. Ayrıca arama motorlarında 'lorem ipsum' anahtar sözcükleri ile arama yapıldığında henüz tasarım aşamasında olan çok sayıda site listelenir. Yıllar içinde, bazen kazara, bazen bilinçli olarak (örneğin mizah katılarak), çeşitli sürümleri geliştirilmiştir.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8811),
                            Date = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8810),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8812),
                            Note = "C++ 11 ve 19 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C++ 11 ve 19 Yenilikleri",
                            SeoTags = "C++ 11 ve 19 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C++ 11 ve 19 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 295
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8815),
                            Date = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8815),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8816),
                            Note = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoTags = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 12
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CommentCount = 0,
                            Content = "É um facto estabelecido de que um leitor é distraído pelo conteúdo legível de uma página quando analisa a sua mancha gráfica. Logo, o uso de Lorem Ipsum leva a uma distribuição mais ou menos normal de letras, ao contrário do uso de 'Conteúdo aqui,conteúdo aqui'', tornando-o texto legível. Muitas ferramentas de publicação electrónica e editores de páginas web usam actualmente o Lorem Ipsum como o modelo de texto usado por omissão, e uma pesquisa por 'lorem ipsum' irá encontrar muitos websites ainda na sua infância. Várias versões têm evoluído ao longo dos anos, por vezes por acidente, por vezes propositadamente (como no caso do humor).",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8824),
                            Date = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8821),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8825),
                            Note = "Typescript 4.1 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Typescript 4.1, Typescript, TYPESCRIPT 2021",
                            SeoTags = "Typescript 4.1 Güncellemeleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Typescript 4.1",
                            UserId = 1,
                            ViewsCount = 666
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8831),
                            Date = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8830),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8833),
                            Note = "JAVA",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Java, Android, Mobile, Kotlin, Uygulama Geliştirme",
                            SeoTags = "Java, Mobil, Kotlin, Android, IOS, SWIFT",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Java ve Android'in Geleceği | 2021",
                            UserId = 1,
                            ViewsCount = 3225
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            CommentCount = 0,
                            Content = "Le Lorem Ipsum est simplement du faux texte employé dans la composition et la mise en page avant impression. Le Lorem Ipsum est le faux texte standard de l'imprimerie depuis les années 1500, quand un imprimeur anonyme assembla ensemble des morceaux de texte pour réaliser un livre spécimen de polices de texte. Il n'a pas fait que survivre cinq siècles, mais s'est aussi adapté à la bureautique informatique, sans que son contenu n'en soit modifié. Il a été popularisé dans les années 1960 grâce à la vente de feuilles Letraset contenant des passages du Lorem Ipsum, et, plus récemment, par son inclusion dans des applications de mise en page de texte, comme Aldus PageMaker.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8836),
                            Date = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8836),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8837),
                            Note = "Python",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Python ile Veri Madenciliği",
                            SeoTags = "Python, Veri Madenciliği Nasıl Yapılır?",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Python ile Veri Madenciliği | 2021",
                            UserId = 1,
                            ViewsCount = 9999
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            CommentCount = 0,
                            Content = "Contrairement à une opinion répandue, le Lorem Ipsum n'est pas simplement du texte aléatoire. Il trouve ses racines dans une oeuvre de la littérature latine classique datant de 45 av. J.-C., le rendant vieux de 2000 ans. Un professeur du Hampden-Sydney College, en Virginie, s'est intéressé à un des mots latins les plus obscurs, consectetur, extrait d'un passage du Lorem Ipsum, et en étudiant tous les usages de ce mot dans la littérature classique, découvrit la source incontestable du Lorem Ipsum. Il provient en fait des sections 1.10.32 et 1.10.33 du 0De Finibus Bonorum et Malorum' (Des Suprêmes Biens et des Suprêmes Maux) de Cicéron. Cet ouvrage, très populaire pendant la Renaissance, est un traité sur la théorie de l'éthique. Les premières lignes du Lorem Ipsum, 'Lorem ipsum dolor sit amet...'', proviennent de la section 1.10.32",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8839),
                            Date = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8839),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8840),
                            Note = "PHP",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Php ile API Oluşturma Rehberi",
                            SeoTags = "php, laravel, api, oop",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Php Laravel Başlangıç Rehberi | API",
                            UserId = 1,
                            ViewsCount = 4818
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            CommentCount = 0,
                            Content = "Plusieurs variations de Lorem Ipsum peuvent être trouvées ici ou là, mais la majeure partie d'entre elles a été altérée par l'addition d'humour ou de mots aléatoires qui ne ressemblent pas une seconde à du texte standard. Si vous voulez utiliser un passage du Lorem Ipsum, vous devez être sûr qu'il n'y a rien d'embarrassant caché dans le texte. Tous les générateurs de Lorem Ipsum sur Internet tendent à reproduire le même extrait sans fin, ce qui fait de lipsum.com le seul vrai générateur de Lorem Ipsum. Iil utilise un dictionnaire de plus de 200 mots latins, en combinaison de plusieurs structures de phrases, pour générer un Lorem Ipsum irréprochable. Le Lorem Ipsum ainsi obtenu ne contient aucune répétition, ni ne contient des mots farfelus, ou des touches d'humour.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8842),
                            Date = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8842),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8843),
                            Note = "Kotlin",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Kotlin ile Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "kotlin, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Kotlin ile Mobil Programlama",
                            UserId = 1,
                            ViewsCount = 750
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            CommentCount = 0,
                            Content = "Al contrario di quanto si pensi, Lorem Ipsum non è semplicemente una sequenza casuale di caratteri. Risale ad un classico della letteratura latina del 45 AC, cosa che lo rende vecchio di 2000 anni. Richard McClintock, professore di latino al Hampden-Sydney College in Virginia, ha ricercato una delle più oscure parole latine, consectetur, da un passaggio del Lorem Ipsum e ha scoperto tra i vari testi in cui è citata, la fonte da cui è tratto il testo, le sezioni 1.10.32 and 1.10.33 del 'de Finibus Bonorum et Malorum' di Cicerone. Questo testo è un trattato su teorie di etica, molto popolare nel Rinascimento. La prima riga del Lorem Ipsum, 'Lorem ipsum dolor sit amet..'', è tratta da un passaggio della sezione 1.10.32.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8845),
                            Date = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8845),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8846),
                            Note = "Swift",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Swift ile IOS Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "IOS, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Swift ile IOS Programlama",
                            UserId = 1,
                            ViewsCount = 14900
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            CommentCount = 0,
                            Content = "Esistono innumerevoli variazioni dei passaggi del Lorem Ipsum, ma la maggior parte hanno subito delle variazioni del tempo, a causa dell’inserimento di passaggi ironici, o di sequenze casuali di caratteri palesemente poco verosimili. Se si decide di utilizzare un passaggio del Lorem Ipsum, è bene essere certi che non contenga nulla di imbarazzante. In genere, i generatori di testo segnaposto disponibili su internet tendono a ripetere paragrafi predefiniti, rendendo questo il primo vero generatore automatico su intenet. Infatti utilizza un dizionario di oltre 200 vocaboli latini, combinati con un insieme di modelli di strutture di periodi, per generare passaggi di testo verosimili. Il testo così generato è sempre privo di ripetizioni, parole imbarazzanti o fuori luogo ecc.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8848),
                            Date = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8848),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(8849),
                            Note = "Ruby",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Ruby, Ruby on Rails Web Programlama, AirBnb Klon",
                            SeoTags = "Ruby on Rails, Ruby, Web Programlama, AirBnb",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Ruby on Rails ile AirBnb Klon Kodlayalım",
                            UserId = 1,
                            ViewsCount = 26777
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("AssociatedInstitutions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8765),
                            Description = "İş Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8766),
                            PaymentTypeId = 1,
                            Title = "İş Bankası"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8767),
                            Description = "Garanti Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8767),
                            PaymentTypeId = 1,
                            Title = "Garanti Bankası"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8768),
                            Description = "Yapı Kredi Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8768),
                            PaymentTypeId = 1,
                            Title = "Yapı Kredi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8769),
                            Description = "Akbank Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8770),
                            PaymentTypeId = 1,
                            Title = "Akbank"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8770),
                            Description = "Avrupa Ses Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8771),
                            PaymentTypeId = 2,
                            Title = "Avrupa Ses"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8771),
                            Description = "Sivasot Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8772),
                            PaymentTypeId = 2,
                            Title = "Sivasot"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8772),
                            Description = "Timtoptan Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8773),
                            PaymentTypeId = 2,
                            Title = "Timtoptan"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "act Manuel"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(336),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(337),
                            Note = "C# Makale Yorumu",
                            Text = "Lorem Ipsum pasajlarının birçok çeşitlemesi vardır. Ancak bunların büyük bir çoğunluğu mizah katılarak veya rastgele sözcükler eklenerek değiştirilmişlerdir. Eğer bir Lorem Ipsum pasajı kullanacaksanız, metin aralarına utandırıcı sözcükler gizlenmediğinden emin olmanız gerekir. İnternet'teki tüm Lorem Ipsum üreteçleri önceden belirlenmiş metin bloklarını yineler. Bu da, bu üreteci İnternet üzerindeki gerçek Lorem Ipsum üreteci yapar. Bu üreteç, 200'den fazla Latince sözcük ve onlara ait cümle yapılarını içeren bir sözlük kullanır. Bu nedenle, üretilen Lorem Ipsum metinleri yinelemelerden, mizahtan ve karakteristik olmayan sözcüklerden uzaktır."
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(339),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(340),
                            Note = "C++ Makale Yorumu",
                            Text = "Lorem Ipsum jest tekstem stosowanym jako przykładowy wypełniacz w przemyśle poligraficznym. Został po raz pierwszy użyty w XV w. przez nieznanego drukarza do wypełnienia tekstem próbnej książki. Pięć wieków później zaczął być używany przemyśle elektronicznym, pozostając praktycznie niezmienionym. Spopularyzował się w latach 60. XX w. wraz z publikacją arkuszy Letrasetu, zawierających fragmenty Lorem Ipsum, a ostatnio z zawierającym różne wersje Lorem Ipsum oprogramowaniem przeznaczonym do realizacji druków na komputerach osobistych, jak Aldus PageMaker"
                        },
                        new
                        {
                            Id = 3,
                            ArticleId = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(342),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(343),
                            Note = "JavaScript Makale Yorumu",
                            Text = "Ang Lorem Ipsum ay ginagamit na modelo ng industriya ng pagpriprint at pagtytypeset. Ang Lorem Ipsum ang naging regular na modelo simula pa noong 1500s, noong may isang di kilalang manlilimbag and kumuha ng galley ng type at ginulo ang pagkaka-ayos nito upang makagawa ng libro ng mga type specimen. Nalagpasan nito hindi lang limang siglo, kundi nalagpasan din nito ang paglaganap ng electronic typesetting at nanatiling parehas. Sumikat ito noong 1960s kasabay ng pag labas ng Letraset sheets na mayroong mga talata ng Lorem Ipsum, at kamakailan lang sa mga desktop publishing software tulad ng Aldus Pagemaker ginamit ang mga bersyon ng Lorem Ipsum."
                        },
                        new
                        {
                            Id = 4,
                            ArticleId = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(346),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(347),
                            Note = "Typescript Makale Yorumu",
                            Text = "Lorem Ipsum er rett og slett dummytekst fra og for trykkeindustrien. Lorem Ipsum har vært bransjens standard for dummytekst helt siden 1500-tallet, da en ukjent boktrykker stokket en mengde bokstaver for å lage et prøveeksemplar av en bok. Lorem Ipsum har tålt tidens tann usedvanlig godt, og har i tillegg til å bestå gjennom fem århundrer også tålt spranget over til elektronisk typografi uten vesentlige endringer. Lorem Ipsum ble gjort allment kjent i 1960-årene ved lanseringen av Letraset-ark med avsnitt fra Lorem Ipsum, og senere med sideombrekkingsprogrammet Aldus PageMaker som tok i bruk nettopp Lorem Ipsum for dummytekst."
                        },
                        new
                        {
                            Id = 5,
                            ArticleId = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(348),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(349),
                            Note = "Java Makale Yorumu",
                            Text = "Lorem Ipsum este pur şi simplu o machetă pentru text a industriei tipografice. Lorem Ipsum a fost macheta standard a industriei încă din secolul al XVI-lea, când un tipograf anonim a luat o planşetă de litere şi le-a amestecat pentru a crea o carte demonstrativă pentru literele respective. Nu doar că a supravieţuit timp de cinci secole, dar şi a facut saltul în tipografia electronică practic neschimbată. A fost popularizată în anii '60 odată cu ieşirea colilor Letraset care conţineau pasaje Lorem Ipsum, iar mai recent, prin programele de publicare pentru calculator, ca Aldus PageMaker care includeau versiuni de Lorem Ipsum."
                        },
                        new
                        {
                            Id = 6,
                            ArticleId = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(351),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(351),
                            Note = "Python Makale Yorumu",
                            Text = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a."
                        },
                        new
                        {
                            Id = 7,
                            ArticleId = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(353),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(353),
                            Note = "Php Makale Yorumu",
                            Text = "Lorem Ipsum – tas ir teksta salikums, kuru izmanto poligrāfijā un maketēšanas darbos. Lorem Ipsum ir kļuvis par vispārpieņemtu teksta aizvietotāju kopš 16. gadsimta sākuma. Tajā laikā kāds nezināms iespiedējs izveidoja teksta fragmentu, lai nodrukātu grāmatu ar burtu paraugiem. Tas ir ne tikai pārdzīvojis piecus gadsimtus, bet bez ievērojamām izmaiņām saglabājies arī mūsdienās, pārejot uz datorizētu teksta apstrādi. Tā popularizēšanai 60-tajos gados kalpoja Letraset burtu paraugu publicēšana ar Lorem Ipsum teksta fragmentiem un, nesenā pagātnē, tādas maketēšanas programmas kā Aldus PageMaker, kuras šablonu paraugos ir izmantots Lorem Ipsum teksts."
                        },
                        new
                        {
                            Id = 8,
                            ArticleId = 8,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(355),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(356),
                            Note = "Kotlin Makale Yorumu",
                            Text = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like)."
                        },
                        new
                        {
                            Id = 9,
                            ArticleId = 9,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(357),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(358),
                            Note = "Swift Makale Yorumu",
                            Text = "هنالك العديد من الأنواع المتوفرة لنصوص لوريم إيبسوم، ولكن الغالبية تم تعديلها بشكل ما عبر إدخال بعض النوادر أو الكلمات العشوائية إلى النص. إن كنت تريد أن تستخدم نص لوريم إيبسوم ما، عليك أن تتحقق أولاً أن ليس هناك أي كلمات أو عبارات محرجة أو غير لائقة مخبأة في هذا النص. بينما تعمل جميع مولّدات نصوص لوريم إيبسوم على الإنترنت على إعادة تكرار مقاطع من نص لوريم إيبسوم نفسه عدة مرات بما تتطلبه الحاجة، يقوم مولّدنا هذا باستخدام كلمات من قاموس يحوي على أكثر من 200 كلمة لا تينية، مضاف إليها مجموعة من الجمل النموذجية، لتكوين نص لوريم إيبسوم ذو شكل منطقي قريب إلى النص الحقيقي. وبالتالي يكون النص الناتح خالي من التكرار، أو أي كلمات أو عبارات غير لائقة أو ما شابه. وهذا ما يجعله أول مولّد نص لوريم إيبسوم حقيقي على الإنترنت."
                        },
                        new
                        {
                            Id = 10,
                            ArticleId = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(360),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(360),
                            Note = "Ruby Makale Yorumu",
                            Text = "Lorem Ipsum，也称乱数假文或者哑元文本， 是印刷及排版领域所常用的虚拟文字。由于曾经一台匿名的打印机刻意打乱了一盒印刷字体从而造出一本字体样品书，Lorem Ipsum从西元15世纪起就被作为此领域的标准文本使用。它不仅延续了五个世纪，还通过了电子排版的挑战，其雏形却依然保存至今。在1960年代，”Leatraset”公司发布了印刷着Lorem Ipsum段落的纸张，从而广泛普及了它的使用。最近，计算机桌面出版软件”Aldus PageMaker”也通过同样的方式使Lorem Ipsum落入大众的视野。"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HospitalOfReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 11, 17, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(2338),
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(2334),
                            CustomerReferanceId = 1,
                            CustomerTypeId = 1,
                            Email = "hasta1@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(2335),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceTitleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FromWhere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TC")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceTitleId");

                    b.ToTable("CustomerReferances", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(3907),
                            CustomerReferanceTitleId = 1,
                            Description = "Description",
                            FirstName = "Sema",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(3907),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Phone = "+905050102249"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferanceTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("CustomerReferanceTitles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(2963),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(2964),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Referans Unvan 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(4366),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(4367),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(2918),
                            Email = "bedirhangn@gmail.com",
                            EmployeeTypeId = 1,
                            FirstName = "Personel 1",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(2919),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(3041),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(3042),
                            Note = "Not",
                            Title = "Title"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDaily")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncome")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Expenses", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.MessageToDeveloper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EstimatedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MessageToDevelopers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(9312),
                            EstimatedCompletionDate = new DateTime(2023, 11, 18, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(9314),
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "TEST",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(9312),
                            Progress = 3,
                            Title = "MessageToDeveloper Title Test"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(9318),
                            EstimatedCompletionDate = new DateTime(2023, 11, 18, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(9319),
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "TEST 2222222222222222",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(9318),
                            Progress = 1,
                            Title = "MessageToDeveloper Title Test"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(9321),
                            EstimatedCompletionDate = new DateTime(2023, 11, 16, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(9322),
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "TEST 2222222222222222",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(9321),
                            Progress = 4,
                            Title = "MessageToDeveloper Title Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(7140),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(7141),
                            Name = "AgendaProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(7143),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(7144),
                            Name = "CustomerModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(7146),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(7146),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(7148),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(7149),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(7150),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(7151),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(7152),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(7153),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(7154),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(7155),
                            Name = "StockModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(6296),
                            CustomerId = 1,
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(6297),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 11, 16, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(6300),
                            Title = "Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(6309),
                            CustomerId = 1,
                            Description = "Doğum günü yaklaşmakta.",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(6310),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 11, 15, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(6311),
                            Title = "Doğum Günü!",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(6313),
                            CustomerId = 1,
                            Description = "Aylık cihaz bakımı için konuşulacak",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(6314),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 11, 14, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(6315),
                            Title = "Cihaz Bakımı!",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DebtAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PaidPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutPayments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 0m,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(1323),
                            DebtAmount = 15000m,
                            Description = "TEST desc 1 ",
                            DueDate = new DateTime(2023, 11, 17, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(1328),
                            IsActive = true,
                            IsDeleted = false,
                            IsPaid = true,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(1324),
                            PaidPlace = "Ödemenin Yapılacağı yer"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OutPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OutPaymentId");

                    b.ToTable("OutPaymentDetails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1000m,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(1863),
                            Description = "TEST desc 1 ",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(1864),
                            OutPaymentId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("AssociatedInstitutionId")
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedInstitutionsId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId1")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PaymentTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTypeId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedInstitutionId");

                    b.HasIndex("AssociatedInstitutionsId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PaymentTypeId1");

                    b.ToTable("Payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(575),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(576),
                            PaymentTypeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(2042),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(2042),
                            Title = "KK | POS"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(2043),
                            Description = "Mail Order Payment",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(2044),
                            Title = "Mail Order"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(2044),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(2045),
                            Title = "Peşin"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsProduct")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("ProductSubGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("SubModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductSubGroupId");

                    b.HasIndex("SubModelId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(8226),
                            Description = "Ürün Grubu Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 490, DateTimeKind.Local).AddTicks(8227),
                            Title = "Ürün Grubu 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductSubGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(377),
                            Description = "Model Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(378),
                            ProductGroupId = 1,
                            Title = "Model Başlığı"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Programs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8017),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8017),
                            ModuleId = 5,
                            Name = "EmployeeProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8020),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8021),
                            ModuleId = 5,
                            Name = "UserModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8023),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8023),
                            ModuleId = 7,
                            Name = "StockModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8054),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8055),
                            ModuleId = 6,
                            Name = "CustomerReferanceModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8057),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8057),
                            ModuleId = 1,
                            Name = "AppointmentModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8059),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8060),
                            ModuleId = 1,
                            Name = "NotificationModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8061),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8062),
                            ModuleId = 3,
                            Name = "PaymentProgram.Read"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8064),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8064),
                            ModuleId = 2,
                            Name = "CustomerProgram.Read"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8066),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8066),
                            ModuleId = 7,
                            Name = "BrandModule.Read"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8068),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8069),
                            ModuleId = 3,
                            Name = "SaleModule.Read"
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8070),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8071),
                            ModuleId = 7,
                            Name = "ProductProgram.Read"
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8072),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8073),
                            ModuleId = 5,
                            Name = "RoleModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessLevel = 1,
                            ConcurrencyStamp = "686f1b7c-b851-4fdd-9d5f-615526a5f9fa",
                            Definition = "SüperAdmin Yetkisi",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2,
                            AccessLevel = 1,
                            ConcurrencyStamp = "85f42308-7985-4866-a25a-5fb7092d02eb",
                            Definition = "Standart Kullanıcı Yetkisi",
                            Name = "DefaultUser",
                            NormalizedName = "DEFAULTUSER"
                        },
                        new
                        {
                            Id = 3,
                            AccessLevel = 1,
                            ConcurrencyStamp = "df04027c-eaf6-4ce6-b343-a81863b62027",
                            Definition = "Developer Yetkisi",
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = 4,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ae0cba06-292e-4f41-b7cf-4f67574f6036",
                            Definition = "Kullanıcı Ekleme Yetkisi",
                            Name = "User.Create",
                            NormalizedName = "USER.CREATE"
                        },
                        new
                        {
                            Id = 5,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a996ae1f-c6f7-4808-9447-162a293db154",
                            Definition = "Kullanıcı Görüntüleme Yetkisi",
                            Name = "User.Read",
                            NormalizedName = "USER.READ"
                        },
                        new
                        {
                            Id = 6,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c93dbc14-f8a4-4f5e-904c-797d41c57d7f",
                            Definition = "Kullanıcı Güncelleme Yetkisi",
                            Name = "User.Update",
                            NormalizedName = "USER.UPDATE"
                        },
                        new
                        {
                            Id = 7,
                            AccessLevel = 3,
                            ConcurrencyStamp = "182061c8-40d3-4af7-a9bf-f8a85be26934",
                            Definition = "Kullanıcı Silme Yetkisi",
                            Name = "User.Delete",
                            NormalizedName = "USER.DELETE"
                        },
                        new
                        {
                            Id = 8,
                            AccessLevel = 3,
                            ConcurrencyStamp = "dab9bb96-7600-4bed-8f7f-ba58a5832ed9",
                            Definition = "Rol Görüntüleme Yetkisi",
                            Name = "Role.Read",
                            NormalizedName = "ROLE.READ"
                        },
                        new
                        {
                            Id = 9,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d9f8bff3-19dc-4ac4-9f7b-b65b2da3dc38",
                            Definition = "Rol Güncelleme Yetkisi",
                            Name = "Role.Update",
                            NormalizedName = "ROLE.UPDATE"
                        },
                        new
                        {
                            Id = 10,
                            AccessLevel = 3,
                            ConcurrencyStamp = "65821680-0801-4a39-b13c-476ffbb2e14d",
                            Definition = "Rol Silme Yetkisi",
                            Name = "Role.Delete",
                            NormalizedName = "ROLE.DELETE"
                        },
                        new
                        {
                            Id = 11,
                            AccessLevel = 3,
                            ConcurrencyStamp = "05551857-2d40-4e02-92df-7f6c2cd668d8",
                            Definition = "Rol Ekleme Yetkisi",
                            Name = "Role.Create",
                            NormalizedName = "ROLE.CREATE"
                        },
                        new
                        {
                            Id = 12,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9483c5bf-a768-4945-a76a-1cb28a297666",
                            Definition = "Ödeme Ekleme Yetkisi",
                            Name = "Payment.Create",
                            NormalizedName = "PAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 13,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f7882c88-8abc-4044-9d42-a49e4208f254",
                            Definition = "Ödeme Görüntüleme Yetkisi",
                            Name = "Payment.Read",
                            NormalizedName = "PAYMENT.READ"
                        },
                        new
                        {
                            Id = 14,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3394d363-8989-488b-ac8a-48e2ff70b173",
                            Definition = "Ödeme Güncelleme Yetkisi",
                            Name = "Payment.Update",
                            NormalizedName = "PAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 15,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e4189190-70a2-4260-ab18-36f972c375f4",
                            Definition = "Ödeme Silme Yetkisi",
                            Name = "Payment.Delete",
                            NormalizedName = "PAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 16,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a8b8fa72-877b-40b1-9737-e4e82addc1d8",
                            Definition = "Ödeme Türü Ekleme Yetkisi",
                            Name = "PaymentType.Create",
                            NormalizedName = "PAYMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 17,
                            AccessLevel = 3,
                            ConcurrencyStamp = "95140cd3-9098-40e8-9358-4015e66ebc61",
                            Definition = "Ödeme Türü Görüntüleme Yetkisi",
                            Name = "PaymentType.Read",
                            NormalizedName = "PAYMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 18,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e346fc55-d407-4b3b-8428-8c7c35af11d9",
                            Definition = "Ödeme Türü Güncelleme Yetkisi",
                            Name = "PaymentType.Update",
                            NormalizedName = "PAYMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 19,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0490fc7f-d39f-4de9-a7c4-86a1161701cb",
                            Definition = "Ödeme Türü Silme Yetkisi",
                            Name = "PaymentType.Delete",
                            NormalizedName = "PAYMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 20,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f7757767-c3b5-4e8e-add8-48ec632d9c8a",
                            Definition = "Personel Ekleme Yetkisi",
                            Name = "Employee.Create",
                            NormalizedName = "EMPLOYEE.CREATE"
                        },
                        new
                        {
                            Id = 21,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3d969f33-3236-40d2-a58f-65fc72772870",
                            Definition = "Personel Görüntüleme Yetkisi",
                            Name = "Employee.Read",
                            NormalizedName = "EMPLOYEE.READ"
                        },
                        new
                        {
                            Id = 22,
                            AccessLevel = 3,
                            ConcurrencyStamp = "da1f1e66-7623-429e-8d69-0097381ffd5f",
                            Definition = "Personel Güncelleme Yetkisi",
                            Name = "Employee.Update",
                            NormalizedName = "EMPLOYEE.UPDATE"
                        },
                        new
                        {
                            Id = 23,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ef637d82-7601-4c4f-92dc-db4765a18f6b",
                            Definition = "Personel Silme Yetkisi",
                            Name = "Employee.Delete",
                            NormalizedName = "EMPLOYEE.DELETE"
                        },
                        new
                        {
                            Id = 24,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f59ef0eb-f284-4dfd-9fe9-84ee094793a1",
                            Definition = "Personel Türü Ekleme Yetkisi",
                            Name = "EmployeeType.Create",
                            NormalizedName = "EMPLOYEETYPE.CREATE"
                        },
                        new
                        {
                            Id = 25,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b4099d99-aaaa-447e-9b2d-f739ddb89189",
                            Definition = "Personel Türü Görüntüleme Yetkisi",
                            Name = "EmployeeType.Read",
                            NormalizedName = "EMPLOYEETYPE.READ"
                        },
                        new
                        {
                            Id = 26,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d03933d5-a08a-4685-97bf-c389e200e5eb",
                            Definition = "Personel Türü Güncelleme Yetkisi",
                            Name = "EmployeeType.Update",
                            NormalizedName = "EMPLOYEETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 27,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ccb1832f-816f-4853-a8c9-9ba9b5e901a2",
                            Definition = "Personel Türü Silme Yetkisi",
                            Name = "EmployeeType.Delete",
                            NormalizedName = "EMPLOYEETYPE.DELETE"
                        },
                        new
                        {
                            Id = 28,
                            AccessLevel = 3,
                            ConcurrencyStamp = "475a7fda-107d-44ac-88a2-db3fea0a0d2a",
                            Definition = "Müşteri Ekleme Yetkisi",
                            Name = "Customer.Create",
                            NormalizedName = "CUSTOMER.CREATE"
                        },
                        new
                        {
                            Id = 29,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d622276b-6241-46cf-981f-07cbf72305c3",
                            Definition = "Müşteri Görüntüleme Yetkisi",
                            Name = "Customer.Read",
                            NormalizedName = "CUSTOMER.READ"
                        },
                        new
                        {
                            Id = 30,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9524e536-d218-49c2-8920-bbea0d29314e",
                            Definition = "Müşteri Güncelleme Yetkisi",
                            Name = "Customer.Update",
                            NormalizedName = "CUSTOMER.UPDATE"
                        },
                        new
                        {
                            Id = 31,
                            AccessLevel = 3,
                            ConcurrencyStamp = "06b3bf87-b306-4c23-8511-5542803c9561",
                            Definition = "Müşteri Silme Yetkisi",
                            Name = "Customer.Delete",
                            NormalizedName = "CUSTOMER.DELETE"
                        },
                        new
                        {
                            Id = 32,
                            AccessLevel = 3,
                            ConcurrencyStamp = "98679b40-9f15-4e7d-b686-5a2768a20444",
                            Definition = "Müşteri Tipi Ekleme Yetkisi",
                            Name = "CustomerType.Create",
                            NormalizedName = "CUSTOMERTYPE.CREATE"
                        },
                        new
                        {
                            Id = 33,
                            AccessLevel = 3,
                            ConcurrencyStamp = "94da0f7a-35c3-468e-924f-a47895018fd7",
                            Definition = "Müşteri Tipi Görüntüleme Yetkisi",
                            Name = "CustomerType.Read",
                            NormalizedName = "CUSTOMERTYPE.READ"
                        },
                        new
                        {
                            Id = 34,
                            AccessLevel = 3,
                            ConcurrencyStamp = "92efd2e5-4397-489c-bf9b-f6be2846823f",
                            Definition = "Müşteri Tipi Güncelleme Yetkisi",
                            Name = "CustomerType.Update",
                            NormalizedName = "CUSTOMERTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 35,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c78a4636-4f75-4be3-8f3d-6e4de1dbdb56",
                            Definition = "Müşteri Tipi Silme Yetkisi",
                            Name = "CustomerType.Delete",
                            NormalizedName = "CUSTOMERTYPE.DELETE"
                        },
                        new
                        {
                            Id = 36,
                            AccessLevel = 3,
                            ConcurrencyStamp = "76a97210-24b9-4fbe-97f7-a757ba194f16",
                            Definition = "Bildirim Ekleme Yetkisi",
                            Name = "Notification.Create",
                            NormalizedName = "NOTIFICATION.CREATE"
                        },
                        new
                        {
                            Id = 37,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9d40ce2e-63d1-4c8b-8893-7742c9dc2a73",
                            Definition = "Bildirim Görüntüleme Yetkisi",
                            Name = "Notification.Read",
                            NormalizedName = "NOTIFICATION.READ"
                        },
                        new
                        {
                            Id = 38,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8df6ea2b-7207-4ea1-be79-a37ed704fcfc",
                            Definition = "Bildirim Güncelleme Yetkisi",
                            Name = "Notification.Update",
                            NormalizedName = "NOTIFICATION.UPDATE"
                        },
                        new
                        {
                            Id = 39,
                            AccessLevel = 3,
                            ConcurrencyStamp = "76f5a56b-7396-4e43-84e4-c4f52ae941b1",
                            Definition = "Bildirim Silme Yetkisi",
                            Name = "Notification.Delete",
                            NormalizedName = "NOTIFICATION.DELETE"
                        },
                        new
                        {
                            Id = 40,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7e6c1cba-5fc9-4f3e-900f-c5a327df9d28",
                            Definition = "Brand Ekleme Yetkisi",
                            Name = "Brand.Create",
                            NormalizedName = "BRAND.CREATE"
                        },
                        new
                        {
                            Id = 41,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ae63258f-def6-48b3-9d15-cb2dc211cc72",
                            Definition = "Brand Görüntüleme Yetkisi",
                            Name = "Brand.Read",
                            NormalizedName = "BRAND.READ"
                        },
                        new
                        {
                            Id = 42,
                            AccessLevel = 3,
                            ConcurrencyStamp = "621f0181-b37a-4063-912a-494b13cea187",
                            Definition = "Brand Güncelleme Yetkisi",
                            Name = "Brand.Update",
                            NormalizedName = "BRAND.UPDATE"
                        },
                        new
                        {
                            Id = 43,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c2e06544-155e-45ec-a1a0-2b6017c8252c",
                            Definition = "Brand Silme Yetkisi",
                            Name = "Brand.Delete",
                            NormalizedName = "BRAND.DELETE"
                        },
                        new
                        {
                            Id = 44,
                            AccessLevel = 3,
                            ConcurrencyStamp = "402db492-7701-4a86-8d0a-c3a4c2a17f57",
                            Definition = "Brand Ekleme Yetkisi",
                            Name = "MessageToDeveloper.Create",
                            NormalizedName = "MESSAGETODEVELOPER.CREATE"
                        },
                        new
                        {
                            Id = 45,
                            AccessLevel = 3,
                            ConcurrencyStamp = "740c5650-f1f2-4ce4-96c1-1ff9692d057f",
                            Definition = "Brand  Yetkisi",
                            Name = "MessageToDeveloper.Read",
                            NormalizedName = "MESSAGETODEVELOPER.READ"
                        },
                        new
                        {
                            Id = 46,
                            AccessLevel = 3,
                            ConcurrencyStamp = "fec13f2e-e319-4873-a44c-5849b51e3d76",
                            Definition = "Brand  Yetkisi",
                            Name = "MessageToDeveloper.Update",
                            NormalizedName = "MESSAGETODEVELOPER.UPDATE"
                        },
                        new
                        {
                            Id = 47,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3d08e401-40d8-4e0a-b5f2-dbb659853a95",
                            Definition = "Brand  Yetkisi",
                            Name = "MessageToDeveloper.Delete",
                            NormalizedName = "MESSAGETODEVELOPER.DELETE"
                        },
                        new
                        {
                            Id = 48,
                            AccessLevel = 3,
                            ConcurrencyStamp = "33fb5790-7d83-46b9-9468-6f8f0f098bd4",
                            Definition = "Satış Durumu Ekleme Yetkisi",
                            Name = "SaleStatus.Create",
                            NormalizedName = "SALESTATUS.CREATE"
                        },
                        new
                        {
                            Id = 49,
                            AccessLevel = 3,
                            ConcurrencyStamp = "95dbac8b-6823-41fe-9de7-3fca64907a09",
                            Definition = "Satış Durumu Görüntüleme Yetkisi",
                            Name = "SaleStatus.Read",
                            NormalizedName = "SALESTATUS.READ"
                        },
                        new
                        {
                            Id = 50,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d62e6cc9-7bea-428c-87c0-e25fe20b0218",
                            Definition = "Satış Durumu Güncelleme Yetkisi",
                            Name = "SaleStatus.Update",
                            NormalizedName = "SALESTATUS.UPDATE"
                        },
                        new
                        {
                            Id = 51,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8b29c82c-683d-43c4-a100-4c3d9a05428a",
                            Definition = "Satış Durumu Silme Yetkisi",
                            Name = "SaleStatus.Delete",
                            NormalizedName = "SALESTATUS.DELETE"
                        },
                        new
                        {
                            Id = 52,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2497c2ce-52b9-44e5-aa3a-d9db9428a513",
                            Definition = "Satış Türü Ekleme Yetkisi",
                            Name = "SaleType.Create",
                            NormalizedName = "SALETYPE.CREATE"
                        },
                        new
                        {
                            Id = 53,
                            AccessLevel = 3,
                            ConcurrencyStamp = "11e3aaf2-7c71-47e0-9a1f-f063cc11b945",
                            Definition = "Satış Türü Görüntüleme Yetkisi",
                            Name = "SaleType.Read",
                            NormalizedName = "SALETYPE.READ"
                        },
                        new
                        {
                            Id = 54,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b54fba03-b201-4a7b-ad44-dd19a40caa87",
                            Definition = "Satış Türü Güncelleme Yetkisi",
                            Name = "SaleType.Update",
                            NormalizedName = "SALETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 55,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c9f8bae5-6a3e-462c-9c66-4b95c30e6ee2",
                            Definition = "Satış Türü Silme Yetkisi",
                            Name = "SaleType.Delete",
                            NormalizedName = "SALETYPE.DELETE"
                        },
                        new
                        {
                            Id = 56,
                            AccessLevel = 3,
                            ConcurrencyStamp = "34625d41-35bd-4cfe-8f43-7261d2d3c874",
                            Definition = "Ürün Grubu Ekleme Yetkisi",
                            Name = "ProductGroup.Create",
                            NormalizedName = "PRODUCTGROUP.CREATE"
                        },
                        new
                        {
                            Id = 57,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0d7d44ca-1cce-4abb-a32c-2ac6e106cc35",
                            Definition = "Ürün Grubu Görüntüleme Yetkisi",
                            Name = "ProductGroup.Read",
                            NormalizedName = "PRODUCTGROUP.READ"
                        },
                        new
                        {
                            Id = 58,
                            AccessLevel = 3,
                            ConcurrencyStamp = "84bd9e13-e8e8-4be6-8762-19e9b16359a1",
                            Definition = "Ürün Grubu Güncelleme Yetkisi",
                            Name = "ProductGroup.Update",
                            NormalizedName = "PRODUCTGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 59,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a22af4ea-faab-46fc-86bf-d85835748f57",
                            Definition = "Ürün Grubu Silme Yetkisi",
                            Name = "ProductGroup.Delete",
                            NormalizedName = "PRODUCTGROUP.DELETE"
                        },
                        new
                        {
                            Id = 60,
                            AccessLevel = 3,
                            ConcurrencyStamp = "daf4ba21-6a76-4052-88c8-315bc0f2ed79",
                            Definition = "Model Ekleme Yetkisi",
                            Name = "ProductSubGroup.Create",
                            NormalizedName = "PRODUCTSUBGROUP.CREATE"
                        },
                        new
                        {
                            Id = 61,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9cf7b27b-2a3c-4316-b631-178842db4420",
                            Definition = "Model Görüntüleme Yetkisi",
                            Name = "ProductSubGroup.Read",
                            NormalizedName = "PRODUCTSUBGROUP.READ"
                        },
                        new
                        {
                            Id = 62,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6e95759b-18b7-46f4-a958-803582383b74",
                            Definition = "Model Güncelleme Yetkisi",
                            Name = "ProductSubGroup.Update",
                            NormalizedName = "PRODUCTSUBGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 63,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9f0467c0-3795-4107-8462-a4ff7579af67",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "ProductSubGroup.Delete",
                            NormalizedName = "PRODUCTSUBGROUP.DELETE"
                        },
                        new
                        {
                            Id = 64,
                            AccessLevel = 3,
                            ConcurrencyStamp = "136f557c-59b6-478f-9dce-7e3b3f57660a",
                            Definition = "Randevu Türü Ekleme Yetkisi",
                            Name = "AppointmentType.Create",
                            NormalizedName = "APPOINTMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 65,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e2580fbd-3897-40dc-8804-ce13eb51a198",
                            Definition = "Randevu Türü Görüntüleme Yetkisi",
                            Name = "AppointmentType.Read",
                            NormalizedName = "APPOINTMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 66,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b52daa3f-6938-4d35-984f-d4c330781420",
                            Definition = "Randevu Türü Güncelleme Yetkisi",
                            Name = "AppointmentType.Update",
                            NormalizedName = "APPOINTMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 67,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9fe32e60-4511-4a25-a7bc-3120cd7ed2bd",
                            Definition = "Randevu Türü Silme Yetkisi",
                            Name = "AppointmentType.Delete",
                            NormalizedName = "APPOINTMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 68,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3c37cb1b-c5ab-463e-9612-d100e6a9b3da",
                            Definition = "Satış Oluşturma Yetkisi",
                            Name = "Sale.Create",
                            NormalizedName = "SALE.CREATE"
                        },
                        new
                        {
                            Id = 69,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1777b354-1f6d-42ad-b947-e2214a186386",
                            Definition = "Satış Görüntüleme Yetkisi",
                            Name = "Sale.Read",
                            NormalizedName = "SALE.READ"
                        },
                        new
                        {
                            Id = 70,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0ac2104e-6900-497d-b98d-4e73e3251360",
                            Definition = "Satış Güncelleme Yetkisi",
                            Name = "Sale.Update",
                            NormalizedName = "SALE.UPDATE"
                        },
                        new
                        {
                            Id = 71,
                            AccessLevel = 3,
                            ConcurrencyStamp = "cd5db144-b735-4af2-a91f-b54422109220",
                            Definition = "Satış Silme Yetkisi",
                            Name = "Sale.Delete",
                            NormalizedName = "SALE.DELETE"
                        },
                        new
                        {
                            Id = 72,
                            AccessLevel = 3,
                            ConcurrencyStamp = "91f920ed-4b21-4bff-adc1-101ca29b9376",
                            Definition = "Ürün Ekleme Yetkisi",
                            Name = "Product.Create",
                            NormalizedName = "PRODUCT.CREATE"
                        },
                        new
                        {
                            Id = 73,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f0c835e3-bb14-474a-8b2b-ab78630b7820",
                            Definition = "Ürün Görüntüleme Yetkisi",
                            Name = "Product.Read",
                            NormalizedName = "PRODUCT.READ"
                        },
                        new
                        {
                            Id = 74,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a027ce40-e99a-421b-88f3-dc137397affe",
                            Definition = "Ürün Güncelleme Yetkisi",
                            Name = "Product.Update",
                            NormalizedName = "PRODUCT.UPDATE"
                        },
                        new
                        {
                            Id = 75,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a72c88c2-e9a0-4df5-8dc6-48e8cfebd5c2",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "Product.Delete",
                            NormalizedName = "PRODUCT.DELETE"
                        },
                        new
                        {
                            Id = 76,
                            AccessLevel = 3,
                            ConcurrencyStamp = "750a02a9-dcb0-47dc-abe7-2478950b4359",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "Appointment.Create",
                            NormalizedName = "APPOINTMENT.CREATE"
                        },
                        new
                        {
                            Id = 77,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9e27e36b-a820-47cf-b623-94b9c6b5158c",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "Appointment.Read",
                            NormalizedName = "APPOINTMENT.READ"
                        },
                        new
                        {
                            Id = 78,
                            AccessLevel = 3,
                            ConcurrencyStamp = "df427a9c-86ed-4737-83a7-7734b12aada5",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "Appointment.Update",
                            NormalizedName = "APPOINTMENT.UPDATE"
                        },
                        new
                        {
                            Id = 79,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e3ce476d-5f46-4c47-a124-9e997d1f9873",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "Appointment.Delete",
                            NormalizedName = "APPOINTMENT.DELETE"
                        },
                        new
                        {
                            Id = 80,
                            AccessLevel = 3,
                            ConcurrencyStamp = "febe4a95-56ee-4da9-a26b-aa23d4f2bac1",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "OutPayment.Create",
                            NormalizedName = "OUTPAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 81,
                            AccessLevel = 3,
                            ConcurrencyStamp = "516fc534-5938-47e2-8702-7679ba180bd5",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "OutPayment.Read",
                            NormalizedName = "OUTPAYMENT.READ"
                        },
                        new
                        {
                            Id = 82,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bc93143f-4d52-4b38-a0a7-ac59f51f7a09",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "OutPayment.Update",
                            NormalizedName = "OUTPAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 83,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0a99c161-9b9c-49ba-90b9-95d614a42572",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "OutPayment.Delete",
                            NormalizedName = "OUTPAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 84,
                            AccessLevel = 3,
                            ConcurrencyStamp = "113b677c-6470-4f8c-8fc7-63cfac8cb454",
                            Definition = "Dış Ödeme Detayı Oluşturma Yetkisi",
                            Name = "OutPaymentDetail.Create",
                            NormalizedName = "OUTPAYMENTDETAIL.CREATE"
                        },
                        new
                        {
                            Id = 85,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2dd8dd10-9e0a-4327-a84f-1c63b9b21869",
                            Definition = "Dış Ödeme Detayı Görüntüleme Yetkisi",
                            Name = "OutPaymentDetail.Read",
                            NormalizedName = "OUTPAYMENTDETAIL.READ"
                        },
                        new
                        {
                            Id = 86,
                            AccessLevel = 3,
                            ConcurrencyStamp = "44810f59-24cd-4292-beed-81d77e35f246",
                            Definition = "Dış Ödeme Detayı Güncelleme Yetkisi",
                            Name = "OutPaymentDetail.Update",
                            NormalizedName = "OUTPAYMENTDETAIL.UPDATE"
                        },
                        new
                        {
                            Id = 87,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8928828e-a73d-4dad-9383-0343b18f2c09",
                            Definition = "Dış Ödeme Detayı Silme Yetkisi",
                            Name = "OutPaymentDetail.Delete",
                            NormalizedName = "OUTPAYMENTDETAIL.DELETE"
                        },
                        new
                        {
                            Id = 88,
                            AccessLevel = 2,
                            ConcurrencyStamp = "c41db278-9ec8-43e5-87ec-48a08b1633b4",
                            Definition = "Markalar Programı Görüntüleme",
                            Name = "EmployeeProgram.Read",
                            NormalizedName = "EMPLOYEEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 89,
                            AccessLevel = 2,
                            ConcurrencyStamp = "6a25d1e8-0c2f-4430-a805-c7ae444d6d3a",
                            Definition = "Randevular Programı Görüntüleme",
                            Name = "InstitutionalProgram.Read",
                            NormalizedName = "INSTITUTIONALPROGRAM.READ"
                        },
                        new
                        {
                            Id = 90,
                            AccessLevel = 2,
                            ConcurrencyStamp = "54a8fd2c-5205-4be1-8c53-732df30bfd9b",
                            Definition = "Hastalar Programı Görüntüleme",
                            Name = "CustomerProgram.Read",
                            NormalizedName = "CUSTOMERPROGRAM.READ"
                        },
                        new
                        {
                            Id = 91,
                            AccessLevel = 2,
                            ConcurrencyStamp = "73c41388-f080-4531-ba51-5980d77ad037",
                            Definition = "Referanslar Programı Görüntüleme",
                            Name = "PaymentProgram.Read",
                            NormalizedName = "PAYMENTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 92,
                            AccessLevel = 2,
                            ConcurrencyStamp = "d9a4da70-bc58-452f-b037-1b6c20890559",
                            Definition = "Ürünler Programı Görüntüleme",
                            Name = "ProductProgram.Read",
                            NormalizedName = "PRODUCTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 93,
                            AccessLevel = 2,
                            ConcurrencyStamp = "c51be3e2-4180-4087-9270-21088d37703c",
                            Definition = "Roller Programı Görüntüleme",
                            Name = "MarketingProgram.Read",
                            NormalizedName = "MARKETINGPROGRAM.READ"
                        },
                        new
                        {
                            Id = 94,
                            AccessLevel = 2,
                            ConcurrencyStamp = "478d79ea-305a-42a8-a883-f170708b13d0",
                            Definition = "Satışlar Programı Görüntüleme",
                            Name = "AgendaProgram.Read",
                            NormalizedName = "AGENDAPROGRAM.READ"
                        },
                        new
                        {
                            Id = 95,
                            AccessLevel = 2,
                            ConcurrencyStamp = "d96779f9-b436-4aa3-a42b-68e4cae39883",
                            Definition = "Stok Programı Görüntüleme",
                            Name = "FinanceProgram.Read",
                            NormalizedName = "FINANCEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 96,
                            AccessLevel = 1,
                            ConcurrencyStamp = "5840f697-99ae-4659-9559-744eba0f3611",
                            Definition = "Anasayfa Görüntüleme Yetkisi",
                            Name = "HomeProgram.Read",
                            NormalizedName = "HOMEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 97,
                            AccessLevel = 1,
                            ConcurrencyStamp = "2d9b2200-897a-49bb-913a-d2e5663d8bf7",
                            Definition = "Stok Modülü Görüntüleme",
                            Name = "StockModule.Read",
                            NormalizedName = "StockModule.Read"
                        },
                        new
                        {
                            Id = 98,
                            AccessLevel = 1,
                            ConcurrencyStamp = "b4acded2-500b-429a-bf81-bcf6028885aa",
                            Definition = "Personel Tipleri Modülü Görüntüleme",
                            Name = "EmployeeTypeModule.Read",
                            NormalizedName = "EMPLOYEETYPEMODULE.READ"
                        },
                        new
                        {
                            Id = 99,
                            AccessLevel = 1,
                            ConcurrencyStamp = "f4c60e41-9bfd-4339-af2d-1f4a3ce78a5f",
                            Definition = "Personeller Modülü Görüntüleme",
                            Name = "EmployeeModule.Read",
                            NormalizedName = "EMPLOYEEMODULE.READ"
                        },
                        new
                        {
                            Id = 100,
                            AccessLevel = 1,
                            ConcurrencyStamp = "d69dcd19-80f2-4233-b2a2-7280282f7809",
                            Definition = "Kullanıcılar Modülü Görüntüleme",
                            Name = "UserModule.Read",
                            NormalizedName = "USERMODULE.READ"
                        },
                        new
                        {
                            Id = 101,
                            AccessLevel = 1,
                            ConcurrencyStamp = "3790cfd7-fb6d-4ba5-85e9-12de2962344b",
                            Definition = "Hastalar Modülü Görüntüleme",
                            Name = "CustomerModule.Read",
                            NormalizedName = "CUSTOMERMODULE.READ"
                        },
                        new
                        {
                            Id = 102,
                            AccessLevel = 1,
                            ConcurrencyStamp = "d66e398c-896c-4365-a41c-0043479eba22",
                            Definition = "HAsta Tipleri Modülü Görüntüleme",
                            Name = "CustomerTypeModule.Read",
                            NormalizedName = "CUSTOMERTYPEMODULE.READ"
                        },
                        new
                        {
                            Id = 103,
                            AccessLevel = 1,
                            ConcurrencyStamp = "7a0f5029-6952-4e41-8311-399663cef88e",
                            Definition = "Ürünler Modülü Yetkisi",
                            Name = "ProductModule.Read",
                            NormalizedName = "PRODUCTMODULE.READ"
                        },
                        new
                        {
                            Id = 104,
                            AccessLevel = 1,
                            ConcurrencyStamp = "14159acf-11df-47bd-8776-6297afacb761",
                            Definition = "Ürün Grupları Modülü Yetkisi",
                            Name = "ProductGroupModule.Read",
                            NormalizedName = "PRODUCTGROUPMODULE.READ"
                        },
                        new
                        {
                            Id = 105,
                            AccessLevel = 1,
                            ConcurrencyStamp = "e208382d-4d7d-4f5d-92e8-e3dfe44d983b",
                            Definition = "Ürün Alt Grupları Modülü Yetkisi",
                            Name = "ProductSubGroupModule.Read",
                            NormalizedName = "PRODUCTSUBGROUPMODULE.READ"
                        },
                        new
                        {
                            Id = 106,
                            AccessLevel = 1,
                            ConcurrencyStamp = "80ceb137-959b-4c84-8f8e-25a83f4ea3fe",
                            Definition = "Markalar Modülü Yetkisi",
                            Name = "BrandModule.Read",
                            NormalizedName = "BRANDMODULE.READ"
                        },
                        new
                        {
                            Id = 107,
                            AccessLevel = 1,
                            ConcurrencyStamp = "4cf7a805-6949-47d6-afc0-b66a15f8cdbe",
                            Definition = "Hasta Referanları Modülü Yetkisi",
                            Name = "CustomerReferanceModule.Read",
                            NormalizedName = "CUSTOMERREFERANCEMODULE.READ"
                        },
                        new
                        {
                            Id = 108,
                            AccessLevel = 1,
                            ConcurrencyStamp = "7dae550a-4204-4099-9307-12be8887420c",
                            Definition = "Randevular Modülü Yetkisi",
                            Name = "AppointmentModule.Read",
                            NormalizedName = "APPOINTMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 109,
                            AccessLevel = 1,
                            ConcurrencyStamp = "ebcd0ce5-4eae-4062-985a-2ad4453466f0",
                            Definition = "Bildirimler Modülü Yetkisi",
                            Name = "NotificationModule.Read",
                            NormalizedName = "NOTIFICATIONMODULE.READ"
                        },
                        new
                        {
                            Id = 110,
                            AccessLevel = 1,
                            ConcurrencyStamp = "50de0f1e-4d1a-4d6f-bbac-6d724cd57dfb",
                            Definition = "Dış Ödemeler Modülü Yetkisi",
                            Name = "OutPaymentModule.Read",
                            NormalizedName = "OUTPAYMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 111,
                            AccessLevel = 1,
                            ConcurrencyStamp = "2b08e63a-99d2-4000-8906-ce96075fcbe5",
                            Definition = "Satışlar Modülü Yetkisi",
                            Name = "SaleModule.Read",
                            NormalizedName = "SALEMODULE.READ"
                        },
                        new
                        {
                            Id = 112,
                            AccessLevel = 1,
                            ConcurrencyStamp = "757fc83d-167a-4ede-b252-b61495dcb8da",
                            Definition = "Gelen Ödemeler Modülü Yetkisi",
                            Name = "PaymentModule.Read",
                            NormalizedName = "PAYMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 113,
                            AccessLevel = 1,
                            ConcurrencyStamp = "c1bbaddd-c231-416e-ae76-c4a2fbc7c03d",
                            Definition = "Gelir Giderler Modülü Yetkisi",
                            Name = "ExpenseModule.Read",
                            NormalizedName = "EXPENSEMODULE.READ"
                        },
                        new
                        {
                            Id = 114,
                            AccessLevel = 1,
                            ConcurrencyStamp = "32754f30-3e5c-49da-b713-cb3e9fdb0438",
                            Definition = "Roller Modülü Yetkisi",
                            Name = "RoleModule.Read",
                            NormalizedName = "ROLEMODULE.READ"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfSgk")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvoiceDue")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("SaleStatusId");

                    b.HasIndex("SaleTypeId");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SaleStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(1312),
                            Description = "açıklama deneme status sale 1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(1314),
                            Title = "Satış Aşamasında"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SaleTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(6446),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(6447),
                            Title = "Nakit"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("Stocks", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("SubModels", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("SubPrograms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8460),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8460),
                            Name = "User.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8462),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8463),
                            Name = "User.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8465),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8465),
                            Name = "User.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8467),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8468),
                            Name = "User.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 14,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8469),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8470),
                            Name = "Role.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8471),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8472),
                            Name = "Role.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8474),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8474),
                            Name = "Role.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8476),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8476),
                            Name = "Role.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 37,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8478),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8478),
                            Name = "Payment.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 38,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8480),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8481),
                            Name = "Payment.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 39,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8482),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8483),
                            Name = "Payment.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 40,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8484),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8485),
                            Name = "Payment.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 41,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8486),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8487),
                            Name = "PaymentType.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 42,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8489),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8489),
                            Name = "PaymentType.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 43,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8491),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8491),
                            Name = "PaymentType.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 44,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8523),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8524),
                            Name = "PaymentType.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 45,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8526),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8526),
                            Name = "Employee.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 46,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8528),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8528),
                            Name = "Employee.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 47,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8530),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8531),
                            Name = "Employee.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 48,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8532),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8533),
                            Name = "Employee.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 49,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8534),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8535),
                            Name = "EmployeeType.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 50,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8537),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8538),
                            Name = "EmployeeType.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 51,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8540),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8540),
                            Name = "EmployeeType.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 52,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8542),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8542),
                            Name = "EmployeeType.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 53,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8544),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8544),
                            Name = "Customer.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 54,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8546),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8547),
                            Name = "Customer.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 55,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8548),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8549),
                            Name = "Customer.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 56,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8550),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8551),
                            Name = "Customer.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 57,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8552),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8553),
                            Name = "CustomerType.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 58,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8554),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8555),
                            Name = "CustomerType.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 59,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8557),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8557),
                            Name = "CustomerType.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 60,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8559),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8559),
                            Name = "CustomerType.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 61,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8561),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8561),
                            Name = "Notification.Create",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 62,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8563),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8563),
                            Name = "Notification.Read",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 63,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8565),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8566),
                            Name = "Notification.Update",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 64,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8567),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8568),
                            Name = "Notification.Delete",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 65,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8569),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8570),
                            Name = "Brand.Create",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 66,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8572),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8572),
                            Name = "Brand.Update",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 67,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8574),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8574),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 85,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8576),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8576),
                            Name = "Brand.Read",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 68,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8578),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8578),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 69,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8580),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8580),
                            Name = "SaleStatus.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 70,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8582),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8583),
                            Name = "SaleStatus.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 71,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8584),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8585),
                            Name = "SaleStatus.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 72,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8586),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8587),
                            Name = "SaleStatus.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 73,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8588),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8589),
                            Name = "SaleType.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 74,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8591),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8591),
                            Name = "SaleType.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 75,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8593),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8593),
                            Name = "SaleType.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 76,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8595),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8595),
                            Name = "SaleType.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 77,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8597),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8597),
                            Name = "ProductGroup.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 78,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8599),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8600),
                            Name = "ProductGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 79,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8601),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8602),
                            Name = "ProductGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 80,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8603),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8604),
                            Name = "ProductGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 81,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8605),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8606),
                            Name = "ProductSubGroup.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 82,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8607),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8608),
                            Name = "ProductSubGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 83,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8610),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8610),
                            Name = "ProductSubGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 84,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8612),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8612),
                            Name = "ProductSubGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 89,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8614),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8614),
                            Name = "AppointmentType.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 90,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8616),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8616),
                            Name = "AppointmentType.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 91,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8618),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8619),
                            Name = "AppointmentType.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 92,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8620),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8621),
                            Name = "AppointmentType.Delete",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 93,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8622),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8623),
                            Name = "Sale.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 94,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8624),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8625),
                            Name = "Sale.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 95,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8626),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8627),
                            Name = "Sale.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 96,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8628),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8629),
                            Name = "Sale.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 97,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8631),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8631),
                            Name = "Product.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 98,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8633),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8633),
                            Name = "Product.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 99,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8635),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8635),
                            Name = "Product.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 100,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8637),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8637),
                            Name = "Product.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 101,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8639),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8640),
                            Name = "Appointment.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 102,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8641),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8642),
                            Name = "Appointment.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 103,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8643),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8644),
                            Name = "Appointment.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 104,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8645),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 491, DateTimeKind.Local).AddTicks(8646),
                            Name = "Appointment.Delete",
                            ProgramId = 5
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Link")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Admin | Bilal",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20828fd4-eca6-4965-8904-c911fdeef965",
                            Email = "bilalAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bilal",
                            Institution = "Fokus",
                            LastName = "Meto",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "BILALADMIN@GMAIL.COM",
                            NormalizedUserName = "BILALADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJbtYp19sLsHLszsxXin+2S/frv6KZyvlCenBpnVslekHXv6jT/CrVdv6MO8btoHMQ==",
                            PhoneNumber = "+905537314131",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "72197a51-653d-41fc-8c38-216790e57fcd",
                            TwoFactorEnabled = false,
                            UserName = "bilalAdmin"
                        },
                        new
                        {
                            Id = 2,
                            About = "Admin | Nazlı",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b6980d4-76cc-419a-8b33-b495aa382331",
                            Email = "nazliAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nazlı",
                            Institution = "Fokus",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "NAZLIADMIN@GMAIL.COM",
                            NormalizedUserName = "NAZLIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDulDx9Avt8HvcN1DkZjciQmBOVoaYsSXG6UV0u/tvXuzcwCMCIhiaG7GlE3C4vehQ==",
                            PhoneNumber = "+905398815246",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "d14dff35-e57a-49b3-bdd7-acf1b0e89df1",
                            TwoFactorEnabled = false,
                            UserName = "nazliAdmin"
                        },
                        new
                        {
                            Id = 3,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3f83511-a873-40ac-ba51-9181b05d92f4",
                            Email = "sema@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sema",
                            Institution = "Fokus",
                            LastName = "-",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEMA@GMAIL.COM",
                            NormalizedUserName = "SEMA",
                            PasswordHash = "AQAAAAEAACcQAAAAEIJ05f35uiHblulB26dWtmE4y37DiHnuWiwdamZfQ7Lg8sDisrO1gFuOmTaS/K0WBA==",
                            PhoneNumber = "+905071273567",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "e57ce0dd-4035-41f5-8d81-c1b9eeac9318",
                            TwoFactorEnabled = false,
                            UserName = "sema"
                        },
                        new
                        {
                            Id = 4,
                            About = "Geliştirici",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "103e855b-6b8c-4a73-85fe-2439a2f0f95e",
                            Email = "x@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bedirhan",
                            Institution = "Dev",
                            LastName = "Gündöner",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "X@GMAIL.COM",
                            NormalizedUserName = "DEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEGivRhfHtdAWt1F57N2+vOrLVyVAPEkOerL0zV1RWqbWVz1MAs821Aqpo+QETC8cAA==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "e724a2cc-7fa6-45a4-92a6-5398297b2d7f",
                            TwoFactorEnabled = false,
                            UserName = "dev"
                        },
                        new
                        {
                            Id = 5,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9410f3ff-1609-4e88-9100-227d36d2c52a",
                            Email = "berra@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Berra",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERRA@GMAIL.COM",
                            NormalizedUserName = "BERRA",
                            PasswordHash = "AQAAAAEAACcQAAAAEBWZaQyrhVEbBFlM3VhhJeOsVDk2YhpMUwPHNrVCIXQ+c/qTMlO63xVogelljN3dYQ==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "6ee50f32-4d1c-41f8-8317-7c6bea6bbfaf",
                            TwoFactorEnabled = false,
                            UserName = "berra"
                        },
                        new
                        {
                            Id = 6,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0cdc640-dfa4-417a-9302-4bc31742782e",
                            Email = "Elif@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elif",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF@GMAIL.COM",
                            NormalizedUserName = "ELIF",
                            PasswordHash = "AQAAAAEAACcQAAAAEF/UVDA3wpWCxO3zbTle7jidMZdBY7iD6KHseMenyq2T8rCrQqac0BIBc6OvxetjQw==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "c9ff014d-3519-4711-ae7f-eba5ee4c815e",
                            TwoFactorEnabled = false,
                            UserName = "Elif"
                        },
                        new
                        {
                            Id = 7,
                            About = "Admin | Bilal",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a61469b-d090-435d-812a-833653d2e55e",
                            Email = "esmaAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bilal",
                            Institution = "Ases",
                            LastName = "Meto",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESMAADMIN@GMAIL.COM",
                            NormalizedUserName = "ESMAADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEMGLIf4IAhEre1F0iGPtyOiIGCEE8D0chnE9Y3Pw+hOvRz3rjcHFYVTFYN9+VpHnSg==",
                            PhoneNumber = "+905537314131",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "4c77131e-1ed1-4b20-974d-0e944b1da46b",
                            TwoFactorEnabled = false,
                            UserName = "esmaAdmin"
                        },
                        new
                        {
                            Id = 8,
                            About = "Admin | Nazlı",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50abdb20-6707-4026-8e04-33adc1c64ea6",
                            Email = "asiyeAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nazlı",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASIYEADMIN@GMAIL.COM",
                            NormalizedUserName = "ASIYEADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHApVVd0Ht6LSCaal9T5CvPkaHNDbBxtZKqKZG+WjWEKjT4afeXCIzKjL7sPb5bMMw==",
                            PhoneNumber = "+905398815246",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "0c7a0b8a-5c1d-403b-a60b-d166e02f0bd0",
                            TwoFactorEnabled = false,
                            UserName = "asiyeAdmin"
                        },
                        new
                        {
                            Id = 9,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04d99e96-b7cd-4d34-968b-9dc98b6f4d07",
                            Email = "gulistan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sema",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "GULISTAN@GMAIL.COM",
                            NormalizedUserName = "GULISTAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEM9P/Kc+5+gn+kv6YwVrLdlp0tGunRv/WFYZmF8EmL5hNAemQMLkgXcRUtL3dUL/3A==",
                            PhoneNumber = "+905071273567",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "c60b2a2e-f2fb-4116-8543-7ff4e5dad304",
                            TwoFactorEnabled = false,
                            UserName = "gulistan"
                        },
                        new
                        {
                            Id = 10,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f55651d-5b01-4d80-8080-5ac8286b8267",
                            Email = "yeliz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Yeliz",
                            Institution = "Ases",
                            LastName = "Kılıç",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "YELIZ@GMAIL.COM",
                            NormalizedUserName = "YELIZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEH3Ji11py7VWlIZV3r/gBkFrQEu2NLvibqcKUZK5M7UmJR26AmhmyX32CK4s/gpgMw==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "17587d35-694a-4a6a-b1d5-26032b573f79",
                            TwoFactorEnabled = false,
                            UserName = "yeliz"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9504),
                            Description = "C# Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9504),
                            Name = "C#",
                            Note = "C# Blog Kategorisi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9507),
                            Description = "C++ Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9507),
                            Name = "C++",
                            Note = "C++ Blog Kategorisi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9509),
                            Description = "JavaScript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9510),
                            Name = "JavaScript",
                            Note = "JavaScript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9512),
                            Description = "Typescript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9512),
                            Name = "Typescript",
                            Note = "Typescript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9514),
                            Description = "Java Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9515),
                            Name = "Java",
                            Note = "Java Blog Kategorisi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9517),
                            Description = "Python Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9517),
                            Name = "Python",
                            Note = "Python Blog Kategorisi"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9519),
                            Description = "Php Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9520),
                            Name = "Php",
                            Note = "Php Blog Kategorisi"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9521),
                            Description = "Kotlin Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9522),
                            Name = "Kotlin",
                            Note = "Kotlin Blog Kategorisi"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9524),
                            Description = "Swift Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9524),
                            Name = "Swift",
                            Note = "Swift Blog Kategorisi"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9526),
                            Description = "Ruby Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 474, DateTimeKind.Local).AddTicks(9527),
                            Name = "Ruby",
                            Note = "Ruby Blog Kategorisi"
                        });
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(4860),
                            Description = "Product Kategori 2 Açıkama",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 11, 13, 1, 2, 7, 475, DateTimeKind.Local).AddTicks(4860),
                            Name = "Product Kategori 1",
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany("Appointments")
                        .HasForeignKey("UserId");

                    b.Navigation("AppointmentType");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.HasOne("MyBlog.Shared.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany("AssociatedInstitutions")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferance", "CustomerReferance")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerReferanceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Customers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferance");

                    b.Navigation("CustomerType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferanceTitle", "CustomerReferanceTitle")
                        .WithMany("CustomersReferances")
                        .HasForeignKey("CustomerReferanceTitleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferanceTitle");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Model", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Notifications")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPaymentDetail", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("outPaymentDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.OutPayment", "OutPayment")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("OutPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("OutPayment");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", null)
                        .WithMany("Payments")
                        .HasForeignKey("AssociatedInstitutionId");

                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", "AssociatedInstitutions")
                        .WithMany()
                        .HasForeignKey("AssociatedInstitutionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", null)
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId1");

                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Brand", null)
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("MyBlog.Entities.Concrete.Model", "Model")
                        .WithMany("Products")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Shared.Entities.Concrete.ProductCategory", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("MyBlog.Entities.Concrete.ProductSubGroup", "ProductSubGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SubModel", "SubModel")
                        .WithMany("Products")
                        .HasForeignKey("SubModelId");

                    b.Navigation("Model");

                    b.Navigation("ProductSubGroup");

                    b.Navigation("SubModel");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.ProductGroup", "ProductGroup")
                        .WithMany("ProductSubGroups")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Module", "Module")
                        .WithMany("Programs")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId");

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Sales")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Sale")
                        .HasForeignKey("MyBlog.Entities.Concrete.Sale", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.SaleStatus", "SaleStatus")
                        .WithMany("Sales")
                        .HasForeignKey("SaleStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SaleType", "SaleType")
                        .WithMany("Sales")
                        .HasForeignKey("SaleTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Product");

                    b.Navigation("SaleStatus");

                    b.Navigation("SaleType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("MyBlog.Entities.Concrete.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubModel", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Program", "Program")
                        .WithMany("SubPrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Navigation("Models");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferanceTitle", b =>
                {
                    b.Navigation("CustomersReferances");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Customers");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");

                    b.Navigation("outPaymentDetails");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Model", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPayment", b =>
                {
                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Navigation("ProductSubGroups");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Navigation("SubPrograms");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubModel", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Articles");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
