// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.Data.Concrete.EntityFramework.Context;

#nullable disable

namespace MyBlog.Data.Migrations
{
    [DbContext(typeof(MyBlogContext))]
    [Migration("20230908020241_FirstSeedAndCreateTables")]
    partial class FirstSeedAndCreateTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMade")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTypeId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(3248),
                            CustomerId = 1,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama2",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(3249),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentTypeId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(3255),
                            CustomerId = 2,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(3255),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentTypeId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(3257),
                            CustomerId = 3,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama3",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(3258),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(9388),
                            Description = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(9388),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Test"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(9391),
                            Description = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(9392),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CommentCount = 0,
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3941),
                            Date = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3940),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3942),
                            Note = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoTags = "C#, C# 9, .NET5, .NET Framework, .NET Core",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C# 9.0 ve .NET 5 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CommentCount = 0,
                            Content = "Yinelenen bir sayfa içeriğinin okuyucunun dikkatini dağıttığı bilinen bir gerçektir. Lorem Ipsum kullanmanın amacı, sürekli 'buraya metin gelecek, buraya metin gelecek' yazmaya kıyasla daha dengeli bir harf dağılımı sağlayarak okunurluğu artırmasıdır. Şu anda birçok masaüstü yayıncılık paketi ve web sayfa düzenleyicisi, varsayılan mıgır metinler olarak Lorem Ipsum kullanmaktadır. Ayrıca arama motorlarında 'lorem ipsum' anahtar sözcükleri ile arama yapıldığında henüz tasarım aşamasında olan çok sayıda site listelenir. Yıllar içinde, bazen kazara, bazen bilinçli olarak (örneğin mizah katılarak), çeşitli sürümleri geliştirilmiştir.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3947),
                            Date = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3946),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3948),
                            Note = "C++ 11 ve 19 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C++ 11 ve 19 Yenilikleri",
                            SeoTags = "C++ 11 ve 19 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C++ 11 ve 19 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 295
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3951),
                            Date = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3951),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3952),
                            Note = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoTags = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 12
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CommentCount = 0,
                            Content = "É um facto estabelecido de que um leitor é distraído pelo conteúdo legível de uma página quando analisa a sua mancha gráfica. Logo, o uso de Lorem Ipsum leva a uma distribuição mais ou menos normal de letras, ao contrário do uso de 'Conteúdo aqui,conteúdo aqui'', tornando-o texto legível. Muitas ferramentas de publicação electrónica e editores de páginas web usam actualmente o Lorem Ipsum como o modelo de texto usado por omissão, e uma pesquisa por 'lorem ipsum' irá encontrar muitos websites ainda na sua infância. Várias versões têm evoluído ao longo dos anos, por vezes por acidente, por vezes propositadamente (como no caso do humor).",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3955),
                            Date = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3954),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3955),
                            Note = "Typescript 4.1 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Typescript 4.1, Typescript, TYPESCRIPT 2021",
                            SeoTags = "Typescript 4.1 Güncellemeleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Typescript 4.1",
                            UserId = 1,
                            ViewsCount = 666
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3958),
                            Date = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3957),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3958),
                            Note = "JAVA",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Java, Android, Mobile, Kotlin, Uygulama Geliştirme",
                            SeoTags = "Java, Mobil, Kotlin, Android, IOS, SWIFT",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Java ve Android'in Geleceği | 2021",
                            UserId = 1,
                            ViewsCount = 3225
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            CommentCount = 0,
                            Content = "Le Lorem Ipsum est simplement du faux texte employé dans la composition et la mise en page avant impression. Le Lorem Ipsum est le faux texte standard de l'imprimerie depuis les années 1500, quand un imprimeur anonyme assembla ensemble des morceaux de texte pour réaliser un livre spécimen de polices de texte. Il n'a pas fait que survivre cinq siècles, mais s'est aussi adapté à la bureautique informatique, sans que son contenu n'en soit modifié. Il a été popularisé dans les années 1960 grâce à la vente de feuilles Letraset contenant des passages du Lorem Ipsum, et, plus récemment, par son inclusion dans des applications de mise en page de texte, comme Aldus PageMaker.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3961),
                            Date = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3960),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3961),
                            Note = "Python",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Python ile Veri Madenciliği",
                            SeoTags = "Python, Veri Madenciliği Nasıl Yapılır?",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Python ile Veri Madenciliği | 2021",
                            UserId = 1,
                            ViewsCount = 9999
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            CommentCount = 0,
                            Content = "Contrairement à une opinion répandue, le Lorem Ipsum n'est pas simplement du texte aléatoire. Il trouve ses racines dans une oeuvre de la littérature latine classique datant de 45 av. J.-C., le rendant vieux de 2000 ans. Un professeur du Hampden-Sydney College, en Virginie, s'est intéressé à un des mots latins les plus obscurs, consectetur, extrait d'un passage du Lorem Ipsum, et en étudiant tous les usages de ce mot dans la littérature classique, découvrit la source incontestable du Lorem Ipsum. Il provient en fait des sections 1.10.32 et 1.10.33 du 0De Finibus Bonorum et Malorum' (Des Suprêmes Biens et des Suprêmes Maux) de Cicéron. Cet ouvrage, très populaire pendant la Renaissance, est un traité sur la théorie de l'éthique. Les premières lignes du Lorem Ipsum, 'Lorem ipsum dolor sit amet...'', proviennent de la section 1.10.32",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3964),
                            Date = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3963),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3964),
                            Note = "PHP",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Php ile API Oluşturma Rehberi",
                            SeoTags = "php, laravel, api, oop",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Php Laravel Başlangıç Rehberi | API",
                            UserId = 1,
                            ViewsCount = 4818
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            CommentCount = 0,
                            Content = "Plusieurs variations de Lorem Ipsum peuvent être trouvées ici ou là, mais la majeure partie d'entre elles a été altérée par l'addition d'humour ou de mots aléatoires qui ne ressemblent pas une seconde à du texte standard. Si vous voulez utiliser un passage du Lorem Ipsum, vous devez être sûr qu'il n'y a rien d'embarrassant caché dans le texte. Tous les générateurs de Lorem Ipsum sur Internet tendent à reproduire le même extrait sans fin, ce qui fait de lipsum.com le seul vrai générateur de Lorem Ipsum. Iil utilise un dictionnaire de plus de 200 mots latins, en combinaison de plusieurs structures de phrases, pour générer un Lorem Ipsum irréprochable. Le Lorem Ipsum ainsi obtenu ne contient aucune répétition, ni ne contient des mots farfelus, ou des touches d'humour.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3967),
                            Date = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3966),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3967),
                            Note = "Kotlin",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Kotlin ile Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "kotlin, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Kotlin ile Mobil Programlama",
                            UserId = 1,
                            ViewsCount = 750
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            CommentCount = 0,
                            Content = "Al contrario di quanto si pensi, Lorem Ipsum non è semplicemente una sequenza casuale di caratteri. Risale ad un classico della letteratura latina del 45 AC, cosa che lo rende vecchio di 2000 anni. Richard McClintock, professore di latino al Hampden-Sydney College in Virginia, ha ricercato una delle più oscure parole latine, consectetur, da un passaggio del Lorem Ipsum e ha scoperto tra i vari testi in cui è citata, la fonte da cui è tratto il testo, le sezioni 1.10.32 and 1.10.33 del 'de Finibus Bonorum et Malorum' di Cicerone. Questo testo è un trattato su teorie di etica, molto popolare nel Rinascimento. La prima riga del Lorem Ipsum, 'Lorem ipsum dolor sit amet..'', è tratta da un passaggio della sezione 1.10.32.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3970),
                            Date = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3969),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3970),
                            Note = "Swift",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Swift ile IOS Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "IOS, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Swift ile IOS Programlama",
                            UserId = 1,
                            ViewsCount = 14900
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            CommentCount = 0,
                            Content = "Esistono innumerevoli variazioni dei passaggi del Lorem Ipsum, ma la maggior parte hanno subito delle variazioni del tempo, a causa dell’inserimento di passaggi ironici, o di sequenze casuali di caratteri palesemente poco verosimili. Se si decide di utilizzare un passaggio del Lorem Ipsum, è bene essere certi che non contenga nulla di imbarazzante. In genere, i generatori di testo segnaposto disponibili su internet tendono a ripetere paragrafi predefiniti, rendendo questo il primo vero generatore automatico su intenet. Infatti utilizza un dizionario di oltre 200 vocaboli latini, combinati con un insieme di modelli di strutture di periodi, per generare passaggi di testo verosimili. Il testo così generato è sempre privo di ripetizioni, parole imbarazzanti o fuori luogo ecc.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3973),
                            Date = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3972),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(3973),
                            Note = "Ruby",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Ruby, Ruby on Rails Web Programlama, AirBnb Klon",
                            SeoTags = "Ruby on Rails, Ruby, Web Programlama, AirBnb",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Ruby on Rails ile AirBnb Klon Kodlayalım",
                            UserId = 1,
                            ViewsCount = 26777
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("AssociatedInstitutions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7334),
                            Description = "İş Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7335),
                            PaymentTypeId = 1,
                            Title = "İş Bankası"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7336),
                            Description = "Garanti Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7337),
                            PaymentTypeId = 1,
                            Title = "Garanti Bankası"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7338),
                            Description = "Yapı Kredi Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7338),
                            PaymentTypeId = 1,
                            Title = "Yapı Kredi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7338),
                            Description = "Akbank Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7339),
                            PaymentTypeId = 1,
                            Title = "Akbank"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7339),
                            Description = "Avrupa Ses Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7340),
                            PaymentTypeId = 2,
                            Title = "Avrupa Ses"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7340),
                            Description = "Sivasot Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7341),
                            PaymentTypeId = 2,
                            Title = "Sivasot"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7341),
                            Description = "Timtoptan Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7342),
                            PaymentTypeId = 2,
                            Title = "Timtoptan"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(8960),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(8960),
                            Title = "Brand Title Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "act Manuel"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5384),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5385),
                            Note = "C# Makale Yorumu",
                            Text = "Lorem Ipsum pasajlarının birçok çeşitlemesi vardır. Ancak bunların büyük bir çoğunluğu mizah katılarak veya rastgele sözcükler eklenerek değiştirilmişlerdir. Eğer bir Lorem Ipsum pasajı kullanacaksanız, metin aralarına utandırıcı sözcükler gizlenmediğinden emin olmanız gerekir. İnternet'teki tüm Lorem Ipsum üreteçleri önceden belirlenmiş metin bloklarını yineler. Bu da, bu üreteci İnternet üzerindeki gerçek Lorem Ipsum üreteci yapar. Bu üreteç, 200'den fazla Latince sözcük ve onlara ait cümle yapılarını içeren bir sözlük kullanır. Bu nedenle, üretilen Lorem Ipsum metinleri yinelemelerden, mizahtan ve karakteristik olmayan sözcüklerden uzaktır."
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5387),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5388),
                            Note = "C++ Makale Yorumu",
                            Text = "Lorem Ipsum jest tekstem stosowanym jako przykładowy wypełniacz w przemyśle poligraficznym. Został po raz pierwszy użyty w XV w. przez nieznanego drukarza do wypełnienia tekstem próbnej książki. Pięć wieków później zaczął być używany przemyśle elektronicznym, pozostając praktycznie niezmienionym. Spopularyzował się w latach 60. XX w. wraz z publikacją arkuszy Letrasetu, zawierających fragmenty Lorem Ipsum, a ostatnio z zawierającym różne wersje Lorem Ipsum oprogramowaniem przeznaczonym do realizacji druków na komputerach osobistych, jak Aldus PageMaker"
                        },
                        new
                        {
                            Id = 3,
                            ArticleId = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5390),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5390),
                            Note = "JavaScript Makale Yorumu",
                            Text = "Ang Lorem Ipsum ay ginagamit na modelo ng industriya ng pagpriprint at pagtytypeset. Ang Lorem Ipsum ang naging regular na modelo simula pa noong 1500s, noong may isang di kilalang manlilimbag and kumuha ng galley ng type at ginulo ang pagkaka-ayos nito upang makagawa ng libro ng mga type specimen. Nalagpasan nito hindi lang limang siglo, kundi nalagpasan din nito ang paglaganap ng electronic typesetting at nanatiling parehas. Sumikat ito noong 1960s kasabay ng pag labas ng Letraset sheets na mayroong mga talata ng Lorem Ipsum, at kamakailan lang sa mga desktop publishing software tulad ng Aldus Pagemaker ginamit ang mga bersyon ng Lorem Ipsum."
                        },
                        new
                        {
                            Id = 4,
                            ArticleId = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5393),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5393),
                            Note = "Typescript Makale Yorumu",
                            Text = "Lorem Ipsum er rett og slett dummytekst fra og for trykkeindustrien. Lorem Ipsum har vært bransjens standard for dummytekst helt siden 1500-tallet, da en ukjent boktrykker stokket en mengde bokstaver for å lage et prøveeksemplar av en bok. Lorem Ipsum har tålt tidens tann usedvanlig godt, og har i tillegg til å bestå gjennom fem århundrer også tålt spranget over til elektronisk typografi uten vesentlige endringer. Lorem Ipsum ble gjort allment kjent i 1960-årene ved lanseringen av Letraset-ark med avsnitt fra Lorem Ipsum, og senere med sideombrekkingsprogrammet Aldus PageMaker som tok i bruk nettopp Lorem Ipsum for dummytekst."
                        },
                        new
                        {
                            Id = 5,
                            ArticleId = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5396),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5397),
                            Note = "Java Makale Yorumu",
                            Text = "Lorem Ipsum este pur şi simplu o machetă pentru text a industriei tipografice. Lorem Ipsum a fost macheta standard a industriei încă din secolul al XVI-lea, când un tipograf anonim a luat o planşetă de litere şi le-a amestecat pentru a crea o carte demonstrativă pentru literele respective. Nu doar că a supravieţuit timp de cinci secole, dar şi a facut saltul în tipografia electronică practic neschimbată. A fost popularizată în anii '60 odată cu ieşirea colilor Letraset care conţineau pasaje Lorem Ipsum, iar mai recent, prin programele de publicare pentru calculator, ca Aldus PageMaker care includeau versiuni de Lorem Ipsum."
                        },
                        new
                        {
                            Id = 6,
                            ArticleId = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5400),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5401),
                            Note = "Python Makale Yorumu",
                            Text = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a."
                        },
                        new
                        {
                            Id = 7,
                            ArticleId = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5404),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5405),
                            Note = "Php Makale Yorumu",
                            Text = "Lorem Ipsum – tas ir teksta salikums, kuru izmanto poligrāfijā un maketēšanas darbos. Lorem Ipsum ir kļuvis par vispārpieņemtu teksta aizvietotāju kopš 16. gadsimta sākuma. Tajā laikā kāds nezināms iespiedējs izveidoja teksta fragmentu, lai nodrukātu grāmatu ar burtu paraugiem. Tas ir ne tikai pārdzīvojis piecus gadsimtus, bet bez ievērojamām izmaiņām saglabājies arī mūsdienās, pārejot uz datorizētu teksta apstrādi. Tā popularizēšanai 60-tajos gados kalpoja Letraset burtu paraugu publicēšana ar Lorem Ipsum teksta fragmentiem un, nesenā pagātnē, tādas maketēšanas programmas kā Aldus PageMaker, kuras šablonu paraugos ir izmantots Lorem Ipsum teksts."
                        },
                        new
                        {
                            Id = 8,
                            ArticleId = 8,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5406),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5407),
                            Note = "Kotlin Makale Yorumu",
                            Text = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like)."
                        },
                        new
                        {
                            Id = 9,
                            ArticleId = 9,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5409),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5410),
                            Note = "Swift Makale Yorumu",
                            Text = "هنالك العديد من الأنواع المتوفرة لنصوص لوريم إيبسوم، ولكن الغالبية تم تعديلها بشكل ما عبر إدخال بعض النوادر أو الكلمات العشوائية إلى النص. إن كنت تريد أن تستخدم نص لوريم إيبسوم ما، عليك أن تتحقق أولاً أن ليس هناك أي كلمات أو عبارات محرجة أو غير لائقة مخبأة في هذا النص. بينما تعمل جميع مولّدات نصوص لوريم إيبسوم على الإنترنت على إعادة تكرار مقاطع من نص لوريم إيبسوم نفسه عدة مرات بما تتطلبه الحاجة، يقوم مولّدنا هذا باستخدام كلمات من قاموس يحوي على أكثر من 200 كلمة لا تينية، مضاف إليها مجموعة من الجمل النموذجية، لتكوين نص لوريم إيبسوم ذو شكل منطقي قريب إلى النص الحقيقي. وبالتالي يكون النص الناتح خالي من التكرار، أو أي كلمات أو عبارات غير لائقة أو ما شابه. وهذا ما يجعله أول مولّد نص لوريم إيبسوم حقيقي على الإنترنت."
                        },
                        new
                        {
                            Id = 10,
                            ArticleId = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5411),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(5412),
                            Note = "Ruby Makale Yorumu",
                            Text = "Lorem Ipsum，也称乱数假文或者哑元文本， 是印刷及排版领域所常用的虚拟文字。由于曾经一台匿名的打印机刻意打乱了一盒印刷字体从而造出一本字体样品书，Lorem Ipsum从西元15世纪起就被作为此领域的标准文本使用。它不仅延续了五个世纪，还通过了电子排版的挑战，其雏形却依然保存至今。在1960年代，”Leatraset”公司发布了印刷着Lorem Ipsum段落的纸张，从而广泛普及了它的使用。最近，计算机桌面出版软件”Aldus PageMaker”也通过同样的方式使Lorem Ipsum落入大众的视野。"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HospitalOfReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 9, 12, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6954),
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6947),
                            CustomerReferanceId = 1,
                            CustomerTypeId = 1,
                            Email = "hasta1@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6948),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 2,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 9, 13, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6962),
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6960),
                            CustomerReferanceId = 1,
                            CustomerTypeId = 2,
                            Email = "hasta2@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6960),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 3,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 9, 14, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6966),
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6964),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6965),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 4,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 9, 15, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6969),
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6968),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6968),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 5,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 9, 16, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6973),
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6971),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6972),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 6,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 9, 17, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6976),
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6974),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6975),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 7,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 9, 18, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6979),
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6978),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(6978),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceTitleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FromWhere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TC")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceTitleId");

                    b.ToTable("CustomerReferances", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(8536),
                            CustomerReferanceTitleId = 2,
                            Description = "Description",
                            FirstName = "Sema",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(8537),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Phone = "+905050102249"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(8542),
                            CustomerReferanceTitleId = 2,
                            Description = "Description",
                            FirstName = "Sema",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(8543),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Phone = "+905050102249"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferanceTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("CustomerReferanceTitles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(7406),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(7407),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Referans Unvan 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(7409),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(7410),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Referans Unvan 2"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(8969),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(8969),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(8972),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(8972),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(8974),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(8974),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 3"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(8420),
                            Email = "bedirhangn@gmail.com",
                            EmployeeTypeId = 1,
                            FirstName = "Personel 1",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(8421),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 2,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(8424),
                            EmployeeTypeId = 1,
                            FirstName = "Ikinci Personel",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(8424),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 3,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(8426),
                            EmployeeTypeId = 1,
                            FirstName = "Ucuncu perosnel",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(8427),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(8510),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(8510),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(8512),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(8513),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(8514),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(8514),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(8516),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(8517),
                            Note = "Not",
                            Title = "Title"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDaily")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncome")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Expenses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 100,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7432),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7434),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 122,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7436),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7437),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 21,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7439),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7440),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 341,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7441),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7442),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 422,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7444),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7444),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 6,
                            Amount = 122,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7446),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7446),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 7,
                            Amount = 322,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7448),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7449),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 8,
                            Amount = 422,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7450),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7451),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 9,
                            Amount = 522,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7453),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7453),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 10,
                            Amount = 122,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7455),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7455),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 11,
                            Amount = 232,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7457),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7457),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 12,
                            Amount = 122,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7459),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7460),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 13,
                            Amount = 222,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7461),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7462),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 14,
                            Amount = 22,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7463),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7464),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 15,
                            Amount = 22,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7466),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7466),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 16,
                            Amount = 22,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7468),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7468),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 17,
                            Amount = 22,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7470),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7470),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 18,
                            Amount = 22,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7472),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7472),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 19,
                            Amount = 22,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 8, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7474),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7475),
                            Note = "TEST"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.MessageToDeveloper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EstimatedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MessageToDevelopers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7862),
                            EstimatedCompletionDate = new DateTime(2023, 9, 13, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7864),
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "TEST",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7863),
                            Progress = 3,
                            Title = "MessageToDeveloper Title Test"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7866),
                            EstimatedCompletionDate = new DateTime(2023, 9, 13, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7867),
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "TEST 2222222222222222",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7867),
                            Progress = 1,
                            Title = "MessageToDeveloper Title Test"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7869),
                            EstimatedCompletionDate = new DateTime(2023, 9, 11, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7870),
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "TEST 2222222222222222",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7870),
                            Progress = 4,
                            Title = "MessageToDeveloper Title Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6247),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6248),
                            Name = "AgendaProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6250),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6251),
                            Name = "CustomerModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6252),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6253),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6255),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6255),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6257),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6257),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6259),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6259),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6261),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6261),
                            Name = "StockModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(857),
                            CustomerId = 1,
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(857),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 9, 11, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(861),
                            Title = "Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(866),
                            CustomerId = 2,
                            Description = "Doğum günü yaklaşmakta.",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(867),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 9, 10, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(868),
                            Title = "Doğum Günü!",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(870),
                            CustomerId = 3,
                            Description = "Aylık cihaz bakımı için konuşulacak",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(870),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 9, 9, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(871),
                            Title = "Cihaz Bakımı!",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DebtAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PaidPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutPayments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 0m,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6965),
                            DebtAmount = 15000m,
                            Description = "TEST desc 1 ",
                            DueDate = new DateTime(2023, 9, 12, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6970),
                            IsActive = true,
                            IsDeleted = false,
                            IsPaid = true,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6966),
                            PaidPlace = "Ödemenin Yapılacağı yer"
                        },
                        new
                        {
                            Id = 2,
                            AmountPaid = 0m,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6974),
                            DebtAmount = 10000m,
                            Description = "TEST desc 1 ",
                            DueDate = new DateTime(2023, 9, 12, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6975),
                            IsActive = true,
                            IsDeleted = false,
                            IsPaid = true,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6974),
                            PaidPlace = "Ödemenin Yapılacağı yer"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OutPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OutPaymentId");

                    b.ToTable("OutPaymentDetails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1000m,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(7570),
                            Description = "TEST desc 1 ",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(7570),
                            OutPaymentId = 1
                        },
                        new
                        {
                            Id = 2,
                            AmountPaid = 2000m,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(7574),
                            Description = "TEST desc 1 ",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(7574),
                            OutPaymentId = 1
                        },
                        new
                        {
                            Id = 3,
                            AmountPaid = 1500m,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(7576),
                            Description = "TEST desc 1 ",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(7577),
                            OutPaymentId = 1
                        },
                        new
                        {
                            Id = 4,
                            AmountPaid = 2300m,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(7579),
                            Description = "TEST desc 1 ",
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(7579),
                            OutPaymentId = 2
                        },
                        new
                        {
                            Id = 5,
                            AmountPaid = 1450m,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(7581),
                            Description = "TEST desc 1 ",
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(7581),
                            OutPaymentId = 2
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("AssociatedInstitutionId")
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedInstitutionsId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId1")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PaymentTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTypeId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedInstitutionId");

                    b.HasIndex("AssociatedInstitutionsId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PaymentTypeId1");

                    b.ToTable("Payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6273),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6274),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6280),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6281),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6283),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6283),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6285),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6286),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6288),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6288),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6290),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6291),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6292),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(6293),
                            PaymentTypeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(7649),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(7649),
                            Title = "KK | POS"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(7650),
                            Description = "Mail Order Payment",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(7651),
                            Title = "Mail Order"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(7652),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 777, DateTimeKind.Local).AddTicks(7652),
                            Title = "Peşin"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("ProductSubGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductSubGroupId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(652),
                            IsActive = true,
                            IsDeleted = false,
                            IsMultiple = false,
                            IsSold = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(653),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Siemens Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT4"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(656),
                            IsActive = true,
                            IsDeleted = false,
                            IsMultiple = false,
                            IsSold = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(656),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Jabra Signia",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT3"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(659),
                            IsActive = true,
                            IsDeleted = false,
                            IsMultiple = false,
                            IsSold = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(659),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Apple Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT2"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(661),
                            IsActive = true,
                            IsDeleted = false,
                            IsMultiple = false,
                            IsSold = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(662),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Samsung Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(1470),
                            Description = "Ürün Grubu Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(1471),
                            Title = "Ürün Grubu 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductSubGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(2359),
                            Description = "Ürün Alt Grubu Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(2360),
                            ProductGroupId = 1,
                            Title = "Ürün Alt Grubu Başlığı"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Programs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6633),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6633),
                            ModuleId = 5,
                            Name = "EmployeeProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6636),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6637),
                            ModuleId = 5,
                            Name = "UserModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6638),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6639),
                            ModuleId = 7,
                            Name = "StockModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6640),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6641),
                            ModuleId = 6,
                            Name = "CustomerReferanceModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6642),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6643),
                            ModuleId = 1,
                            Name = "AppointmentModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6645),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6645),
                            ModuleId = 1,
                            Name = "NotificationModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6647),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6647),
                            ModuleId = 3,
                            Name = "PaymentProgram.Read"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6649),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6649),
                            ModuleId = 2,
                            Name = "CustomerProgram.Read"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6651),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6651),
                            ModuleId = 7,
                            Name = "BrandModule.Read"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6653),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6653),
                            ModuleId = 3,
                            Name = "SaleModule.Read"
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6655),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6655),
                            ModuleId = 7,
                            Name = "ProductProgram.Read"
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6657),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(6657),
                            ModuleId = 5,
                            Name = "RoleModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessLevel = 1,
                            ConcurrencyStamp = "616df0d9-023d-4ef1-81e8-e2b258f9a7ec",
                            Definition = "SüperAdmin Yetkisi",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2,
                            AccessLevel = 1,
                            ConcurrencyStamp = "f0f0c40d-b95f-4939-92f9-b24b02bae9ca",
                            Definition = "Standart Kullanıcı Yetkisi",
                            Name = "DefaultUser",
                            NormalizedName = "DEFAULTUSER"
                        },
                        new
                        {
                            Id = 3,
                            AccessLevel = 1,
                            ConcurrencyStamp = "2ace472a-64de-42af-9ed2-42d339a006e3",
                            Definition = "Developer Yetkisi",
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = 4,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6973e65e-69d2-44b5-973f-fb2d339c3fe7",
                            Definition = "Kullanıcı Ekleme Yetkisi",
                            Name = "User.Create",
                            NormalizedName = "USER.CREATE"
                        },
                        new
                        {
                            Id = 5,
                            AccessLevel = 3,
                            ConcurrencyStamp = "964a13cc-e0b3-4002-96db-94e6352678a6",
                            Definition = "Kullanıcı Görüntüleme Yetkisi",
                            Name = "User.Read",
                            NormalizedName = "USER.READ"
                        },
                        new
                        {
                            Id = 6,
                            AccessLevel = 3,
                            ConcurrencyStamp = "cceee166-f8a5-4f3d-a6d8-cefab3c449e9",
                            Definition = "Kullanıcı Güncelleme Yetkisi",
                            Name = "User.Update",
                            NormalizedName = "USER.UPDATE"
                        },
                        new
                        {
                            Id = 7,
                            AccessLevel = 3,
                            ConcurrencyStamp = "687bf6a4-a4e7-4d82-b5da-6306b93cb893",
                            Definition = "Kullanıcı Silme Yetkisi",
                            Name = "User.Delete",
                            NormalizedName = "USER.DELETE"
                        },
                        new
                        {
                            Id = 8,
                            AccessLevel = 3,
                            ConcurrencyStamp = "87643896-fa37-4ed6-8fc2-d95d8e4163d2",
                            Definition = "Rol Görüntüleme Yetkisi",
                            Name = "Role.Read",
                            NormalizedName = "ROLE.READ"
                        },
                        new
                        {
                            Id = 9,
                            AccessLevel = 3,
                            ConcurrencyStamp = "fc4c5f3d-af4a-4b5b-b7fe-7a758f310336",
                            Definition = "Rol Güncelleme Yetkisi",
                            Name = "Role.Update",
                            NormalizedName = "ROLE.UPDATE"
                        },
                        new
                        {
                            Id = 10,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8a5447a0-0603-43c2-adb8-47f0d26c5547",
                            Definition = "Rol Silme Yetkisi",
                            Name = "Role.Delete",
                            NormalizedName = "ROLE.DELETE"
                        },
                        new
                        {
                            Id = 11,
                            AccessLevel = 3,
                            ConcurrencyStamp = "44c6d2bd-08f8-4d09-bff0-4c9f8f0b90c8",
                            Definition = "Rol Ekleme Yetkisi",
                            Name = "Role.Create",
                            NormalizedName = "ROLE.CREATE"
                        },
                        new
                        {
                            Id = 12,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8b61d6a9-2de0-4d86-ae94-9d792d841071",
                            Definition = "Ödeme Ekleme Yetkisi",
                            Name = "Payment.Create",
                            NormalizedName = "PAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 13,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bc31316b-54ff-4222-9bab-202988209ef0",
                            Definition = "Ödeme Görüntüleme Yetkisi",
                            Name = "Payment.Read",
                            NormalizedName = "PAYMENT.READ"
                        },
                        new
                        {
                            Id = 14,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1ff8a96a-42a3-418d-945e-2d8e4bd84280",
                            Definition = "Ödeme Güncelleme Yetkisi",
                            Name = "Payment.Update",
                            NormalizedName = "PAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 15,
                            AccessLevel = 3,
                            ConcurrencyStamp = "316c8602-55d9-4ba6-9786-f37ac45d2dce",
                            Definition = "Ödeme Silme Yetkisi",
                            Name = "Payment.Delete",
                            NormalizedName = "PAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 16,
                            AccessLevel = 3,
                            ConcurrencyStamp = "89529556-a652-4e65-b997-279821b4a704",
                            Definition = "Ödeme Türü Ekleme Yetkisi",
                            Name = "PaymentType.Create",
                            NormalizedName = "PAYMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 17,
                            AccessLevel = 3,
                            ConcurrencyStamp = "214b8b16-595d-4fe5-9889-4f77bdb34689",
                            Definition = "Ödeme Türü Görüntüleme Yetkisi",
                            Name = "PaymentType.Read",
                            NormalizedName = "PAYMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 18,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e1145db9-5633-4381-ae14-2cbb336b05da",
                            Definition = "Ödeme Türü Güncelleme Yetkisi",
                            Name = "PaymentType.Update",
                            NormalizedName = "PAYMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 19,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a36f3c1b-0464-458c-b78c-623781290b4c",
                            Definition = "Ödeme Türü Silme Yetkisi",
                            Name = "PaymentType.Delete",
                            NormalizedName = "PAYMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 20,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2e350f69-37f8-4b7f-b231-21c68f481766",
                            Definition = "Personel Ekleme Yetkisi",
                            Name = "Employee.Create",
                            NormalizedName = "EMPLOYEE.CREATE"
                        },
                        new
                        {
                            Id = 21,
                            AccessLevel = 3,
                            ConcurrencyStamp = "05916cc4-3a41-48ed-8cef-0a9a50b0c675",
                            Definition = "Personel Görüntüleme Yetkisi",
                            Name = "Employee.Read",
                            NormalizedName = "EMPLOYEE.READ"
                        },
                        new
                        {
                            Id = 22,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ce316e47-e682-45a5-bd14-8a13f806a570",
                            Definition = "Personel Güncelleme Yetkisi",
                            Name = "Employee.Update",
                            NormalizedName = "EMPLOYEE.UPDATE"
                        },
                        new
                        {
                            Id = 23,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9bc3087b-0e4e-4735-8422-091171652b99",
                            Definition = "Personel Silme Yetkisi",
                            Name = "Employee.Delete",
                            NormalizedName = "EMPLOYEE.DELETE"
                        },
                        new
                        {
                            Id = 24,
                            AccessLevel = 3,
                            ConcurrencyStamp = "fde854c0-8f84-4fd7-9f20-d2fb7e83e705",
                            Definition = "Personel Türü Ekleme Yetkisi",
                            Name = "EmployeeType.Create",
                            NormalizedName = "EMPLOYEETYPE.CREATE"
                        },
                        new
                        {
                            Id = 25,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e733da6a-1fb6-495b-9543-010389519e5a",
                            Definition = "Personel Türü Görüntüleme Yetkisi",
                            Name = "EmployeeType.Read",
                            NormalizedName = "EMPLOYEETYPE.READ"
                        },
                        new
                        {
                            Id = 26,
                            AccessLevel = 3,
                            ConcurrencyStamp = "53b17ad8-c985-4ada-9a39-fad12fc624ed",
                            Definition = "Personel Türü Güncelleme Yetkisi",
                            Name = "EmployeeType.Update",
                            NormalizedName = "EMPLOYEETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 27,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a916b32a-1ba8-4004-86b2-d7017aee56cc",
                            Definition = "Personel Türü Silme Yetkisi",
                            Name = "EmployeeType.Delete",
                            NormalizedName = "EMPLOYEETYPE.DELETE"
                        },
                        new
                        {
                            Id = 28,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5b40205d-ce65-4744-b19b-f467cea14410",
                            Definition = "Müşteri Ekleme Yetkisi",
                            Name = "Customer.Create",
                            NormalizedName = "CUSTOMER.CREATE"
                        },
                        new
                        {
                            Id = 29,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ad6baf80-5cd9-4260-ad1e-a22a7dd7abf2",
                            Definition = "Müşteri Görüntüleme Yetkisi",
                            Name = "Customer.Read",
                            NormalizedName = "CUSTOMER.READ"
                        },
                        new
                        {
                            Id = 30,
                            AccessLevel = 3,
                            ConcurrencyStamp = "be9bb000-a409-40ff-ba93-c1b96ab343b2",
                            Definition = "Müşteri Güncelleme Yetkisi",
                            Name = "Customer.Update",
                            NormalizedName = "CUSTOMER.UPDATE"
                        },
                        new
                        {
                            Id = 31,
                            AccessLevel = 3,
                            ConcurrencyStamp = "75b9b879-ba04-4f7f-a29f-4d082de441d9",
                            Definition = "Müşteri Silme Yetkisi",
                            Name = "Customer.Delete",
                            NormalizedName = "CUSTOMER.DELETE"
                        },
                        new
                        {
                            Id = 32,
                            AccessLevel = 3,
                            ConcurrencyStamp = "aa6e4a88-162b-4a29-9f1e-4e29f5e0c124",
                            Definition = "Müşteri Tipi Ekleme Yetkisi",
                            Name = "CustomerType.Create",
                            NormalizedName = "CUSTOMERTYPE.CREATE"
                        },
                        new
                        {
                            Id = 33,
                            AccessLevel = 3,
                            ConcurrencyStamp = "74f4c1cc-dd7e-45f4-9d48-9a1cef2bda04",
                            Definition = "Müşteri Tipi Görüntüleme Yetkisi",
                            Name = "CustomerType.Read",
                            NormalizedName = "CUSTOMERTYPE.READ"
                        },
                        new
                        {
                            Id = 34,
                            AccessLevel = 3,
                            ConcurrencyStamp = "156f426e-d5e4-4a30-8c8f-da32b28df63e",
                            Definition = "Müşteri Tipi Güncelleme Yetkisi",
                            Name = "CustomerType.Update",
                            NormalizedName = "CUSTOMERTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 35,
                            AccessLevel = 3,
                            ConcurrencyStamp = "67e24c91-2b8c-4c19-ab65-3af1a97ff15c",
                            Definition = "Müşteri Tipi Silme Yetkisi",
                            Name = "CustomerType.Delete",
                            NormalizedName = "CUSTOMERTYPE.DELETE"
                        },
                        new
                        {
                            Id = 36,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a88f9a52-c59e-48c1-876b-ca9a3fd323bd",
                            Definition = "Bildirim Ekleme Yetkisi",
                            Name = "Notification.Create",
                            NormalizedName = "NOTIFICATION.CREATE"
                        },
                        new
                        {
                            Id = 37,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0f752b81-d8c1-4517-b750-133a22dc6e8c",
                            Definition = "Bildirim Görüntüleme Yetkisi",
                            Name = "Notification.Read",
                            NormalizedName = "NOTIFICATION.READ"
                        },
                        new
                        {
                            Id = 38,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2383a5ed-1d53-41a2-99d3-2bd125cc1a3a",
                            Definition = "Bildirim Güncelleme Yetkisi",
                            Name = "Notification.Update",
                            NormalizedName = "NOTIFICATION.UPDATE"
                        },
                        new
                        {
                            Id = 39,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8473067a-a8bb-4663-b53a-d95d58b3bd03",
                            Definition = "Bildirim Silme Yetkisi",
                            Name = "Notification.Delete",
                            NormalizedName = "NOTIFICATION.DELETE"
                        },
                        new
                        {
                            Id = 40,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f31d09bd-fe4c-4a08-a73f-ee1d7aa78751",
                            Definition = "Brand Ekleme Yetkisi",
                            Name = "Brand.Create",
                            NormalizedName = "BRAND.CREATE"
                        },
                        new
                        {
                            Id = 41,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3c0fb971-0c3a-42f7-aae2-a723ec8797fe",
                            Definition = "Brand Görüntüleme Yetkisi",
                            Name = "Brand.Read",
                            NormalizedName = "BRAND.READ"
                        },
                        new
                        {
                            Id = 42,
                            AccessLevel = 3,
                            ConcurrencyStamp = "dc8d135a-e913-4a88-a3a2-e2771fd62035",
                            Definition = "Brand Güncelleme Yetkisi",
                            Name = "Brand.Update",
                            NormalizedName = "BRAND.UPDATE"
                        },
                        new
                        {
                            Id = 43,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2eced17b-1b79-4562-bad8-bf814a970b30",
                            Definition = "Brand Silme Yetkisi",
                            Name = "Brand.Delete",
                            NormalizedName = "BRAND.DELETE"
                        },
                        new
                        {
                            Id = 44,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5b9b1dcd-c948-42b2-a11f-4d45ef94bf4a",
                            Definition = "Brand Ekleme Yetkisi",
                            Name = "MessageToDeveloper.Create",
                            NormalizedName = "MESSAGETODEVELOPER.CREATE"
                        },
                        new
                        {
                            Id = 45,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7bf62125-cdd3-4632-888c-ecb7c2c3a583",
                            Definition = "Brand  Yetkisi",
                            Name = "MessageToDeveloper.Read",
                            NormalizedName = "MESSAGETODEVELOPER.READ"
                        },
                        new
                        {
                            Id = 46,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2fad91a6-ce1b-4a31-8c8e-d79fc64af4c7",
                            Definition = "Brand  Yetkisi",
                            Name = "MessageToDeveloper.Update",
                            NormalizedName = "MESSAGETODEVELOPER.UPDATE"
                        },
                        new
                        {
                            Id = 47,
                            AccessLevel = 3,
                            ConcurrencyStamp = "456a921b-706d-4bf7-828e-0eec6931c512",
                            Definition = "Brand  Yetkisi",
                            Name = "MessageToDeveloper.Delete",
                            NormalizedName = "MESSAGETODEVELOPER.DELETE"
                        },
                        new
                        {
                            Id = 48,
                            AccessLevel = 3,
                            ConcurrencyStamp = "11f2e11c-787b-41e5-b896-455c6d01f210",
                            Definition = "Satış Durumu Ekleme Yetkisi",
                            Name = "SaleStatus.Create",
                            NormalizedName = "SALESTATUS.CREATE"
                        },
                        new
                        {
                            Id = 49,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6a994637-6b26-4435-86ef-c73929e0c8e1",
                            Definition = "Satış Durumu Görüntüleme Yetkisi",
                            Name = "SaleStatus.Read",
                            NormalizedName = "SALESTATUS.READ"
                        },
                        new
                        {
                            Id = 50,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b62c4008-6b68-4061-88c0-9c5a2a3906fd",
                            Definition = "Satış Durumu Güncelleme Yetkisi",
                            Name = "SaleStatus.Update",
                            NormalizedName = "SALESTATUS.UPDATE"
                        },
                        new
                        {
                            Id = 51,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f8cea51c-568b-4be0-bf1e-017f8681ddb8",
                            Definition = "Satış Durumu Silme Yetkisi",
                            Name = "SaleStatus.Delete",
                            NormalizedName = "SALESTATUS.DELETE"
                        },
                        new
                        {
                            Id = 52,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ca69d0ba-18ef-4e6a-9c14-100553ed9a6d",
                            Definition = "Satış Türü Ekleme Yetkisi",
                            Name = "SaleType.Create",
                            NormalizedName = "SALETYPE.CREATE"
                        },
                        new
                        {
                            Id = 53,
                            AccessLevel = 3,
                            ConcurrencyStamp = "19a8acfd-9d9b-4324-a423-0bcdd669d043",
                            Definition = "Satış Türü Görüntüleme Yetkisi",
                            Name = "SaleType.Read",
                            NormalizedName = "SALETYPE.READ"
                        },
                        new
                        {
                            Id = 54,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ecd33469-934a-4652-89c0-c8540c85b1b8",
                            Definition = "Satış Türü Güncelleme Yetkisi",
                            Name = "SaleType.Update",
                            NormalizedName = "SALETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 55,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bcac7cd3-c18b-43fa-a2d9-7be3ddf7f709",
                            Definition = "Satış Türü Silme Yetkisi",
                            Name = "SaleType.Delete",
                            NormalizedName = "SALETYPE.DELETE"
                        },
                        new
                        {
                            Id = 56,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4508baa5-7b96-41a1-9360-13004ef5b8ec",
                            Definition = "Ürün Grubu Ekleme Yetkisi",
                            Name = "ProductGroup.Create",
                            NormalizedName = "PRODUCTGROUP.CREATE"
                        },
                        new
                        {
                            Id = 57,
                            AccessLevel = 3,
                            ConcurrencyStamp = "05505671-758e-4152-8205-6e5dfe4482ff",
                            Definition = "Ürün Grubu Görüntüleme Yetkisi",
                            Name = "ProductGroup.Read",
                            NormalizedName = "PRODUCTGROUP.READ"
                        },
                        new
                        {
                            Id = 58,
                            AccessLevel = 3,
                            ConcurrencyStamp = "426237b2-de35-49be-a522-f17d51e48a7f",
                            Definition = "Ürün Grubu Güncelleme Yetkisi",
                            Name = "ProductGroup.Update",
                            NormalizedName = "PRODUCTGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 59,
                            AccessLevel = 3,
                            ConcurrencyStamp = "eadb609e-6717-4af8-b5b3-100f4fe7c4e8",
                            Definition = "Ürün Grubu Silme Yetkisi",
                            Name = "ProductGroup.Delete",
                            NormalizedName = "PRODUCTGROUP.DELETE"
                        },
                        new
                        {
                            Id = 60,
                            AccessLevel = 3,
                            ConcurrencyStamp = "df86faa4-0698-447b-8774-ae3d9e9b86fb",
                            Definition = "Ürün Alt Grubu Ekleme Yetkisi",
                            Name = "ProductSubGroup.Create",
                            NormalizedName = "PRODUCTSUBGROUP.CREATE"
                        },
                        new
                        {
                            Id = 61,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d533aadb-9424-461f-8d94-f971ee14d330",
                            Definition = "Ürün Alt Grubu Görüntüleme Yetkisi",
                            Name = "ProductSubGroup.Read",
                            NormalizedName = "PRODUCTSUBGROUP.READ"
                        },
                        new
                        {
                            Id = 62,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a22dc3cf-93a4-4c55-ace0-99009f9961ac",
                            Definition = "Ürün Alt Grubu Güncelleme Yetkisi",
                            Name = "ProductSubGroup.Update",
                            NormalizedName = "PRODUCTSUBGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 63,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a46d579f-abd6-4d0f-adac-9fd733a20a90",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "ProductSubGroup.Delete",
                            NormalizedName = "PRODUCTSUBGROUP.DELETE"
                        },
                        new
                        {
                            Id = 64,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3d72b311-2c9c-4c25-89c3-da0e9ec01fc3",
                            Definition = "Randevu Türü Ekleme Yetkisi",
                            Name = "AppointmentType.Create",
                            NormalizedName = "APPOINTMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 65,
                            AccessLevel = 3,
                            ConcurrencyStamp = "efe9b3af-64f8-469f-b2ad-1074b242c4de",
                            Definition = "Randevu Türü Görüntüleme Yetkisi",
                            Name = "AppointmentType.Read",
                            NormalizedName = "APPOINTMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 66,
                            AccessLevel = 3,
                            ConcurrencyStamp = "317c16c0-b020-4399-952c-19a4f50fdb95",
                            Definition = "Randevu Türü Güncelleme Yetkisi",
                            Name = "AppointmentType.Update",
                            NormalizedName = "APPOINTMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 67,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0e495cfa-efd6-428d-8e6f-68194a9aad92",
                            Definition = "Randevu Türü Silme Yetkisi",
                            Name = "AppointmentType.Delete",
                            NormalizedName = "APPOINTMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 68,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0959f771-56d4-49fe-a7a4-5b4cacbece83",
                            Definition = "Satış Oluşturma Yetkisi",
                            Name = "Sale.Create",
                            NormalizedName = "SALE.CREATE"
                        },
                        new
                        {
                            Id = 69,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6dfe1ac4-2c75-4b03-b382-a052f7ef5606",
                            Definition = "Satış Görüntüleme Yetkisi",
                            Name = "Sale.Read",
                            NormalizedName = "SALE.READ"
                        },
                        new
                        {
                            Id = 70,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c67e7d02-b287-490f-b4d5-f105600328a6",
                            Definition = "Satış Güncelleme Yetkisi",
                            Name = "Sale.Update",
                            NormalizedName = "SALE.UPDATE"
                        },
                        new
                        {
                            Id = 71,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7814057f-7e17-4213-8dd4-e090deb97daf",
                            Definition = "Satış Silme Yetkisi",
                            Name = "Sale.Delete",
                            NormalizedName = "SALE.DELETE"
                        },
                        new
                        {
                            Id = 72,
                            AccessLevel = 3,
                            ConcurrencyStamp = "312d8d1b-9274-41cb-8a8a-6c3e87435ccb",
                            Definition = "Ürün Ekleme Yetkisi",
                            Name = "Product.Create",
                            NormalizedName = "PRODUCT.CREATE"
                        },
                        new
                        {
                            Id = 73,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8152783f-4c40-4e4d-a8e2-0555bde2bafc",
                            Definition = "Ürün Görüntüleme Yetkisi",
                            Name = "Product.Read",
                            NormalizedName = "PRODUCT.READ"
                        },
                        new
                        {
                            Id = 74,
                            AccessLevel = 3,
                            ConcurrencyStamp = "af1a0143-2f56-4679-8ec3-0a1887443ee8",
                            Definition = "Ürün Güncelleme Yetkisi",
                            Name = "Product.Update",
                            NormalizedName = "PRODUCT.UPDATE"
                        },
                        new
                        {
                            Id = 75,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c60b4b2a-e313-4fef-8383-8b9ccf25fb1d",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "Product.Delete",
                            NormalizedName = "PRODUCT.DELETE"
                        },
                        new
                        {
                            Id = 76,
                            AccessLevel = 3,
                            ConcurrencyStamp = "55dccfdb-6d76-42ff-a3a9-2f429555f0b9",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "Appointment.Create",
                            NormalizedName = "APPOINTMENT.CREATE"
                        },
                        new
                        {
                            Id = 77,
                            AccessLevel = 3,
                            ConcurrencyStamp = "845b248d-f545-4d91-9302-0034c4ab2c97",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "Appointment.Read",
                            NormalizedName = "APPOINTMENT.READ"
                        },
                        new
                        {
                            Id = 78,
                            AccessLevel = 3,
                            ConcurrencyStamp = "63d827b1-9e89-459e-a8d4-31272d42e50e",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "Appointment.Update",
                            NormalizedName = "APPOINTMENT.UPDATE"
                        },
                        new
                        {
                            Id = 79,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2851ea02-f432-4265-8407-162608a7a3da",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "Appointment.Delete",
                            NormalizedName = "APPOINTMENT.DELETE"
                        },
                        new
                        {
                            Id = 80,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7f3cf96d-bce3-4964-8a35-1ad6b30c1c92",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "OutPayment.Create",
                            NormalizedName = "OUTPAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 81,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c06ec2ea-50fb-43e7-b98b-a0543ac3cac8",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "OutPayment.Read",
                            NormalizedName = "OUTPAYMENT.READ"
                        },
                        new
                        {
                            Id = 82,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d28255cb-cde8-45ab-88cb-d273221c9a9d",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "OutPayment.Update",
                            NormalizedName = "OUTPAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 83,
                            AccessLevel = 3,
                            ConcurrencyStamp = "beb163f6-8c04-4518-97a1-49695a59fcf7",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "OutPayment.Delete",
                            NormalizedName = "OUTPAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 84,
                            AccessLevel = 3,
                            ConcurrencyStamp = "14fe9d36-4be5-4ed3-adf0-ac9754a92ca8",
                            Definition = "Dış Ödeme Detayı Oluşturma Yetkisi",
                            Name = "OutPaymentDetail.Create",
                            NormalizedName = "OUTPAYMENTDETAIL.CREATE"
                        },
                        new
                        {
                            Id = 85,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c3243c40-9ade-4227-a5da-e017d75ee3d9",
                            Definition = "Dış Ödeme Detayı Görüntüleme Yetkisi",
                            Name = "OutPaymentDetail.Read",
                            NormalizedName = "OUTPAYMENTDETAIL.READ"
                        },
                        new
                        {
                            Id = 86,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9187c576-a3e4-4344-9f31-841f8bba4635",
                            Definition = "Dış Ödeme Detayı Güncelleme Yetkisi",
                            Name = "OutPaymentDetail.Update",
                            NormalizedName = "OUTPAYMENTDETAIL.UPDATE"
                        },
                        new
                        {
                            Id = 87,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f581445e-b49d-4158-998e-d0744657d841",
                            Definition = "Dış Ödeme Detayı Silme Yetkisi",
                            Name = "OutPaymentDetail.Delete",
                            NormalizedName = "OUTPAYMENTDETAIL.DELETE"
                        },
                        new
                        {
                            Id = 88,
                            AccessLevel = 2,
                            ConcurrencyStamp = "e4525751-597a-412b-ae6d-a17aa4d300bc",
                            Definition = "Markalar Programı Görüntüleme",
                            Name = "EmployeeProgram.Read",
                            NormalizedName = "EMPLOYEEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 89,
                            AccessLevel = 2,
                            ConcurrencyStamp = "6b8aec11-42e7-4b7e-9a80-0ad23502c9f2",
                            Definition = "Randevular Programı Görüntüleme",
                            Name = "InstitutionalProgram.Read",
                            NormalizedName = "INSTITUTIONALPROGRAM.READ"
                        },
                        new
                        {
                            Id = 90,
                            AccessLevel = 2,
                            ConcurrencyStamp = "62f06657-a347-42fd-ace8-e8d123e12ddc",
                            Definition = "Hastalar Programı Görüntüleme",
                            Name = "CustomerProgram.Read",
                            NormalizedName = "CUSTOMERPROGRAM.READ"
                        },
                        new
                        {
                            Id = 91,
                            AccessLevel = 2,
                            ConcurrencyStamp = "4b47b5b6-a7d9-493b-be01-628eece89baf",
                            Definition = "Referanslar Programı Görüntüleme",
                            Name = "PaymentProgram.Read",
                            NormalizedName = "PAYMENTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 92,
                            AccessLevel = 2,
                            ConcurrencyStamp = "cd800a14-236e-4f95-9b38-bff188db2552",
                            Definition = "Ürünler Programı Görüntüleme",
                            Name = "ProductProgram.Read",
                            NormalizedName = "PRODUCTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 93,
                            AccessLevel = 2,
                            ConcurrencyStamp = "e8f07295-361d-4fe3-9179-03cf5d6b5e77",
                            Definition = "Roller Programı Görüntüleme",
                            Name = "MarketingProgram.Read",
                            NormalizedName = "MARKETINGPROGRAM.READ"
                        },
                        new
                        {
                            Id = 94,
                            AccessLevel = 2,
                            ConcurrencyStamp = "610ca5aa-47d4-4ba5-8b5f-9c8fdf9ff51b",
                            Definition = "Satışlar Programı Görüntüleme",
                            Name = "AgendaProgram.Read",
                            NormalizedName = "AGENDAPROGRAM.READ"
                        },
                        new
                        {
                            Id = 95,
                            AccessLevel = 2,
                            ConcurrencyStamp = "dcd6fe23-561a-4642-a830-672a978d17d8",
                            Definition = "Stok Programı Görüntüleme",
                            Name = "FinanceProgram.Read",
                            NormalizedName = "FINANCEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 96,
                            AccessLevel = 1,
                            ConcurrencyStamp = "e3fd429a-c960-4431-8afe-65706b0c0e42",
                            Definition = "Anasayfa Görüntüleme Yetkisi",
                            Name = "HomeProgram.Read",
                            NormalizedName = "HOMEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 97,
                            AccessLevel = 1,
                            ConcurrencyStamp = "0b5852b9-5c3a-441d-b670-7ba87f3776df",
                            Definition = "Stok Modülü Görüntüleme",
                            Name = "StockModule.Read",
                            NormalizedName = "StockModule.Read"
                        },
                        new
                        {
                            Id = 98,
                            AccessLevel = 1,
                            ConcurrencyStamp = "09ae110c-d178-46ba-8358-479f15d47d73",
                            Definition = "Personel Tipleri Modülü Görüntüleme",
                            Name = "EmployeeTypeModule.Read",
                            NormalizedName = "EMPLOYEETYPEMODULE.READ"
                        },
                        new
                        {
                            Id = 99,
                            AccessLevel = 1,
                            ConcurrencyStamp = "acbd5130-1a40-40c2-82d0-05781525bd0a",
                            Definition = "Personeller Modülü Görüntüleme",
                            Name = "EmployeeModule.Read",
                            NormalizedName = "EMPLOYEEMODULE.READ"
                        },
                        new
                        {
                            Id = 100,
                            AccessLevel = 1,
                            ConcurrencyStamp = "4cde6887-802f-4016-945f-28bb0d1dc209",
                            Definition = "Kullanıcılar Modülü Görüntüleme",
                            Name = "UserModule.Read",
                            NormalizedName = "USERMODULE.READ"
                        },
                        new
                        {
                            Id = 101,
                            AccessLevel = 1,
                            ConcurrencyStamp = "ad8b5f02-80aa-4330-bcbf-9e8f0b06bb7d",
                            Definition = "Hastalar Modülü Görüntüleme",
                            Name = "CustomerModule.Read",
                            NormalizedName = "CUSTOMERMODULE.READ"
                        },
                        new
                        {
                            Id = 102,
                            AccessLevel = 1,
                            ConcurrencyStamp = "3f97f965-dd33-42c9-a8f8-d6f486a57a8f",
                            Definition = "HAsta Tipleri Modülü Görüntüleme",
                            Name = "CustomerTypeModule.Read",
                            NormalizedName = "CUSTOMERTYPEMODULE.READ"
                        },
                        new
                        {
                            Id = 103,
                            AccessLevel = 1,
                            ConcurrencyStamp = "5cc8cb54-e8ae-4cb4-93f8-5b7e76e0083d",
                            Definition = "Ürünler Modülü Yetkisi",
                            Name = "ProductModule.Read",
                            NormalizedName = "PRODUCTMODULE.READ"
                        },
                        new
                        {
                            Id = 104,
                            AccessLevel = 1,
                            ConcurrencyStamp = "e50332ad-12df-4d63-a273-50c7f09aff66",
                            Definition = "Ürün Grupları Modülü Yetkisi",
                            Name = "ProductGroupModule.Read",
                            NormalizedName = "PRODUCTGROUPMODULE.READ"
                        },
                        new
                        {
                            Id = 105,
                            AccessLevel = 1,
                            ConcurrencyStamp = "1f617636-2d00-43f6-bdc5-d51856df0ec1",
                            Definition = "Ürün Alt Grupları Modülü Yetkisi",
                            Name = "ProductSubGroupModule.Read",
                            NormalizedName = "PRODUCTSUBGROUPMODULE.READ"
                        },
                        new
                        {
                            Id = 106,
                            AccessLevel = 1,
                            ConcurrencyStamp = "2830553b-40bd-4b6f-9873-0c6b1aeda87e",
                            Definition = "Markalar Modülü Yetkisi",
                            Name = "BrandModule.Read",
                            NormalizedName = "BRANDMODULE.READ"
                        },
                        new
                        {
                            Id = 107,
                            AccessLevel = 1,
                            ConcurrencyStamp = "360fd0cc-d62e-472e-8027-72a0971c631d",
                            Definition = "Hasta Referanları Modülü Yetkisi",
                            Name = "CustomerReferanceModule.Read",
                            NormalizedName = "CUSTOMERREFERANCEMODULE.READ"
                        },
                        new
                        {
                            Id = 108,
                            AccessLevel = 1,
                            ConcurrencyStamp = "28e5363f-9e34-45fa-b717-3e027c20aeb5",
                            Definition = "Randevular Modülü Yetkisi",
                            Name = "AppointmentModule.Read",
                            NormalizedName = "APPOINTMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 109,
                            AccessLevel = 1,
                            ConcurrencyStamp = "6524d4ce-a2c6-4c6d-a432-2e4d16f83243",
                            Definition = "Bildirimler Modülü Yetkisi",
                            Name = "NotificationModule.Read",
                            NormalizedName = "NOTIFICATIONMODULE.READ"
                        },
                        new
                        {
                            Id = 110,
                            AccessLevel = 1,
                            ConcurrencyStamp = "e379fff5-d441-4746-9312-bc3b2e462fcd",
                            Definition = "Dış Ödemeler Modülü Yetkisi",
                            Name = "OutPaymentModule.Read",
                            NormalizedName = "OUTPAYMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 111,
                            AccessLevel = 1,
                            ConcurrencyStamp = "75026495-a41f-4a2c-b6b9-573d538deb98",
                            Definition = "Satışlar Modülü Yetkisi",
                            Name = "SaleModule.Read",
                            NormalizedName = "SALEMODULE.READ"
                        },
                        new
                        {
                            Id = 112,
                            AccessLevel = 1,
                            ConcurrencyStamp = "52714ce1-ab12-43f0-9734-c939eca1be3a",
                            Definition = "Gelen Ödemeler Modülü Yetkisi",
                            Name = "PaymentModule.Read",
                            NormalizedName = "PAYMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 113,
                            AccessLevel = 1,
                            ConcurrencyStamp = "d4b9b9e3-d3d9-4e64-92f9-d48bc53cbd6a",
                            Definition = "Gelir Giderler Modülü Yetkisi",
                            Name = "ExpenseModule.Read",
                            NormalizedName = "EXPENSEMODULE.READ"
                        },
                        new
                        {
                            Id = 114,
                            AccessLevel = 1,
                            ConcurrencyStamp = "3b25f32f-fefa-473b-90c6-b5ecf110c6ed",
                            Definition = "Roller Modülü Yetkisi",
                            Name = "RoleModule.Read",
                            NormalizedName = "ROLEMODULE.READ"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfSgk")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvoiceDue")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("SaleStatusId");

                    b.HasIndex("SaleTypeId");

                    b.ToTable("Sales", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 500,
                            AmountOfSgk = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(5108),
                            CustomerId = 1,
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsInvoiceDue = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(5109),
                            ProductId = 1,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 200,
                            AmountOfSgk = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(5113),
                            CustomerId = 1,
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsInvoiceDue = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(5114),
                            ProductId = 2,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 500,
                            AmountOfSgk = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(5116),
                            CustomerId = 1,
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsInvoiceDue = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(5117),
                            ProductId = 3,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SaleStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(2809),
                            Description = "açıklama deneme status sale 1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(2809),
                            Title = "Satış Aşamasında"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(2811),
                            Description = "açıklama deneme status sale 1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(2812),
                            Title = "Satıldı"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SaleTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(5692),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(5693),
                            Title = "Nakit"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(5697),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(5697),
                            Title = "Kart"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(5699),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(5700),
                            Title = "Çek"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(5701),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(5702),
                            Title = "Senet"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("Stocks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(1406),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(1407),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 1,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(1409),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(1410),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 2,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(1412),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(1413),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 3,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(1414),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 766, DateTimeKind.Local).AddTicks(1415),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 4,
                            Quantity = 20
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("SubPrograms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7071),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7071),
                            Name = "User.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7073),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7074),
                            Name = "User.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7076),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7076),
                            Name = "User.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7078),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7078),
                            Name = "User.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 14,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7080),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7081),
                            Name = "Role.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7082),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7083),
                            Name = "Role.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7084),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7085),
                            Name = "Role.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7086),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7087),
                            Name = "Role.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 37,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7088),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7089),
                            Name = "Payment.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 38,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7090),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7091),
                            Name = "Payment.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 39,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7093),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7093),
                            Name = "Payment.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 40,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7095),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7095),
                            Name = "Payment.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 41,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7097),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7097),
                            Name = "PaymentType.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 42,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7099),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7099),
                            Name = "PaymentType.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 43,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7101),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7101),
                            Name = "PaymentType.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 44,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7103),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7103),
                            Name = "PaymentType.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 45,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7105),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7105),
                            Name = "Employee.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 46,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7107),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7107),
                            Name = "Employee.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 47,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7109),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7109),
                            Name = "Employee.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 48,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7111),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7112),
                            Name = "Employee.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 49,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7113),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7114),
                            Name = "EmployeeType.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 50,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7115),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7116),
                            Name = "EmployeeType.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 51,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7117),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7118),
                            Name = "EmployeeType.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 52,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7119),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7120),
                            Name = "EmployeeType.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 53,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7121),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7122),
                            Name = "Customer.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 54,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7123),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7124),
                            Name = "Customer.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 55,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7126),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7126),
                            Name = "Customer.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 56,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7128),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7128),
                            Name = "Customer.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 57,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7130),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7130),
                            Name = "CustomerType.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 58,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7132),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7132),
                            Name = "CustomerType.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 59,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7134),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7134),
                            Name = "CustomerType.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 60,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7136),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7136),
                            Name = "CustomerType.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 61,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7138),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7138),
                            Name = "Notification.Create",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 62,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7140),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7141),
                            Name = "Notification.Read",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 63,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7142),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7143),
                            Name = "Notification.Update",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 64,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7144),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7145),
                            Name = "Notification.Delete",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 65,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7146),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7147),
                            Name = "Brand.Create",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 66,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7148),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7149),
                            Name = "Brand.Update",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 67,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7150),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7151),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 85,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7152),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7153),
                            Name = "Brand.Read",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 68,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7154),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7155),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 69,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7156),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7157),
                            Name = "SaleStatus.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 70,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7158),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7159),
                            Name = "SaleStatus.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 71,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7160),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7161),
                            Name = "SaleStatus.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 72,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7162),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7163),
                            Name = "SaleStatus.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 73,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7164),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7165),
                            Name = "SaleType.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 74,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7166),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7167),
                            Name = "SaleType.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 75,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7168),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7169),
                            Name = "SaleType.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 76,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7170),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7171),
                            Name = "SaleType.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 77,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7172),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7173),
                            Name = "ProductGroup.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 78,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7174),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7175),
                            Name = "ProductGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 79,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7176),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7177),
                            Name = "ProductGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 80,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7178),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7179),
                            Name = "ProductGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 81,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7180),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7181),
                            Name = "ProductSubGroup.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 82,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7182),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7183),
                            Name = "ProductSubGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 83,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7184),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7185),
                            Name = "ProductSubGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 84,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7186),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7186),
                            Name = "ProductSubGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 89,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7189),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7189),
                            Name = "AppointmentType.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 90,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7191),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7191),
                            Name = "AppointmentType.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 91,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7216),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7216),
                            Name = "AppointmentType.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 92,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7218),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7218),
                            Name = "AppointmentType.Delete",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 93,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7220),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7220),
                            Name = "Sale.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 94,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7222),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7222),
                            Name = "Sale.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 95,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7224),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7224),
                            Name = "Sale.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 96,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7226),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7227),
                            Name = "Sale.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 97,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7228),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7229),
                            Name = "Product.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 98,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7230),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7231),
                            Name = "Product.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 99,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7232),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7233),
                            Name = "Product.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 100,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7234),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7235),
                            Name = "Product.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 101,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7236),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7237),
                            Name = "Appointment.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 102,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7238),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7239),
                            Name = "Appointment.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 103,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7240),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7240),
                            Name = "Appointment.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 104,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7242),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 778, DateTimeKind.Local).AddTicks(7242),
                            Name = "Appointment.Delete",
                            ProgramId = 5
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Link")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Admin | Bilal",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7afe39dc-fb46-4ad4-83ed-fc02ae9ec6fa",
                            Email = "bilalAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bilal",
                            Institution = "Fokus",
                            LastName = "Meto",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "BILALADMIN@GMAIL.COM",
                            NormalizedUserName = "BILALADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAED0nVN2OU0XEFKlQ2QhMPryter3EbCpj7fNGH0Wb1WJjLXDRsJFwkvYHCqZIOAudcg==",
                            PhoneNumber = "+905537314131",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "1198965e-b6a0-4a7a-b33b-67ace81ea220",
                            TwoFactorEnabled = false,
                            UserName = "bilalAdmin"
                        },
                        new
                        {
                            Id = 2,
                            About = "Admin | Nazlı",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a78957b5-7ada-49b2-b43f-e229f918b100",
                            Email = "nazliAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nazlı",
                            Institution = "Fokus",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "NAZLIADMIN@GMAIL.COM",
                            NormalizedUserName = "NAZLIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECaU1MS0CnH3G0/VahXaUzMZKimM/iuGnTnnubWAr/P7FKdXqrYE2ey/PmSy2jMVag==",
                            PhoneNumber = "+905398815246",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "0086f404-21c7-4c1a-8aa2-b6d5a3d36a2d",
                            TwoFactorEnabled = false,
                            UserName = "nazliAdmin"
                        },
                        new
                        {
                            Id = 3,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48370760-79b2-487e-881a-e349c4bd8206",
                            Email = "sema@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sema",
                            Institution = "Fokus",
                            LastName = "-",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEMA@GMAIL.COM",
                            NormalizedUserName = "SEMA",
                            PasswordHash = "AQAAAAEAACcQAAAAEDEKEpXMU/JQOzuyLo3oAkUbayy58dys/EzNydHikWvMlqoSQjTowbSQxUsDQVfljQ==",
                            PhoneNumber = "+905071273567",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "97005f51-5ad5-4051-a796-17a81856fe40",
                            TwoFactorEnabled = false,
                            UserName = "sema"
                        },
                        new
                        {
                            Id = 4,
                            About = "Geliştirici",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b667878a-d83b-4ada-a4a2-3bd3fba87e60",
                            Email = "x@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bedirhan",
                            Institution = "Dev",
                            LastName = "Gündöner",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "X@GMAIL.COM",
                            NormalizedUserName = "DEV",
                            PasswordHash = "AQAAAAEAACcQAAAAELKAKMLHOZheG3srSKiw9WGZC18v73l5vdwmYp9YAYcfUb6viZ+cIM1wjzbauHya6A==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "e8975b8b-abed-4c4f-ba9f-f91f788c1cd7",
                            TwoFactorEnabled = false,
                            UserName = "dev"
                        },
                        new
                        {
                            Id = 5,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08f739b1-55d3-4d16-8539-14ab74a258aa",
                            Email = "berra@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Berra",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERRA@GMAIL.COM",
                            NormalizedUserName = "BERRA",
                            PasswordHash = "AQAAAAEAACcQAAAAECM/5lo9j3CzG31hgpn4rzNkbs9ObyA2FmlSWA6N5q3ZiDTsE0GmSRJxyWa6mnt2Vg==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "db750c31-c2f5-4198-b8c9-9c5ecd0fca12",
                            TwoFactorEnabled = false,
                            UserName = "berra"
                        },
                        new
                        {
                            Id = 6,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7753b552-de01-48cc-b39a-19dcdf0fa4ab",
                            Email = "Elif@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elif",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF@GMAIL.COM",
                            NormalizedUserName = "ELIF",
                            PasswordHash = "AQAAAAEAACcQAAAAEN26Fdy9kUb5Q1rVNPUo1Dl9aa0i3GS3RfgU/OGD7sAAn4kn1BGC3xXVNwpm2BbU1A==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "b23a26f9-a336-4aeb-bd41-00cd84cae22c",
                            TwoFactorEnabled = false,
                            UserName = "Elif"
                        },
                        new
                        {
                            Id = 7,
                            About = "Admin | Bilal",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85d0b58f-2abd-41c8-9345-a34ed5127e31",
                            Email = "esmaAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bilal",
                            Institution = "Ases",
                            LastName = "Meto",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESMAADMIN@GMAIL.COM",
                            NormalizedUserName = "ESMAADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ9Vo+j1NoqByHx1kaCGRa/mIfSiQ4e3fmqhUvgl7JRG06MXMRT7M9Ql1WBOgPfoIQ==",
                            PhoneNumber = "+905537314131",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "3f64267c-b945-4cb1-b95e-2ce1bd8f9f39",
                            TwoFactorEnabled = false,
                            UserName = "esmaAdmin"
                        },
                        new
                        {
                            Id = 8,
                            About = "Admin | Nazlı",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31753705-f5c7-4d18-a5d3-68a0f81e34c2",
                            Email = "asiyeAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nazlı",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASIYEADMIN@GMAIL.COM",
                            NormalizedUserName = "ASIYEADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5arlZy7OQQwxM0I+jKQzAZVUVbTKs7/i05lHZVGa5srMeoWfzR3kwJhL2MnUhRWg==",
                            PhoneNumber = "+905398815246",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "c6bb733a-3ab5-4a78-bb89-671b0120096d",
                            TwoFactorEnabled = false,
                            UserName = "asiyeAdmin"
                        },
                        new
                        {
                            Id = 9,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa6f44eb-49d5-4a2f-b7c6-ad00204c37fc",
                            Email = "gulistan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sema",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "GULISTAN@GMAIL.COM",
                            NormalizedUserName = "GULISTAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEKE+Klohd0MtwQBcLdyYv1l+PG7WsT1qGH80Jnj6CBTHbzSjKIBBxEgd3JmcN4oqXQ==",
                            PhoneNumber = "+905071273567",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "15a8f22a-fbc9-48f0-8b96-07abb226d7f6",
                            TwoFactorEnabled = false,
                            UserName = "gulistan"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4623),
                            Description = "C# Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4623),
                            Name = "C#",
                            Note = "C# Blog Kategorisi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4626),
                            Description = "C++ Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4626),
                            Name = "C++",
                            Note = "C++ Blog Kategorisi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4628),
                            Description = "JavaScript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4629),
                            Name = "JavaScript",
                            Note = "JavaScript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4631),
                            Description = "Typescript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4631),
                            Name = "Typescript",
                            Note = "Typescript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4633),
                            Description = "Java Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4634),
                            Name = "Java",
                            Note = "Java Blog Kategorisi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4637),
                            Description = "Python Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4638),
                            Name = "Python",
                            Note = "Python Blog Kategorisi"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4641),
                            Description = "Php Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4641),
                            Name = "Php",
                            Note = "Php Blog Kategorisi"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4643),
                            Description = "Kotlin Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4643),
                            Name = "Kotlin",
                            Note = "Kotlin Blog Kategorisi"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4645),
                            Description = "Swift Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4645),
                            Name = "Swift",
                            Note = "Swift Blog Kategorisi"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4647),
                            Description = "Ruby Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(4648),
                            Name = "Ruby",
                            Note = "Ruby Blog Kategorisi"
                        });
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(9423),
                            Description = "Product Kategori 2 Açıkama",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(9424),
                            Name = "Product Kategori 1",
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(9427),
                            Description = "Product Kategori 2 Açıkama",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2023, 9, 8, 5, 2, 40, 765, DateTimeKind.Local).AddTicks(9427),
                            Name = "Product Kategori 2",
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany("Appointments")
                        .HasForeignKey("UserId");

                    b.Navigation("AppointmentType");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.HasOne("MyBlog.Shared.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany("AssociatedInstitutions")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferance", "CustomerReferance")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerReferanceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Customers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferance");

                    b.Navigation("CustomerType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferanceTitle", "CustomerReferanceTitle")
                        .WithMany("CustomersReferances")
                        .HasForeignKey("CustomerReferanceTitleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferanceTitle");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Notifications")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPaymentDetail", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("outPaymentDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.OutPayment", "OutPayment")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("OutPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("OutPayment");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", null)
                        .WithMany("Payments")
                        .HasForeignKey("AssociatedInstitutionId");

                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", "AssociatedInstitutions")
                        .WithMany()
                        .HasForeignKey("AssociatedInstitutionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", null)
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId1");

                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Shared.Entities.Concrete.ProductCategory", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("MyBlog.Entities.Concrete.ProductSubGroup", "ProductSubGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("ProductSubGroup");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.ProductGroup", "ProductGroup")
                        .WithMany("ProductSubGroups")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Module", "Module")
                        .WithMany("Programs")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId");

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Sales")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Sale")
                        .HasForeignKey("MyBlog.Entities.Concrete.Sale", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.SaleStatus", "SaleStatus")
                        .WithMany("Sales")
                        .HasForeignKey("SaleStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SaleType", "SaleType")
                        .WithMany("Sales")
                        .HasForeignKey("SaleTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Product");

                    b.Navigation("SaleStatus");

                    b.Navigation("SaleType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("MyBlog.Entities.Concrete.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Program", "Program")
                        .WithMany("SubPrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferanceTitle", b =>
                {
                    b.Navigation("CustomersReferances");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Customers");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");

                    b.Navigation("outPaymentDetails");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPayment", b =>
                {
                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Navigation("ProductSubGroups");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Navigation("SubPrograms");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Articles");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
