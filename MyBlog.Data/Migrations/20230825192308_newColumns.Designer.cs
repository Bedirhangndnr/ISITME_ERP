// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.Data.Concrete.EntityFramework.Context;

#nullable disable

namespace MyBlog.Data.Migrations
{
    [DbContext(typeof(MyBlogContext))]
    [Migration("20230825192308_newColumns")]
    partial class newColumns
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMade")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTypeId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 145, DateTimeKind.Local).AddTicks(607),
                            CustomerId = 1,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama2",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 145, DateTimeKind.Local).AddTicks(607),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentTypeId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 145, DateTimeKind.Local).AddTicks(612),
                            CustomerId = 2,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 145, DateTimeKind.Local).AddTicks(612),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentTypeId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 145, DateTimeKind.Local).AddTicks(615),
                            CustomerId = 3,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama3",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 145, DateTimeKind.Local).AddTicks(615),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(9315),
                            Description = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(9316),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Test"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(9318),
                            Description = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(9318),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CommentCount = 0,
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2043),
                            Date = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2042),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2044),
                            Note = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoTags = "C#, C# 9, .NET5, .NET Framework, .NET Core",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C# 9.0 ve .NET 5 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CommentCount = 0,
                            Content = "Yinelenen bir sayfa içeriğinin okuyucunun dikkatini dağıttığı bilinen bir gerçektir. Lorem Ipsum kullanmanın amacı, sürekli 'buraya metin gelecek, buraya metin gelecek' yazmaya kıyasla daha dengeli bir harf dağılımı sağlayarak okunurluğu artırmasıdır. Şu anda birçok masaüstü yayıncılık paketi ve web sayfa düzenleyicisi, varsayılan mıgır metinler olarak Lorem Ipsum kullanmaktadır. Ayrıca arama motorlarında 'lorem ipsum' anahtar sözcükleri ile arama yapıldığında henüz tasarım aşamasında olan çok sayıda site listelenir. Yıllar içinde, bazen kazara, bazen bilinçli olarak (örneğin mizah katılarak), çeşitli sürümleri geliştirilmiştir.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2047),
                            Date = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2047),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2048),
                            Note = "C++ 11 ve 19 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C++ 11 ve 19 Yenilikleri",
                            SeoTags = "C++ 11 ve 19 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C++ 11 ve 19 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 295
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2051),
                            Date = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2050),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2052),
                            Note = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoTags = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 12
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CommentCount = 0,
                            Content = "É um facto estabelecido de que um leitor é distraído pelo conteúdo legível de uma página quando analisa a sua mancha gráfica. Logo, o uso de Lorem Ipsum leva a uma distribuição mais ou menos normal de letras, ao contrário do uso de 'Conteúdo aqui,conteúdo aqui'', tornando-o texto legível. Muitas ferramentas de publicação electrónica e editores de páginas web usam actualmente o Lorem Ipsum como o modelo de texto usado por omissão, e uma pesquisa por 'lorem ipsum' irá encontrar muitos websites ainda na sua infância. Várias versões têm evoluído ao longo dos anos, por vezes por acidente, por vezes propositadamente (como no caso do humor).",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2054),
                            Date = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2053),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2054),
                            Note = "Typescript 4.1 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Typescript 4.1, Typescript, TYPESCRIPT 2021",
                            SeoTags = "Typescript 4.1 Güncellemeleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Typescript 4.1",
                            UserId = 1,
                            ViewsCount = 666
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2057),
                            Date = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2056),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2057),
                            Note = "JAVA",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Java, Android, Mobile, Kotlin, Uygulama Geliştirme",
                            SeoTags = "Java, Mobil, Kotlin, Android, IOS, SWIFT",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Java ve Android'in Geleceği | 2021",
                            UserId = 1,
                            ViewsCount = 3225
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            CommentCount = 0,
                            Content = "Le Lorem Ipsum est simplement du faux texte employé dans la composition et la mise en page avant impression. Le Lorem Ipsum est le faux texte standard de l'imprimerie depuis les années 1500, quand un imprimeur anonyme assembla ensemble des morceaux de texte pour réaliser un livre spécimen de polices de texte. Il n'a pas fait que survivre cinq siècles, mais s'est aussi adapté à la bureautique informatique, sans que son contenu n'en soit modifié. Il a été popularisé dans les années 1960 grâce à la vente de feuilles Letraset contenant des passages du Lorem Ipsum, et, plus récemment, par son inclusion dans des applications de mise en page de texte, comme Aldus PageMaker.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2060),
                            Date = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2059),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2060),
                            Note = "Python",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Python ile Veri Madenciliği",
                            SeoTags = "Python, Veri Madenciliği Nasıl Yapılır?",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Python ile Veri Madenciliği | 2021",
                            UserId = 1,
                            ViewsCount = 9999
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            CommentCount = 0,
                            Content = "Contrairement à une opinion répandue, le Lorem Ipsum n'est pas simplement du texte aléatoire. Il trouve ses racines dans une oeuvre de la littérature latine classique datant de 45 av. J.-C., le rendant vieux de 2000 ans. Un professeur du Hampden-Sydney College, en Virginie, s'est intéressé à un des mots latins les plus obscurs, consectetur, extrait d'un passage du Lorem Ipsum, et en étudiant tous les usages de ce mot dans la littérature classique, découvrit la source incontestable du Lorem Ipsum. Il provient en fait des sections 1.10.32 et 1.10.33 du 0De Finibus Bonorum et Malorum' (Des Suprêmes Biens et des Suprêmes Maux) de Cicéron. Cet ouvrage, très populaire pendant la Renaissance, est un traité sur la théorie de l'éthique. Les premières lignes du Lorem Ipsum, 'Lorem ipsum dolor sit amet...'', proviennent de la section 1.10.32",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2062),
                            Date = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2062),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2063),
                            Note = "PHP",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Php ile API Oluşturma Rehberi",
                            SeoTags = "php, laravel, api, oop",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Php Laravel Başlangıç Rehberi | API",
                            UserId = 1,
                            ViewsCount = 4818
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            CommentCount = 0,
                            Content = "Plusieurs variations de Lorem Ipsum peuvent être trouvées ici ou là, mais la majeure partie d'entre elles a été altérée par l'addition d'humour ou de mots aléatoires qui ne ressemblent pas une seconde à du texte standard. Si vous voulez utiliser un passage du Lorem Ipsum, vous devez être sûr qu'il n'y a rien d'embarrassant caché dans le texte. Tous les générateurs de Lorem Ipsum sur Internet tendent à reproduire le même extrait sans fin, ce qui fait de lipsum.com le seul vrai générateur de Lorem Ipsum. Iil utilise un dictionnaire de plus de 200 mots latins, en combinaison de plusieurs structures de phrases, pour générer un Lorem Ipsum irréprochable. Le Lorem Ipsum ainsi obtenu ne contient aucune répétition, ni ne contient des mots farfelus, ou des touches d'humour.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2065),
                            Date = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2065),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2066),
                            Note = "Kotlin",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Kotlin ile Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "kotlin, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Kotlin ile Mobil Programlama",
                            UserId = 1,
                            ViewsCount = 750
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            CommentCount = 0,
                            Content = "Al contrario di quanto si pensi, Lorem Ipsum non è semplicemente una sequenza casuale di caratteri. Risale ad un classico della letteratura latina del 45 AC, cosa che lo rende vecchio di 2000 anni. Richard McClintock, professore di latino al Hampden-Sydney College in Virginia, ha ricercato una delle più oscure parole latine, consectetur, da un passaggio del Lorem Ipsum e ha scoperto tra i vari testi in cui è citata, la fonte da cui è tratto il testo, le sezioni 1.10.32 and 1.10.33 del 'de Finibus Bonorum et Malorum' di Cicerone. Questo testo è un trattato su teorie di etica, molto popolare nel Rinascimento. La prima riga del Lorem Ipsum, 'Lorem ipsum dolor sit amet..'', è tratta da un passaggio della sezione 1.10.32.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2068),
                            Date = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2067),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2069),
                            Note = "Swift",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Swift ile IOS Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "IOS, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Swift ile IOS Programlama",
                            UserId = 1,
                            ViewsCount = 14900
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            CommentCount = 0,
                            Content = "Esistono innumerevoli variazioni dei passaggi del Lorem Ipsum, ma la maggior parte hanno subito delle variazioni del tempo, a causa dell’inserimento di passaggi ironici, o di sequenze casuali di caratteri palesemente poco verosimili. Se si decide di utilizzare un passaggio del Lorem Ipsum, è bene essere certi che non contenga nulla di imbarazzante. In genere, i generatori di testo segnaposto disponibili su internet tendono a ripetere paragrafi predefiniti, rendendo questo il primo vero generatore automatico su intenet. Infatti utilizza un dizionario di oltre 200 vocaboli latini, combinati con un insieme di modelli di strutture di periodi, per generare passaggi di testo verosimili. Il testo così generato è sempre privo di ripetizioni, parole imbarazzanti o fuori luogo ecc.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2071),
                            Date = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2070),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2071),
                            Note = "Ruby",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Ruby, Ruby on Rails Web Programlama, AirBnb Klon",
                            SeoTags = "Ruby on Rails, Ruby, Web Programlama, AirBnb",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Ruby on Rails ile AirBnb Klon Kodlayalım",
                            UserId = 1,
                            ViewsCount = 26777
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("AssociatedInstitutions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6978),
                            Description = "İş Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6979),
                            PaymentTypeId = 1,
                            Title = "İş Bankası"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6981),
                            Description = "Garanti Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6982),
                            PaymentTypeId = 1,
                            Title = "Garanti Bankası"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6983),
                            Description = "Yapı Kredi Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6983),
                            PaymentTypeId = 1,
                            Title = "Yapı Kredi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6984),
                            Description = "Akbank Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6984),
                            PaymentTypeId = 1,
                            Title = "Akbank"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6985),
                            Description = "Avrupa Ses Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6985),
                            PaymentTypeId = 2,
                            Title = "Avrupa Ses"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6987),
                            Description = "Sivasot Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6987),
                            PaymentTypeId = 2,
                            Title = "Sivasot"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6989),
                            Description = "Timtoptan Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6989),
                            PaymentTypeId = 2,
                            Title = "Timtoptan"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(8844),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(8844),
                            Title = "Brand Title Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "act Manuel"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3458),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3459),
                            Note = "C# Makale Yorumu",
                            Text = "Lorem Ipsum pasajlarının birçok çeşitlemesi vardır. Ancak bunların büyük bir çoğunluğu mizah katılarak veya rastgele sözcükler eklenerek değiştirilmişlerdir. Eğer bir Lorem Ipsum pasajı kullanacaksanız, metin aralarına utandırıcı sözcükler gizlenmediğinden emin olmanız gerekir. İnternet'teki tüm Lorem Ipsum üreteçleri önceden belirlenmiş metin bloklarını yineler. Bu da, bu üreteci İnternet üzerindeki gerçek Lorem Ipsum üreteci yapar. Bu üreteç, 200'den fazla Latince sözcük ve onlara ait cümle yapılarını içeren bir sözlük kullanır. Bu nedenle, üretilen Lorem Ipsum metinleri yinelemelerden, mizahtan ve karakteristik olmayan sözcüklerden uzaktır."
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3461),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3461),
                            Note = "C++ Makale Yorumu",
                            Text = "Lorem Ipsum jest tekstem stosowanym jako przykładowy wypełniacz w przemyśle poligraficznym. Został po raz pierwszy użyty w XV w. przez nieznanego drukarza do wypełnienia tekstem próbnej książki. Pięć wieków później zaczął być używany przemyśle elektronicznym, pozostając praktycznie niezmienionym. Spopularyzował się w latach 60. XX w. wraz z publikacją arkuszy Letrasetu, zawierających fragmenty Lorem Ipsum, a ostatnio z zawierającym różne wersje Lorem Ipsum oprogramowaniem przeznaczonym do realizacji druków na komputerach osobistych, jak Aldus PageMaker"
                        },
                        new
                        {
                            Id = 3,
                            ArticleId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3463),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3464),
                            Note = "JavaScript Makale Yorumu",
                            Text = "Ang Lorem Ipsum ay ginagamit na modelo ng industriya ng pagpriprint at pagtytypeset. Ang Lorem Ipsum ang naging regular na modelo simula pa noong 1500s, noong may isang di kilalang manlilimbag and kumuha ng galley ng type at ginulo ang pagkaka-ayos nito upang makagawa ng libro ng mga type specimen. Nalagpasan nito hindi lang limang siglo, kundi nalagpasan din nito ang paglaganap ng electronic typesetting at nanatiling parehas. Sumikat ito noong 1960s kasabay ng pag labas ng Letraset sheets na mayroong mga talata ng Lorem Ipsum, at kamakailan lang sa mga desktop publishing software tulad ng Aldus Pagemaker ginamit ang mga bersyon ng Lorem Ipsum."
                        },
                        new
                        {
                            Id = 4,
                            ArticleId = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3465),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3466),
                            Note = "Typescript Makale Yorumu",
                            Text = "Lorem Ipsum er rett og slett dummytekst fra og for trykkeindustrien. Lorem Ipsum har vært bransjens standard for dummytekst helt siden 1500-tallet, da en ukjent boktrykker stokket en mengde bokstaver for å lage et prøveeksemplar av en bok. Lorem Ipsum har tålt tidens tann usedvanlig godt, og har i tillegg til å bestå gjennom fem århundrer også tålt spranget over til elektronisk typografi uten vesentlige endringer. Lorem Ipsum ble gjort allment kjent i 1960-årene ved lanseringen av Letraset-ark med avsnitt fra Lorem Ipsum, og senere med sideombrekkingsprogrammet Aldus PageMaker som tok i bruk nettopp Lorem Ipsum for dummytekst."
                        },
                        new
                        {
                            Id = 5,
                            ArticleId = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3468),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3468),
                            Note = "Java Makale Yorumu",
                            Text = "Lorem Ipsum este pur şi simplu o machetă pentru text a industriei tipografice. Lorem Ipsum a fost macheta standard a industriei încă din secolul al XVI-lea, când un tipograf anonim a luat o planşetă de litere şi le-a amestecat pentru a crea o carte demonstrativă pentru literele respective. Nu doar că a supravieţuit timp de cinci secole, dar şi a facut saltul în tipografia electronică practic neschimbată. A fost popularizată în anii '60 odată cu ieşirea colilor Letraset care conţineau pasaje Lorem Ipsum, iar mai recent, prin programele de publicare pentru calculator, ca Aldus PageMaker care includeau versiuni de Lorem Ipsum."
                        },
                        new
                        {
                            Id = 6,
                            ArticleId = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3470),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3471),
                            Note = "Python Makale Yorumu",
                            Text = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a."
                        },
                        new
                        {
                            Id = 7,
                            ArticleId = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3472),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3473),
                            Note = "Php Makale Yorumu",
                            Text = "Lorem Ipsum – tas ir teksta salikums, kuru izmanto poligrāfijā un maketēšanas darbos. Lorem Ipsum ir kļuvis par vispārpieņemtu teksta aizvietotāju kopš 16. gadsimta sākuma. Tajā laikā kāds nezināms iespiedējs izveidoja teksta fragmentu, lai nodrukātu grāmatu ar burtu paraugiem. Tas ir ne tikai pārdzīvojis piecus gadsimtus, bet bez ievērojamām izmaiņām saglabājies arī mūsdienās, pārejot uz datorizētu teksta apstrādi. Tā popularizēšanai 60-tajos gados kalpoja Letraset burtu paraugu publicēšana ar Lorem Ipsum teksta fragmentiem un, nesenā pagātnē, tādas maketēšanas programmas kā Aldus PageMaker, kuras šablonu paraugos ir izmantots Lorem Ipsum teksts."
                        },
                        new
                        {
                            Id = 8,
                            ArticleId = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3474),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3475),
                            Note = "Kotlin Makale Yorumu",
                            Text = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like)."
                        },
                        new
                        {
                            Id = 9,
                            ArticleId = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3477),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3477),
                            Note = "Swift Makale Yorumu",
                            Text = "هنالك العديد من الأنواع المتوفرة لنصوص لوريم إيبسوم، ولكن الغالبية تم تعديلها بشكل ما عبر إدخال بعض النوادر أو الكلمات العشوائية إلى النص. إن كنت تريد أن تستخدم نص لوريم إيبسوم ما، عليك أن تتحقق أولاً أن ليس هناك أي كلمات أو عبارات محرجة أو غير لائقة مخبأة في هذا النص. بينما تعمل جميع مولّدات نصوص لوريم إيبسوم على الإنترنت على إعادة تكرار مقاطع من نص لوريم إيبسوم نفسه عدة مرات بما تتطلبه الحاجة، يقوم مولّدنا هذا باستخدام كلمات من قاموس يحوي على أكثر من 200 كلمة لا تينية، مضاف إليها مجموعة من الجمل النموذجية، لتكوين نص لوريم إيبسوم ذو شكل منطقي قريب إلى النص الحقيقي. وبالتالي يكون النص الناتح خالي من التكرار، أو أي كلمات أو عبارات غير لائقة أو ما شابه. وهذا ما يجعله أول مولّد نص لوريم إيبسوم حقيقي على الإنترنت."
                        },
                        new
                        {
                            Id = 10,
                            ArticleId = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3479),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(3480),
                            Note = "Ruby Makale Yorumu",
                            Text = "Lorem Ipsum，也称乱数假文或者哑元文本， 是印刷及排版领域所常用的虚拟文字。由于曾经一台匿名的打印机刻意打乱了一盒印刷字体从而造出一本字体样品书，Lorem Ipsum从西元15世纪起就被作为此领域的标准文本使用。它不仅延续了五个世纪，还通过了电子排版的挑战，其雏形却依然保存至今。在1960年代，”Leatraset”公司发布了印刷着Lorem Ipsum段落的纸张，从而广泛普及了它的使用。最近，计算机桌面出版软件”Aldus PageMaker”也通过同样的方式使Lorem Ipsum落入大众的视野。"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HospitalOfReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 8, 29, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(4987),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(4983),
                            CustomerReferanceId = 1,
                            CustomerTypeId = 1,
                            Email = "hasta1@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(4984),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 2,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 8, 30, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(4995),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(4992),
                            CustomerReferanceId = 1,
                            CustomerTypeId = 2,
                            Email = "hasta2@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(4993),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 3,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 8, 31, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(4998),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(4996),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(4997),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 4,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 9, 1, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(5001),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(5000),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(5000),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 5,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 9, 2, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(5005),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(5003),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(5004),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 6,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 9, 3, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(5008),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(5006),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(5007),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 7,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 9, 4, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(5011),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(5010),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(5010),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceTitleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FromWhere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TC")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceTitleId");

                    b.ToTable("CustomerReferances", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(6348),
                            CustomerReferanceTitleId = 2,
                            Description = "Description",
                            FirstName = "Sema",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(6349),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Phone = "+905050102249"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(6352),
                            CustomerReferanceTitleId = 2,
                            Description = "Description",
                            FirstName = "Sema",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(6353),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Phone = "+905050102249"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferanceTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("CustomerReferanceTitles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(5495),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(5495),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Referans Unvan 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(5497),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(5498),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Referans Unvan 2"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(6782),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(6783),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(6785),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(6785),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(6787),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(6788),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 3"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(8279),
                            Email = "bedirhangn@gmail.com",
                            EmployeeTypeId = 1,
                            FirstName = "Personel 1",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(8279),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 2,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(8282),
                            EmployeeTypeId = 1,
                            FirstName = "Ikinci Personel",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(8283),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 3,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(8285),
                            EmployeeTypeId = 1,
                            FirstName = "Ucuncu perosnel",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(8285),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(8363),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(8363),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(8366),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(8366),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(8367),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(8367),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(8370),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(8370),
                            Note = "Not",
                            Title = "Title"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDaily")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncome")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Expenses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 100,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7078),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7079),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 122,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7082),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7082),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 21,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7084),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7085),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 341,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7087),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7088),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 422,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7089),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7091),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 6,
                            Amount = 122,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7093),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7094),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 7,
                            Amount = 322,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7095),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7096),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 8,
                            Amount = 422,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7097),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7098),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 9,
                            Amount = 522,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7100),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7100),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 10,
                            Amount = 122,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7102),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7102),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 11,
                            Amount = 232,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7130),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7131),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 12,
                            Amount = 122,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7133),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7133),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 13,
                            Amount = 222,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7135),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7136),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 14,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7137),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7138),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 15,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7139),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7140),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 16,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7142),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7142),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 17,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7144),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7144),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 18,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7146),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7147),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 19,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7148),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(7149),
                            Note = "TEST"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5796),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5797),
                            Name = "AgendaProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5799),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5800),
                            Name = "CustomerModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5803),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5803),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5805),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5805),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5806),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5807),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5808),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5809),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5811),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5811),
                            Name = "StockModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(803),
                            CustomerId = 1,
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(803),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 8, 28, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(806),
                            Title = "Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(812),
                            CustomerId = 2,
                            Description = "Doğum günü yaklaşmakta.",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(812),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 8, 27, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(814),
                            Title = "Doğum Günü!",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(815),
                            CustomerId = 3,
                            Description = "Aylık cihaz bakımı için konuşulacak",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(816),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 8, 26, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(817),
                            Title = "Cihaz Bakımı!",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DebtAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PaidPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutPayments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 0m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6947),
                            DebtAmount = 15000m,
                            Description = "TEST desc 1 ",
                            DueDate = new DateTime(2023, 8, 29, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6953),
                            IsActive = true,
                            IsDeleted = false,
                            IsPaid = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6948),
                            PaidPlace = "Ödemenin Yapılacağı yer"
                        },
                        new
                        {
                            Id = 2,
                            AmountPaid = 0m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6958),
                            DebtAmount = 10000m,
                            Description = "TEST desc 1 ",
                            DueDate = new DateTime(2023, 8, 29, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6959),
                            IsActive = true,
                            IsDeleted = false,
                            IsPaid = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6959),
                            PaidPlace = "Ödemenin Yapılacağı yer"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OutPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OutPaymentId");

                    b.ToTable("OutPaymentDetails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1000m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(7499),
                            Description = "TEST desc 1 ",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(7500),
                            OutPaymentId = 1
                        },
                        new
                        {
                            Id = 2,
                            AmountPaid = 2000m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(7503),
                            Description = "TEST desc 1 ",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(7504),
                            OutPaymentId = 1
                        },
                        new
                        {
                            Id = 3,
                            AmountPaid = 1500m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(7506),
                            Description = "TEST desc 1 ",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(7506),
                            OutPaymentId = 1
                        },
                        new
                        {
                            Id = 4,
                            AmountPaid = 2300m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(7508),
                            Description = "TEST desc 1 ",
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(7509),
                            OutPaymentId = 2
                        },
                        new
                        {
                            Id = 5,
                            AmountPaid = 1450m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(7510),
                            Description = "TEST desc 1 ",
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(7511),
                            OutPaymentId = 2
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("AssociatedInstitutionId")
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedInstitutionsId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId1")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PaymentTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTypeId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedInstitutionId");

                    b.HasIndex("AssociatedInstitutionsId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PaymentTypeId1");

                    b.ToTable("Payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6297),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6298),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6303),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6304),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6306),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6306),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6308),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6309),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6311),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6312),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6314),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6314),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6316),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(6317),
                            PaymentTypeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(7581),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(7581),
                            Title = "KK | POS"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(7583),
                            Description = "Mail Order Payment",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(7583),
                            Title = "Mail Order"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(7584),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 153, DateTimeKind.Local).AddTicks(7584),
                            Title = "Peşin"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("ProductSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductSubGroupId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(8466),
                            IsActive = true,
                            IsDeleted = false,
                            IsSold = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(8467),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Siemens Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT4"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(8470),
                            IsActive = true,
                            IsDeleted = false,
                            IsSold = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(8470),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Jabra Signia",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT3"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(8473),
                            IsActive = true,
                            IsDeleted = false,
                            IsSold = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(8473),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Apple Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT2"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(8475),
                            IsActive = true,
                            IsDeleted = false,
                            IsSold = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(8476),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Samsung Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(1256),
                            Description = "Ürün Grubu Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(1257),
                            Title = "Ürün Grubu 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductSubGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(2004),
                            Description = "Ürün Alt Grubu Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(2005),
                            ProductGroupId = 1,
                            Title = "Ürün Alt Grubu Başlığı"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Programs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6215),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6216),
                            ModuleId = 5,
                            Name = "EmployeeProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6219),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6219),
                            ModuleId = 5,
                            Name = "UserModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6221),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6221),
                            ModuleId = 7,
                            Name = "StockModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6224),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6224),
                            ModuleId = 6,
                            Name = "CustomerReferanceModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6226),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6226),
                            ModuleId = 1,
                            Name = "AppointmentModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6230),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6230),
                            ModuleId = 1,
                            Name = "NotificationModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6232),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6232),
                            ModuleId = 3,
                            Name = "PaymentProgram.Read"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6234),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6235),
                            ModuleId = 2,
                            Name = "CustomerProgram.Read"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6236),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6237),
                            ModuleId = 7,
                            Name = "BrandModule.Read"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6238),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6239),
                            ModuleId = 3,
                            Name = "SaleModule.Read"
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6240),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6241),
                            ModuleId = 7,
                            Name = "ProductProgram.Read"
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6242),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6243),
                            ModuleId = 5,
                            Name = "RoleModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessLevel = 1,
                            ConcurrencyStamp = "4d825e8f-391b-4742-bf51-6d8f48638098",
                            Definition = "SüperAdmin Yetkisi",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2,
                            AccessLevel = 1,
                            ConcurrencyStamp = "693efedf-c99c-46a9-8ce6-745443abdb95",
                            Definition = "Standart Kullanıcı Yetkisi",
                            Name = "DefaultUser",
                            NormalizedName = "DEFAULTUSER"
                        },
                        new
                        {
                            Id = 3,
                            AccessLevel = 3,
                            ConcurrencyStamp = "603e4229-6249-4aa3-b14c-45d5a8a54a7c",
                            Definition = "Kullanıcı Ekleme Yetkisi",
                            Name = "User.Create",
                            NormalizedName = "USER.CREATE"
                        },
                        new
                        {
                            Id = 4,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f923202b-4d56-4cf0-b128-53d13bd62762",
                            Definition = "Kullanıcı Görüntüleme Yetkisi",
                            Name = "User.Read",
                            NormalizedName = "USER.READ"
                        },
                        new
                        {
                            Id = 5,
                            AccessLevel = 3,
                            ConcurrencyStamp = "974f5070-ebbb-4b22-bdf9-89769ad6df63",
                            Definition = "Kullanıcı Güncelleme Yetkisi",
                            Name = "User.Update",
                            NormalizedName = "USER.UPDATE"
                        },
                        new
                        {
                            Id = 6,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4ebfaf5f-d22f-4128-97c5-dbf129a0c166",
                            Definition = "Kullanıcı Silme Yetkisi",
                            Name = "User.Delete",
                            NormalizedName = "USER.DELETE"
                        },
                        new
                        {
                            Id = 7,
                            AccessLevel = 3,
                            ConcurrencyStamp = "11269534-a757-41fb-be01-98586472463b",
                            Definition = "Rol Görüntüleme Yetkisi",
                            Name = "Role.Read",
                            NormalizedName = "ROLE.READ"
                        },
                        new
                        {
                            Id = 8,
                            AccessLevel = 3,
                            ConcurrencyStamp = "52678fd6-2883-441c-98a0-a188649c4f04",
                            Definition = "Rol Güncelleme Yetkisi",
                            Name = "Role.Update",
                            NormalizedName = "ROLE.UPDATE"
                        },
                        new
                        {
                            Id = 9,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8bee7e14-0a8b-467c-b9ea-dd045f10b7c7",
                            Definition = "Rol Silme Yetkisi",
                            Name = "Role.Delete",
                            NormalizedName = "ROLE.DELETE"
                        },
                        new
                        {
                            Id = 10,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c5058861-c852-41f1-98e6-b4476eea0fa2",
                            Definition = "Rol Ekleme Yetkisi",
                            Name = "Role.Create",
                            NormalizedName = "ROLE.CREATE"
                        },
                        new
                        {
                            Id = 11,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8abea24e-9337-4419-a126-86132a9cf10f",
                            Definition = "Ödeme Ekleme Yetkisi",
                            Name = "Payment.Create",
                            NormalizedName = "PAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 12,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f3dc6713-7c19-4c44-9631-4b53ebde1503",
                            Definition = "Ödeme Görüntüleme Yetkisi",
                            Name = "Payment.Read",
                            NormalizedName = "PAYMENT.READ"
                        },
                        new
                        {
                            Id = 13,
                            AccessLevel = 3,
                            ConcurrencyStamp = "92405edf-cb69-4ba3-89bf-6576d6fd5e60",
                            Definition = "Ödeme Güncelleme Yetkisi",
                            Name = "Payment.Update",
                            NormalizedName = "PAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 14,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4f491f41-f43d-4f53-92fc-27dc583b017c",
                            Definition = "Ödeme Silme Yetkisi",
                            Name = "Payment.Delete",
                            NormalizedName = "PAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 15,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c0c49231-29a1-4243-aa80-8f761b0beea8",
                            Definition = "Ödeme Türü Ekleme Yetkisi",
                            Name = "PaymentType.Create",
                            NormalizedName = "PAYMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 16,
                            AccessLevel = 3,
                            ConcurrencyStamp = "40b82507-9162-4722-8d64-47d7f6c29c79",
                            Definition = "Ödeme Türü Görüntüleme Yetkisi",
                            Name = "PaymentType.Read",
                            NormalizedName = "PAYMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 17,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1861f09c-0b49-48ab-958b-1a810feffca0",
                            Definition = "Ödeme Türü Güncelleme Yetkisi",
                            Name = "PaymentType.Update",
                            NormalizedName = "PAYMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 18,
                            AccessLevel = 3,
                            ConcurrencyStamp = "52b7cd83-90bd-4a81-8b5c-0d1cab781fcb",
                            Definition = "Ödeme Türü Silme Yetkisi",
                            Name = "PaymentType.Delete",
                            NormalizedName = "PAYMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 19,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c68bd7ca-970e-43e3-907f-e59a3adda42b",
                            Definition = "Personel Ekleme Yetkisi",
                            Name = "Employee.Create",
                            NormalizedName = "EMPLOYEE.CREATE"
                        },
                        new
                        {
                            Id = 20,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8df95c68-28cf-4169-bf04-5e9d1e13ecac",
                            Definition = "Personel Görüntüleme Yetkisi",
                            Name = "Employee.Read",
                            NormalizedName = "EMPLOYEE.READ"
                        },
                        new
                        {
                            Id = 21,
                            AccessLevel = 3,
                            ConcurrencyStamp = "70e4d6df-c85d-443d-adde-8dc5c29a1af3",
                            Definition = "Personel Güncelleme Yetkisi",
                            Name = "Employee.Update",
                            NormalizedName = "EMPLOYEE.UPDATE"
                        },
                        new
                        {
                            Id = 22,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e08ab948-1314-4957-b95c-9b5659d83fa2",
                            Definition = "Personel Silme Yetkisi",
                            Name = "Employee.Delete",
                            NormalizedName = "EMPLOYEE.DELETE"
                        },
                        new
                        {
                            Id = 23,
                            AccessLevel = 3,
                            ConcurrencyStamp = "41b3048f-7a7d-47c7-9496-e4ecbf258c65",
                            Definition = "Personel Türü Ekleme Yetkisi",
                            Name = "EmployeeType.Create",
                            NormalizedName = "EMPLOYEETYPE.CREATE"
                        },
                        new
                        {
                            Id = 24,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7193c4fb-4180-4f2d-8fc2-f32996d6a49a",
                            Definition = "Personel Türü Görüntüleme Yetkisi",
                            Name = "EmployeeType.Read",
                            NormalizedName = "EMPLOYEETYPE.READ"
                        },
                        new
                        {
                            Id = 25,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9e1dae72-28aa-4397-8033-a7fe5048035e",
                            Definition = "Personel Türü Güncelleme Yetkisi",
                            Name = "EmployeeType.Update",
                            NormalizedName = "EMPLOYEETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 26,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8d661292-20c1-4a22-b02a-102836e8eec7",
                            Definition = "Personel Türü Silme Yetkisi",
                            Name = "EmployeeType.Delete",
                            NormalizedName = "EMPLOYEETYPE.DELETE"
                        },
                        new
                        {
                            Id = 27,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7e97508f-8a13-4df1-bd4e-5c51ec3a19b3",
                            Definition = "Müşteri Ekleme Yetkisi",
                            Name = "Customer.Create",
                            NormalizedName = "CUSTOMER.CREATE"
                        },
                        new
                        {
                            Id = 28,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0f604bf8-7f98-4e98-a02b-14089a47b9e1",
                            Definition = "Müşteri Görüntüleme Yetkisi",
                            Name = "Customer.Read",
                            NormalizedName = "CUSTOMER.READ"
                        },
                        new
                        {
                            Id = 29,
                            AccessLevel = 3,
                            ConcurrencyStamp = "560b33c3-70f0-43f5-8186-ab1e75c4412f",
                            Definition = "Müşteri Güncelleme Yetkisi",
                            Name = "Customer.Update",
                            NormalizedName = "CUSTOMER.UPDATE"
                        },
                        new
                        {
                            Id = 30,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1f9103f9-462e-40a5-9b7d-8d823a7fde56",
                            Definition = "Müşteri Silme Yetkisi",
                            Name = "Customer.Delete",
                            NormalizedName = "CUSTOMER.DELETE"
                        },
                        new
                        {
                            Id = 31,
                            AccessLevel = 3,
                            ConcurrencyStamp = "19f180ae-eeb1-4c0a-85a3-e15378b2ee51",
                            Definition = "Müşteri Tipi Ekleme Yetkisi",
                            Name = "CustomerType.Create",
                            NormalizedName = "CUSTOMERTYPE.CREATE"
                        },
                        new
                        {
                            Id = 32,
                            AccessLevel = 3,
                            ConcurrencyStamp = "41c511ac-4264-4050-999a-dffc3ceffff3",
                            Definition = "Müşteri Tipi Görüntüleme Yetkisi",
                            Name = "CustomerType.Read",
                            NormalizedName = "CUSTOMERTYPE.READ"
                        },
                        new
                        {
                            Id = 33,
                            AccessLevel = 3,
                            ConcurrencyStamp = "41388111-3ac6-4f91-bf49-462a34c7c13b",
                            Definition = "Müşteri Tipi Güncelleme Yetkisi",
                            Name = "CustomerType.Update",
                            NormalizedName = "CUSTOMERTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 34,
                            AccessLevel = 3,
                            ConcurrencyStamp = "550a372d-6eb0-418f-b3f5-c0bfad0c0df5",
                            Definition = "Müşteri Tipi Silme Yetkisi",
                            Name = "CustomerType.Delete",
                            NormalizedName = "CUSTOMERTYPE.DELETE"
                        },
                        new
                        {
                            Id = 35,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9632f4ab-a2c1-44a1-95a2-ff384f7bef00",
                            Definition = "Bildirim Ekleme Yetkisi",
                            Name = "Notification.Create",
                            NormalizedName = "NOTIFICATION.CREATE"
                        },
                        new
                        {
                            Id = 36,
                            AccessLevel = 3,
                            ConcurrencyStamp = "70669cc3-3af1-4d7a-8dcc-6523303da605",
                            Definition = "Bildirim Görüntüleme Yetkisi",
                            Name = "Notification.Read",
                            NormalizedName = "NOTIFICATION.READ"
                        },
                        new
                        {
                            Id = 37,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f51fe4d8-6598-4725-975e-dda602d47a34",
                            Definition = "Bildirim Güncelleme Yetkisi",
                            Name = "Notification.Update",
                            NormalizedName = "NOTIFICATION.UPDATE"
                        },
                        new
                        {
                            Id = 38,
                            AccessLevel = 3,
                            ConcurrencyStamp = "787508d6-5594-4142-aaab-ead0a5b99993",
                            Definition = "Bildirim Silme Yetkisi",
                            Name = "Notification.Delete",
                            NormalizedName = "NOTIFICATION.DELETE"
                        },
                        new
                        {
                            Id = 39,
                            AccessLevel = 3,
                            ConcurrencyStamp = "77d7b195-95cc-4192-863f-3d77e83a3cc2",
                            Definition = "Geliştiriciye Mesaj Ekleme Yetkisi",
                            Name = "Brand.Create",
                            NormalizedName = "BRAND.CREATE"
                        },
                        new
                        {
                            Id = 40,
                            AccessLevel = 3,
                            ConcurrencyStamp = "37f0b6b5-d83d-49fa-b2e5-369493c85eef",
                            Definition = "Geliştiriciye Mesaj Görüntüleme Yetkisi",
                            Name = "Brand.Read",
                            NormalizedName = "BRAND.READ"
                        },
                        new
                        {
                            Id = 41,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0c6824e3-56f5-4299-b26e-09fd472541a6",
                            Definition = "Geliştiriciye Mesaj Güncelleme Yetkisi",
                            Name = "Brand.Update",
                            NormalizedName = "BRAND.UPDATE"
                        },
                        new
                        {
                            Id = 42,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4041a7e3-6464-4092-8bb4-e11cdb4ba123",
                            Definition = "Geliştiriciye Mesaj Silme Yetkisi",
                            Name = "Brand.Delete",
                            NormalizedName = "BRAND.DELETE"
                        },
                        new
                        {
                            Id = 43,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f2b09ce9-61f4-4164-87b2-e00d43a38f06",
                            Definition = "Satış Durumu Ekleme Yetkisi",
                            Name = "SaleStatus.Create",
                            NormalizedName = "SALESTATUS.CREATE"
                        },
                        new
                        {
                            Id = 44,
                            AccessLevel = 3,
                            ConcurrencyStamp = "03961922-21fa-4a89-a2b5-183839de1508",
                            Definition = "Satış Durumu Görüntüleme Yetkisi",
                            Name = "SaleStatus.Read",
                            NormalizedName = "SALESTATUS.READ"
                        },
                        new
                        {
                            Id = 45,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7f777d7e-4b86-4a3f-9f9f-14c7c73fcdea",
                            Definition = "Satış Durumu Güncelleme Yetkisi",
                            Name = "SaleStatus.Update",
                            NormalizedName = "SALESTATUS.UPDATE"
                        },
                        new
                        {
                            Id = 46,
                            AccessLevel = 3,
                            ConcurrencyStamp = "19d99656-5e73-4cf6-8a1f-6e6239675b7a",
                            Definition = "Satış Durumu Silme Yetkisi",
                            Name = "SaleStatus.Delete",
                            NormalizedName = "SALESTATUS.DELETE"
                        },
                        new
                        {
                            Id = 47,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d266041e-ae34-46f3-806d-e364f502ba26",
                            Definition = "Satış Türü Ekleme Yetkisi",
                            Name = "SaleType.Create",
                            NormalizedName = "SALETYPE.CREATE"
                        },
                        new
                        {
                            Id = 48,
                            AccessLevel = 3,
                            ConcurrencyStamp = "934d2677-b258-4a4e-8e65-e9e10c74683b",
                            Definition = "Satış Türü Görüntüleme Yetkisi",
                            Name = "SaleType.Read",
                            NormalizedName = "SALETYPE.READ"
                        },
                        new
                        {
                            Id = 49,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7400d1fb-f71c-48f8-99e0-00d9e97ac477",
                            Definition = "Satış Türü Güncelleme Yetkisi",
                            Name = "SaleType.Update",
                            NormalizedName = "SALETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 50,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8771db93-b1cb-420c-9473-959ce883f59f",
                            Definition = "Satış Türü Silme Yetkisi",
                            Name = "SaleType.Delete",
                            NormalizedName = "SALETYPE.DELETE"
                        },
                        new
                        {
                            Id = 51,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bde1fa87-26a7-4090-9d37-ed63c250951c",
                            Definition = "Ürün Grubu Ekleme Yetkisi",
                            Name = "ProductGroup.Create",
                            NormalizedName = "PRODUCTGROUP.CREATE"
                        },
                        new
                        {
                            Id = 52,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d4c4d798-a24b-4255-ad12-54453d5fadc9",
                            Definition = "Ürün Grubu Görüntüleme Yetkisi",
                            Name = "ProductGroup.Read",
                            NormalizedName = "PRODUCTGROUP.READ"
                        },
                        new
                        {
                            Id = 53,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a94dbd89-01e3-46f0-903a-ad4960d9908a",
                            Definition = "Ürün Grubu Güncelleme Yetkisi",
                            Name = "ProductGroup.Update",
                            NormalizedName = "PRODUCTGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 54,
                            AccessLevel = 3,
                            ConcurrencyStamp = "215e4657-89a6-4eba-8b01-eac99b4bc12b",
                            Definition = "Ürün Grubu Silme Yetkisi",
                            Name = "ProductGroup.Delete",
                            NormalizedName = "PRODUCTGROUP.DELETE"
                        },
                        new
                        {
                            Id = 55,
                            AccessLevel = 3,
                            ConcurrencyStamp = "dde88e9f-2d78-4e35-8b3a-01da88c52b75",
                            Definition = "Ürün Alt Grubu Ekleme Yetkisi",
                            Name = "ProductSubGroup.Create",
                            NormalizedName = "PRODUCTSUBGROUP.CREATE"
                        },
                        new
                        {
                            Id = 56,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6d3bca40-c902-4d2f-8f11-9cc5bb24dbab",
                            Definition = "Ürün Alt Grubu Görüntüleme Yetkisi",
                            Name = "ProductSubGroup.Read",
                            NormalizedName = "PRODUCTSUBGROUP.READ"
                        },
                        new
                        {
                            Id = 57,
                            AccessLevel = 3,
                            ConcurrencyStamp = "fae5f545-e626-407e-a215-14f58f5e4831",
                            Definition = "Ürün Alt Grubu Güncelleme Yetkisi",
                            Name = "ProductSubGroup.Update",
                            NormalizedName = "PRODUCTSUBGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 58,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7b86e233-2a02-4c90-97f7-2def18575dcc",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "ProductSubGroup.Delete",
                            NormalizedName = "PRODUCTSUBGROUP.DELETE"
                        },
                        new
                        {
                            Id = 59,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f903887e-1dd4-4316-b1cc-96808f6e183c",
                            Definition = "Randevu Türü Ekleme Yetkisi",
                            Name = "AppointmentType.Create",
                            NormalizedName = "APPOINTMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 60,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a91d19fb-f0f0-4f41-9ada-89c011979625",
                            Definition = "Randevu Türü Görüntüleme Yetkisi",
                            Name = "AppointmentType.Read",
                            NormalizedName = "APPOINTMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 61,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1e1f45a5-e909-41a3-8c48-43c39b77d130",
                            Definition = "Randevu Türü Güncelleme Yetkisi",
                            Name = "AppointmentType.Update",
                            NormalizedName = "APPOINTMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 62,
                            AccessLevel = 3,
                            ConcurrencyStamp = "61012286-289d-440d-969f-4644d2ad25cd",
                            Definition = "Randevu Türü Silme Yetkisi",
                            Name = "AppointmentType.Delete",
                            NormalizedName = "APPOINTMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 63,
                            AccessLevel = 3,
                            ConcurrencyStamp = "12cc7235-9146-48be-8fee-e55f7bf05711",
                            Definition = "Satış Oluşturma Yetkisi",
                            Name = "Sale.Create",
                            NormalizedName = "SALE.CREATE"
                        },
                        new
                        {
                            Id = 64,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c41e20a5-fc14-40eb-8778-6e8f1634e239",
                            Definition = "Satış Görüntüleme Yetkisi",
                            Name = "Sale.Read",
                            NormalizedName = "SALE.READ"
                        },
                        new
                        {
                            Id = 65,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3863dfcc-32a4-4c06-8921-3402616e65aa",
                            Definition = "Satış Güncelleme Yetkisi",
                            Name = "Sale.Update",
                            NormalizedName = "SALE.UPDATE"
                        },
                        new
                        {
                            Id = 66,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2516c599-149a-45e9-809a-216e95300f51",
                            Definition = "Satış Silme Yetkisi",
                            Name = "Sale.Delete",
                            NormalizedName = "SALE.DELETE"
                        },
                        new
                        {
                            Id = 67,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3ba48350-6f2e-436b-be76-e1ea2a778386",
                            Definition = "Ürün Ekleme Yetkisi",
                            Name = "Product.Create",
                            NormalizedName = "PRODUCT.CREATE"
                        },
                        new
                        {
                            Id = 68,
                            AccessLevel = 3,
                            ConcurrencyStamp = "cd5d2407-6a44-4112-ab01-91e925cf5f51",
                            Definition = "Ürün Görüntüleme Yetkisi",
                            Name = "Product.Read",
                            NormalizedName = "PRODUCT.READ"
                        },
                        new
                        {
                            Id = 69,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f325b5e1-34c0-4f6f-b737-dd8dc80b6fcd",
                            Definition = "Ürün Güncelleme Yetkisi",
                            Name = "Product.Update",
                            NormalizedName = "PRODUCT.UPDATE"
                        },
                        new
                        {
                            Id = 70,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6773f1e6-5946-4040-86ba-c2f77841f804",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "Product.Delete",
                            NormalizedName = "PRODUCT.DELETE"
                        },
                        new
                        {
                            Id = 71,
                            AccessLevel = 3,
                            ConcurrencyStamp = "562c8a97-c2e0-41fa-96f1-76cab23c37c3",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "Appointment.Create",
                            NormalizedName = "APPOINTMENT.CREATE"
                        },
                        new
                        {
                            Id = 72,
                            AccessLevel = 3,
                            ConcurrencyStamp = "dd8326e9-6ac6-469f-9ce3-01579b661144",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "Appointment.Read",
                            NormalizedName = "APPOINTMENT.READ"
                        },
                        new
                        {
                            Id = 73,
                            AccessLevel = 3,
                            ConcurrencyStamp = "607edb19-9275-48e9-aa98-8cd8823ea785",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "Appointment.Update",
                            NormalizedName = "APPOINTMENT.UPDATE"
                        },
                        new
                        {
                            Id = 74,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8cc3aa7b-87d4-455d-9fc2-a44ce03c63ff",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "Appointment.Delete",
                            NormalizedName = "APPOINTMENT.DELETE"
                        },
                        new
                        {
                            Id = 75,
                            AccessLevel = 3,
                            ConcurrencyStamp = "919ba576-4bb5-4c20-b909-e0144ef6e13a",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "OutPayment.Create",
                            NormalizedName = "OUTPAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 76,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d6c70249-8863-4ff1-b221-0b1146080628",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "OutPayment.Read",
                            NormalizedName = "OUTPAYMENT.READ"
                        },
                        new
                        {
                            Id = 77,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2d080fa4-dcdb-427f-8996-ef97eeece1d1",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "OutPayment.Update",
                            NormalizedName = "OUTPAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 78,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b0815c2a-877b-4733-a8c2-c55b6f9b2c53",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "OutPayment.Delete",
                            NormalizedName = "OUTPAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 79,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4f476b60-3bee-457d-9ddb-520545b01024",
                            Definition = "Dış Ödeme Detayı Oluşturma Yetkisi",
                            Name = "OutPaymentDetail.Create",
                            NormalizedName = "OUTPAYMENTDETAIL.CREATE"
                        },
                        new
                        {
                            Id = 80,
                            AccessLevel = 3,
                            ConcurrencyStamp = "585f3a71-80a3-48fb-9d59-e61c093509ed",
                            Definition = "Dış Ödeme Detayı Görüntüleme Yetkisi",
                            Name = "OutPaymentDetail.Read",
                            NormalizedName = "OUTPAYMENTDETAIL.READ"
                        },
                        new
                        {
                            Id = 81,
                            AccessLevel = 3,
                            ConcurrencyStamp = "74adc637-bf28-4360-91a6-893f57ca5167",
                            Definition = "Dış Ödeme Detayı Güncelleme Yetkisi",
                            Name = "OutPaymentDetail.Update",
                            NormalizedName = "OUTPAYMENTDETAIL.UPDATE"
                        },
                        new
                        {
                            Id = 82,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d01d6b26-9a18-4c49-b824-08e720c87bfd",
                            Definition = "Dış Ödeme Detayı Silme Yetkisi",
                            Name = "OutPaymentDetail.Delete",
                            NormalizedName = "OUTPAYMENTDETAIL.DELETE"
                        },
                        new
                        {
                            Id = 83,
                            AccessLevel = 2,
                            ConcurrencyStamp = "f7645071-6ed1-40a7-a40e-e7906ee96d61",
                            Definition = "Geliştiriciye Mesajlar Programı Görüntüleme",
                            Name = "EmployeeProgram.Read",
                            NormalizedName = "EMPLOYEEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 84,
                            AccessLevel = 2,
                            ConcurrencyStamp = "bd574d4d-dd5d-4bf9-943d-745755317e2a",
                            Definition = "Randevular Programı Görüntüleme",
                            Name = "InstitutionalProgram.Read",
                            NormalizedName = "INSTITUTIONALPROGRAM.READ"
                        },
                        new
                        {
                            Id = 85,
                            AccessLevel = 2,
                            ConcurrencyStamp = "827d3767-d140-4ba2-90a3-6bc3ad28de08",
                            Definition = "Hastalar Programı Görüntüleme",
                            Name = "CustomerProgram.Read",
                            NormalizedName = "CUSTOMERPROGRAM.READ"
                        },
                        new
                        {
                            Id = 86,
                            AccessLevel = 2,
                            ConcurrencyStamp = "7d218000-35a2-4c15-a6cf-53fdd672fd46",
                            Definition = "Referanslar Programı Görüntüleme",
                            Name = "PaymentProgram.Read",
                            NormalizedName = "PAYMENTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 87,
                            AccessLevel = 2,
                            ConcurrencyStamp = "29a3422d-2b91-46bb-b6c6-3ca6b1428fd3",
                            Definition = "Ürünler Programı Görüntüleme",
                            Name = "ProductProgram.Read",
                            NormalizedName = "PRODUCTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 88,
                            AccessLevel = 2,
                            ConcurrencyStamp = "22540ae4-77a6-4eca-830b-bcb0a805f718",
                            Definition = "Roller Programı Görüntüleme",
                            Name = "MarketingProgram.Read",
                            NormalizedName = "MARKETINGPROGRAM.READ"
                        },
                        new
                        {
                            Id = 89,
                            AccessLevel = 2,
                            ConcurrencyStamp = "3a784efd-7382-4a05-a708-559a1aa46aeb",
                            Definition = "Satışlar Programı Görüntüleme",
                            Name = "AgendaProgram.Read",
                            NormalizedName = "AGENDAPROGRAM.READ"
                        },
                        new
                        {
                            Id = 90,
                            AccessLevel = 2,
                            ConcurrencyStamp = "93eabb07-ab11-4de3-9d92-ef36b20d5063",
                            Definition = "Stok Programı Görüntüleme",
                            Name = "FinanceProgram.Read",
                            NormalizedName = "FINANCEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 91,
                            AccessLevel = 1,
                            ConcurrencyStamp = "cc3f4a81-9b8b-44eb-9a2f-df2c23cb431c",
                            Definition = "Anasayfa Görüntüleme Yetkisi",
                            Name = "HomeProgram.Read",
                            NormalizedName = "HOMEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 92,
                            AccessLevel = 1,
                            ConcurrencyStamp = "73745f27-722f-4500-89a5-b4cb310cec33",
                            Definition = "Stok Modülü Görüntüleme",
                            Name = "StockModule.Read",
                            NormalizedName = "StockModule.Read"
                        },
                        new
                        {
                            Id = 93,
                            AccessLevel = 1,
                            ConcurrencyStamp = "72f23b83-7ddc-482a-bd6f-8684a7422368",
                            Definition = "Personel Tipleri Modülü Görüntüleme",
                            Name = "EmployeeTypeModule.Read",
                            NormalizedName = "EMPLOYEETYPEMODULE.READ"
                        },
                        new
                        {
                            Id = 94,
                            AccessLevel = 1,
                            ConcurrencyStamp = "c19e269e-8de4-4020-bebe-7384fb32878f",
                            Definition = "Personeller Modülü Görüntüleme",
                            Name = "EmployeeModule.Read",
                            NormalizedName = "EMPLOYEEMODULE.READ"
                        },
                        new
                        {
                            Id = 95,
                            AccessLevel = 1,
                            ConcurrencyStamp = "d1830361-6731-45ce-8ebe-e46a4ca77066",
                            Definition = "Kullanıcılar Modülü Görüntüleme",
                            Name = "UserModule.Read",
                            NormalizedName = "USERMODULE.READ"
                        },
                        new
                        {
                            Id = 96,
                            AccessLevel = 1,
                            ConcurrencyStamp = "655dbcd7-c98e-449e-99c5-8cf85f9cdcf3",
                            Definition = "Hastalar Modülü Görüntüleme",
                            Name = "CustomerModule.Read",
                            NormalizedName = "CUSTOMERMODULE.READ"
                        },
                        new
                        {
                            Id = 97,
                            AccessLevel = 1,
                            ConcurrencyStamp = "17756c15-1d24-49c4-acf9-d5c04beecb32",
                            Definition = "HAsta Tipleri Modülü Görüntüleme",
                            Name = "CustomerTypeModule.Read",
                            NormalizedName = "CUSTOMERTYPEMODULE.READ"
                        },
                        new
                        {
                            Id = 98,
                            AccessLevel = 1,
                            ConcurrencyStamp = "3d7a5457-3f0b-4282-b750-ddbbcd5ac53b",
                            Definition = "Ürünler Modülü Yetkisi",
                            Name = "ProductModule.Read",
                            NormalizedName = "PRODUCTMODULE.READ"
                        },
                        new
                        {
                            Id = 99,
                            AccessLevel = 1,
                            ConcurrencyStamp = "a153708f-3128-4e9d-90ce-f78854ad3f6d",
                            Definition = "Ürün Grupları Modülü Yetkisi",
                            Name = "ProductGroupModule.Read",
                            NormalizedName = "PRODUCTGROUPMODULE.READ"
                        },
                        new
                        {
                            Id = 100,
                            AccessLevel = 1,
                            ConcurrencyStamp = "c101058d-1dca-43e7-bbbf-7f798eaa1079",
                            Definition = "Ürün Alt Grupları Modülü Yetkisi",
                            Name = "ProductSubGroupModule.Read",
                            NormalizedName = "PRODUCTSUBGROUPMODULE.READ"
                        },
                        new
                        {
                            Id = 101,
                            AccessLevel = 1,
                            ConcurrencyStamp = "70bbbd58-9b24-4d49-8478-fc5477105379",
                            Definition = "Geliştiriciye Mesajlar Modülü Yetkisi",
                            Name = "BrandModule.Read",
                            NormalizedName = "BRANDMODULE.READ"
                        },
                        new
                        {
                            Id = 102,
                            AccessLevel = 1,
                            ConcurrencyStamp = "204c82e2-a49f-48f3-9f67-f68bf3a2f785",
                            Definition = "Hasta Referanları Modülü Yetkisi",
                            Name = "CustomerReferanceModule.Read",
                            NormalizedName = "CUSTOMERREFERANCEMODULE.READ"
                        },
                        new
                        {
                            Id = 103,
                            AccessLevel = 1,
                            ConcurrencyStamp = "767f9e7f-1852-4049-acf5-6a70d3b30d17",
                            Definition = "Randevular Modülü Yetkisi",
                            Name = "AppointmentModule.Read",
                            NormalizedName = "APPOINTMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 104,
                            AccessLevel = 1,
                            ConcurrencyStamp = "310693e9-5694-4989-b61f-808746e4307c",
                            Definition = "Bildirimler Modülü Yetkisi",
                            Name = "NotificationModule.Read",
                            NormalizedName = "NOTIFICATIONMODULE.READ"
                        },
                        new
                        {
                            Id = 105,
                            AccessLevel = 1,
                            ConcurrencyStamp = "3bee7cce-e61b-475e-aee3-9beab79e9625",
                            Definition = "Dış Ödemeler Modülü Yetkisi",
                            Name = "OutPaymentModule.Read",
                            NormalizedName = "OUTPAYMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 106,
                            AccessLevel = 1,
                            ConcurrencyStamp = "2d77b580-7e29-4787-8b9f-f5ebebf24ce1",
                            Definition = "Satışlar Modülü Yetkisi",
                            Name = "SaleModule.Read",
                            NormalizedName = "SALEMODULE.READ"
                        },
                        new
                        {
                            Id = 107,
                            AccessLevel = 1,
                            ConcurrencyStamp = "935fbb72-5bbe-4133-93e7-10b77677a634",
                            Definition = "Gelen Ödemeler Modülü Yetkisi",
                            Name = "PaymentModule.Read",
                            NormalizedName = "PAYMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 108,
                            AccessLevel = 1,
                            ConcurrencyStamp = "eecff98f-d8b8-46d0-a303-48ae9b516897",
                            Definition = "Gelir Giderler Modülü Yetkisi",
                            Name = "ExpenseModule.Read",
                            NormalizedName = "EXPENSEMODULE.READ"
                        },
                        new
                        {
                            Id = 109,
                            AccessLevel = 1,
                            ConcurrencyStamp = "cab4073d-e1b5-427e-9b57-a6d4a9eb3d36",
                            Definition = "Roller Modülü Yetkisi",
                            Name = "RoleModule.Read",
                            NormalizedName = "ROLEMODULE.READ"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfSgk")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvoiceDue")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("SaleStatusId");

                    b.HasIndex("SaleTypeId");

                    b.ToTable("Sales", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 500,
                            AmountOfSgk = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(4820),
                            CustomerId = 1,
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsInvoiceDue = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(4821),
                            ProductId = 1,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 200,
                            AmountOfSgk = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(4824),
                            CustomerId = 1,
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsInvoiceDue = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(4825),
                            ProductId = 2,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 500,
                            AmountOfSgk = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(4827),
                            CustomerId = 1,
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsInvoiceDue = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(4828),
                            ProductId = 3,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SaleStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(2451),
                            Description = "açıklama deneme status sale 1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(2452),
                            Title = "Satış Aşamasında"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(2454),
                            Description = "açıklama deneme status sale 1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(2454),
                            Title = "Satıldı"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SaleTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5275),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5276),
                            Title = "Nakit"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5278),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5279),
                            Title = "Kart"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5280),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5281),
                            Title = "Çek"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5283),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(5283),
                            Title = "Senet"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("Stocks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(9163),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(9164),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 1,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(9166),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(9167),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 2,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(9169),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(9169),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 3,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(9171),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(9172),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 4,
                            Quantity = 20
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("SubPrograms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6635),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6635),
                            Name = "User.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6637),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6638),
                            Name = "User.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6640),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6640),
                            Name = "User.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6642),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6642),
                            Name = "User.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 14,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6644),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6644),
                            Name = "Role.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6646),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6646),
                            Name = "Role.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6648),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6648),
                            Name = "Role.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6650),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6650),
                            Name = "Role.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 37,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6652),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6652),
                            Name = "Payment.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 38,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6654),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6654),
                            Name = "Payment.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 39,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6656),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6656),
                            Name = "Payment.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 40,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6658),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6658),
                            Name = "Payment.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 41,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6660),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6660),
                            Name = "PaymentType.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 42,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6662),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6662),
                            Name = "PaymentType.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 43,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6664),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6665),
                            Name = "PaymentType.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 44,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6666),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6667),
                            Name = "PaymentType.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 45,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6668),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6669),
                            Name = "Employee.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 46,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6670),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6671),
                            Name = "Employee.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 47,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6672),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6673),
                            Name = "Employee.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 48,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6674),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6674),
                            Name = "Employee.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 49,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6676),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6676),
                            Name = "EmployeeType.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 50,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6678),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6678),
                            Name = "EmployeeType.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 51,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6680),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6680),
                            Name = "EmployeeType.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 52,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6682),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6683),
                            Name = "EmployeeType.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 53,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6684),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6685),
                            Name = "Customer.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 54,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6686),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6687),
                            Name = "Customer.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 55,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6688),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6689),
                            Name = "Customer.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 56,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6690),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6691),
                            Name = "Customer.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 57,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6692),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6693),
                            Name = "CustomerType.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 58,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6694),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6695),
                            Name = "CustomerType.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 59,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6696),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6697),
                            Name = "CustomerType.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 60,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6698),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6699),
                            Name = "CustomerType.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 61,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6700),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6701),
                            Name = "Notification.Create",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 62,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6702),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6703),
                            Name = "Notification.Read",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 63,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6704),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6705),
                            Name = "Notification.Update",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 64,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6706),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6707),
                            Name = "Notification.Delete",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 65,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6708),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6709),
                            Name = "Brand.Create",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 66,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6710),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6711),
                            Name = "Brand.Update",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 67,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6712),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6713),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 85,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6715),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6715),
                            Name = "Brand.Read",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 68,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6719),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6719),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 69,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6721),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6721),
                            Name = "SaleStatus.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 70,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6723),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6723),
                            Name = "SaleStatus.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 71,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6725),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6725),
                            Name = "SaleStatus.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 72,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6727),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6727),
                            Name = "SaleStatus.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 73,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6729),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6729),
                            Name = "SaleType.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 74,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6731),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6732),
                            Name = "SaleType.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 75,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6734),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6735),
                            Name = "SaleType.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 76,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6737),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6738),
                            Name = "SaleType.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 77,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6741),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6741),
                            Name = "ProductGroup.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 78,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6744),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6745),
                            Name = "ProductGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 79,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6746),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6747),
                            Name = "ProductGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 80,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6750),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6750),
                            Name = "ProductGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 81,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6753),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6753),
                            Name = "ProductSubGroup.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 82,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6755),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6756),
                            Name = "ProductSubGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 83,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6757),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6758),
                            Name = "ProductSubGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 84,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6761),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6762),
                            Name = "ProductSubGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 89,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6764),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6765),
                            Name = "AppointmentType.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 90,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6766),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6767),
                            Name = "AppointmentType.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 91,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6768),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6769),
                            Name = "AppointmentType.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 92,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6770),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6771),
                            Name = "AppointmentType.Delete",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 93,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6772),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6773),
                            Name = "Sale.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 94,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6774),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6775),
                            Name = "Sale.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 95,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6776),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6777),
                            Name = "Sale.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 96,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6778),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6779),
                            Name = "Sale.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 97,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6780),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6781),
                            Name = "Product.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 98,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6782),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6783),
                            Name = "Product.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 99,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6810),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6812),
                            Name = "Product.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 100,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6814),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6814),
                            Name = "Product.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 101,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6816),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6816),
                            Name = "Appointment.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 102,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6818),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6818),
                            Name = "Appointment.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 103,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6820),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6821),
                            Name = "Appointment.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 104,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6823),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 154, DateTimeKind.Local).AddTicks(6824),
                            Name = "Appointment.Delete",
                            ProgramId = 5
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Link")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Admin | Bilal",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4456aec-05da-4369-a780-248c0eb7a16f",
                            Email = "bilalAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bilal",
                            LastName = "Meto",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "BILALADMIN@GMAIL.COM",
                            NormalizedUserName = "BILALADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEC/zvqvXBtqjHoA+AMuIdXagzsxM/feP+7VGiD+9IZOOk/7HSWzliLzi1J6giPttfQ==",
                            PhoneNumber = "+905537314131",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "235748a1-fdb9-4786-b158-40f8dd3705aa",
                            TwoFactorEnabled = false,
                            UserName = "bilalAdmin"
                        },
                        new
                        {
                            Id = 2,
                            About = "Admin | Nazlı",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0744faf9-be44-4c25-a412-9f1d152a4980",
                            Email = "nazliAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nazlı",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "NAZLIADMIN@GMAIL.COM",
                            NormalizedUserName = "NAZLIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEKxHwc1X+XuKNChk2E3jXNtSrT2kX7iA1zYJ5OCrKW5LZYqSdc+UYmU+azxhPlWoPw==",
                            PhoneNumber = "+905398815246",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "0023725c-9e9d-4369-ba26-63b85893c173",
                            TwoFactorEnabled = false,
                            UserName = "nazliAdmin"
                        },
                        new
                        {
                            Id = 3,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f25f9f2a-29e8-4845-b330-2b9ec4daf83a",
                            Email = "sema@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sema",
                            LastName = "-",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEMA@GMAIL.COM",
                            NormalizedUserName = "SEMA",
                            PasswordHash = "AQAAAAEAACcQAAAAEK5h/mN2+kYRqa4Ws+de/2V6E+itvDuRC7fa9Kt+n0Uy2JQzo8WZyvPU1tvvij9rQw==",
                            PhoneNumber = "+905071273567",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "7cc6030d-8660-488a-8020-4fdcd74705d8",
                            TwoFactorEnabled = false,
                            UserName = "sema"
                        },
                        new
                        {
                            Id = 4,
                            About = "Geliştirici",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb87b5c1-32ac-4d4a-9f7d-4fcf2416eab1",
                            Email = "x@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bedirhan",
                            LastName = "Gündöner",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "X@GMAIL.COM",
                            NormalizedUserName = "DEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEDKLk6GRefFj31Q5fw91rC03pgdOwGblV2enK1t7aNxvDzDw+a3FaIfD+hg1KIizfg==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "f331b1d3-a6be-4d3a-bd95-42f85381c7e2",
                            TwoFactorEnabled = false,
                            UserName = "dev"
                        },
                        new
                        {
                            Id = 5,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3eda2806-7057-4cfc-ba84-a9b15f9883ab",
                            Email = "berra@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Berra",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERRA@GMAIL.COM",
                            NormalizedUserName = "BERRA",
                            PasswordHash = "AQAAAAEAACcQAAAAEJwVGRFmQD3wpybCb7XTX5wbXZNeSUv9cl6pEb7qYbwqv9gAQMm7Jtrng9UKzi2AxQ==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "49a14af4-1769-4077-9075-115c27061b4d",
                            TwoFactorEnabled = false,
                            UserName = "berra"
                        },
                        new
                        {
                            Id = 6,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e409068e-b11f-43c1-8077-eb0b68d0b8f4",
                            Email = "Elif@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elif",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF@GMAIL.COM",
                            NormalizedUserName = "ELIF",
                            PasswordHash = "AQAAAAEAACcQAAAAENp0CrPOB5h+PcblWqSYn8SROlIRuyMGLMvBSiENkNCr/c5q+Ork3E5YbuevHVp/pQ==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "6184ba72-1809-4bc3-a6e7-750c380aaf10",
                            TwoFactorEnabled = false,
                            UserName = "Elif"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2681),
                            Description = "C# Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2682),
                            Name = "C#",
                            Note = "C# Blog Kategorisi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2684),
                            Description = "C++ Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2685),
                            Name = "C++",
                            Note = "C++ Blog Kategorisi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2687),
                            Description = "JavaScript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2687),
                            Name = "JavaScript",
                            Note = "JavaScript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2689),
                            Description = "Typescript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2690),
                            Name = "Typescript",
                            Note = "Typescript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2691),
                            Description = "Java Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2692),
                            Name = "Java",
                            Note = "Java Blog Kategorisi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2694),
                            Description = "Python Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2694),
                            Name = "Python",
                            Note = "Python Blog Kategorisi"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2696),
                            Description = "Php Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2696),
                            Name = "Php",
                            Note = "Php Blog Kategorisi"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2698),
                            Description = "Kotlin Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2699),
                            Name = "Kotlin",
                            Note = "Kotlin Blog Kategorisi"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2700),
                            Description = "Swift Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2701),
                            Name = "Swift",
                            Note = "Swift Blog Kategorisi"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2702),
                            Description = "Ruby Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(2703),
                            Name = "Ruby",
                            Note = "Ruby Blog Kategorisi"
                        });
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(7253),
                            Description = "Product Kategori 2 Açıkama",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(7254),
                            Name = "Product Kategori 1",
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(7256),
                            Description = "Product Kategori 2 Açıkama",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 25, 22, 23, 6, 144, DateTimeKind.Local).AddTicks(7256),
                            Name = "Product Kategori 2",
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany("Appointments")
                        .HasForeignKey("UserId");

                    b.Navigation("AppointmentType");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.HasOne("MyBlog.Shared.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany("AssociatedInstitutions")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferance", "CustomerReferance")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerReferanceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Customers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferance");

                    b.Navigation("CustomerType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferanceTitle", "CustomerReferanceTitle")
                        .WithMany("CustomersReferances")
                        .HasForeignKey("CustomerReferanceTitleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferanceTitle");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Notifications")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPaymentDetail", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("outPaymentDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.OutPayment", "OutPayment")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("OutPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("OutPayment");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", null)
                        .WithMany("Payments")
                        .HasForeignKey("AssociatedInstitutionId");

                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", "AssociatedInstitutions")
                        .WithMany()
                        .HasForeignKey("AssociatedInstitutionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", null)
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId1");

                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Shared.Entities.Concrete.ProductCategory", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("MyBlog.Entities.Concrete.ProductSubGroup", "ProductSubGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("ProductSubGroup");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.ProductGroup", "ProductGroup")
                        .WithMany("ProductSubGroups")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Module", "Module")
                        .WithMany("Programs")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Sales")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Sale")
                        .HasForeignKey("MyBlog.Entities.Concrete.Sale", "ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.SaleStatus", "SaleStatus")
                        .WithMany("Sales")
                        .HasForeignKey("SaleStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SaleType", "SaleType")
                        .WithMany("Sales")
                        .HasForeignKey("SaleTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Product");

                    b.Navigation("SaleStatus");

                    b.Navigation("SaleType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("MyBlog.Entities.Concrete.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Program", "Program")
                        .WithMany("SubPrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferanceTitle", b =>
                {
                    b.Navigation("CustomersReferances");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Customers");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");

                    b.Navigation("outPaymentDetails");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPayment", b =>
                {
                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Navigation("ProductSubGroups");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Navigation("SubPrograms");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Articles");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
