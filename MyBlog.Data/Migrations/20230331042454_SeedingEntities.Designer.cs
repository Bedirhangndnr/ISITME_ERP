// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.Data.Concrete.EntityFramework.Context;

#nullable disable

namespace MyBlog.Data.Migrations
{
    [DbContext(typeof(MyBlogContext))]
    [Migration("20230331042454_SeedingEntities")]
    partial class SeedingEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMade")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTypeId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 861, DateTimeKind.Local).AddTicks(1086),
                            CustomerId = 1,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama2",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 861, DateTimeKind.Local).AddTicks(1087),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentTypeId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 861, DateTimeKind.Local).AddTicks(1092),
                            CustomerId = 2,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 861, DateTimeKind.Local).AddTicks(1092),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentTypeId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 861, DateTimeKind.Local).AddTicks(1095),
                            CustomerId = 3,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama3",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 861, DateTimeKind.Local).AddTicks(1096),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(8752),
                            Description = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(8753),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Test"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(8756),
                            Description = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(8757),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CommentCount = 0,
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5546),
                            Date = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5544),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5546),
                            Note = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoTags = "C#, C# 9, .NET5, .NET Framework, .NET Core",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C# 9.0 ve .NET 5 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CommentCount = 0,
                            Content = "Yinelenen bir sayfa içeriğinin okuyucunun dikkatini dağıttığı bilinen bir gerçektir. Lorem Ipsum kullanmanın amacı, sürekli 'buraya metin gelecek, buraya metin gelecek' yazmaya kıyasla daha dengeli bir harf dağılımı sağlayarak okunurluğu artırmasıdır. Şu anda birçok masaüstü yayıncılık paketi ve web sayfa düzenleyicisi, varsayılan mıgır metinler olarak Lorem Ipsum kullanmaktadır. Ayrıca arama motorlarında 'lorem ipsum' anahtar sözcükleri ile arama yapıldığında henüz tasarım aşamasında olan çok sayıda site listelenir. Yıllar içinde, bazen kazara, bazen bilinçli olarak (örneğin mizah katılarak), çeşitli sürümleri geliştirilmiştir.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5550),
                            Date = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5550),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5551),
                            Note = "C++ 11 ve 19 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C++ 11 ve 19 Yenilikleri",
                            SeoTags = "C++ 11 ve 19 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C++ 11 ve 19 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 295
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5554),
                            Date = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5554),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5555),
                            Note = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoTags = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 12
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CommentCount = 0,
                            Content = "É um facto estabelecido de que um leitor é distraído pelo conteúdo legível de uma página quando analisa a sua mancha gráfica. Logo, o uso de Lorem Ipsum leva a uma distribuição mais ou menos normal de letras, ao contrário do uso de 'Conteúdo aqui,conteúdo aqui'', tornando-o texto legível. Muitas ferramentas de publicação electrónica e editores de páginas web usam actualmente o Lorem Ipsum como o modelo de texto usado por omissão, e uma pesquisa por 'lorem ipsum' irá encontrar muitos websites ainda na sua infância. Várias versões têm evoluído ao longo dos anos, por vezes por acidente, por vezes propositadamente (como no caso do humor).",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5558),
                            Date = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5558),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5559),
                            Note = "Typescript 4.1 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Typescript 4.1, Typescript, TYPESCRIPT 2021",
                            SeoTags = "Typescript 4.1 Güncellemeleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Typescript 4.1",
                            UserId = 1,
                            ViewsCount = 666
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5562),
                            Date = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5562),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5563),
                            Note = "JAVA",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Java, Android, Mobile, Kotlin, Uygulama Geliştirme",
                            SeoTags = "Java, Mobil, Kotlin, Android, IOS, SWIFT",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Java ve Android'in Geleceği | 2021",
                            UserId = 1,
                            ViewsCount = 3225
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            CommentCount = 0,
                            Content = "Le Lorem Ipsum est simplement du faux texte employé dans la composition et la mise en page avant impression. Le Lorem Ipsum est le faux texte standard de l'imprimerie depuis les années 1500, quand un imprimeur anonyme assembla ensemble des morceaux de texte pour réaliser un livre spécimen de polices de texte. Il n'a pas fait que survivre cinq siècles, mais s'est aussi adapté à la bureautique informatique, sans que son contenu n'en soit modifié. Il a été popularisé dans les années 1960 grâce à la vente de feuilles Letraset contenant des passages du Lorem Ipsum, et, plus récemment, par son inclusion dans des applications de mise en page de texte, comme Aldus PageMaker.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5566),
                            Date = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5565),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5567),
                            Note = "Python",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Python ile Veri Madenciliği",
                            SeoTags = "Python, Veri Madenciliği Nasıl Yapılır?",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Python ile Veri Madenciliği | 2021",
                            UserId = 1,
                            ViewsCount = 9999
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            CommentCount = 0,
                            Content = "Contrairement à une opinion répandue, le Lorem Ipsum n'est pas simplement du texte aléatoire. Il trouve ses racines dans une oeuvre de la littérature latine classique datant de 45 av. J.-C., le rendant vieux de 2000 ans. Un professeur du Hampden-Sydney College, en Virginie, s'est intéressé à un des mots latins les plus obscurs, consectetur, extrait d'un passage du Lorem Ipsum, et en étudiant tous les usages de ce mot dans la littérature classique, découvrit la source incontestable du Lorem Ipsum. Il provient en fait des sections 1.10.32 et 1.10.33 du 0De Finibus Bonorum et Malorum' (Des Suprêmes Biens et des Suprêmes Maux) de Cicéron. Cet ouvrage, très populaire pendant la Renaissance, est un traité sur la théorie de l'éthique. Les premières lignes du Lorem Ipsum, 'Lorem ipsum dolor sit amet...'', proviennent de la section 1.10.32",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5570),
                            Date = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5569),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5571),
                            Note = "PHP",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Php ile API Oluşturma Rehberi",
                            SeoTags = "php, laravel, api, oop",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Php Laravel Başlangıç Rehberi | API",
                            UserId = 1,
                            ViewsCount = 4818
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            CommentCount = 0,
                            Content = "Plusieurs variations de Lorem Ipsum peuvent être trouvées ici ou là, mais la majeure partie d'entre elles a été altérée par l'addition d'humour ou de mots aléatoires qui ne ressemblent pas une seconde à du texte standard. Si vous voulez utiliser un passage du Lorem Ipsum, vous devez être sûr qu'il n'y a rien d'embarrassant caché dans le texte. Tous les générateurs de Lorem Ipsum sur Internet tendent à reproduire le même extrait sans fin, ce qui fait de lipsum.com le seul vrai générateur de Lorem Ipsum. Iil utilise un dictionnaire de plus de 200 mots latins, en combinaison de plusieurs structures de phrases, pour générer un Lorem Ipsum irréprochable. Le Lorem Ipsum ainsi obtenu ne contient aucune répétition, ni ne contient des mots farfelus, ou des touches d'humour.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5574),
                            Date = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5573),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5575),
                            Note = "Kotlin",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Kotlin ile Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "kotlin, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Kotlin ile Mobil Programlama",
                            UserId = 1,
                            ViewsCount = 750
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            CommentCount = 0,
                            Content = "Al contrario di quanto si pensi, Lorem Ipsum non è semplicemente una sequenza casuale di caratteri. Risale ad un classico della letteratura latina del 45 AC, cosa che lo rende vecchio di 2000 anni. Richard McClintock, professore di latino al Hampden-Sydney College in Virginia, ha ricercato una delle più oscure parole latine, consectetur, da un passaggio del Lorem Ipsum e ha scoperto tra i vari testi in cui è citata, la fonte da cui è tratto il testo, le sezioni 1.10.32 and 1.10.33 del 'de Finibus Bonorum et Malorum' di Cicerone. Questo testo è un trattato su teorie di etica, molto popolare nel Rinascimento. La prima riga del Lorem Ipsum, 'Lorem ipsum dolor sit amet..'', è tratta da un passaggio della sezione 1.10.32.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5578),
                            Date = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5577),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5579),
                            Note = "Swift",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Swift ile IOS Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "IOS, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Swift ile IOS Programlama",
                            UserId = 1,
                            ViewsCount = 14900
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            CommentCount = 0,
                            Content = "Esistono innumerevoli variazioni dei passaggi del Lorem Ipsum, ma la maggior parte hanno subito delle variazioni del tempo, a causa dell’inserimento di passaggi ironici, o di sequenze casuali di caratteri palesemente poco verosimili. Se si decide di utilizzare un passaggio del Lorem Ipsum, è bene essere certi che non contenga nulla di imbarazzante. In genere, i generatori di testo segnaposto disponibili su internet tendono a ripetere paragrafi predefiniti, rendendo questo il primo vero generatore automatico su intenet. Infatti utilizza un dizionario di oltre 200 vocaboli latini, combinati con un insieme di modelli di strutture di periodi, per generare passaggi di testo verosimili. Il testo così generato è sempre privo di ripetizioni, parole imbarazzanti o fuori luogo ecc.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5582),
                            Date = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5581),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(5583),
                            Note = "Ruby",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Ruby, Ruby on Rails Web Programlama, AirBnb Klon",
                            SeoTags = "Ruby on Rails, Ruby, Web Programlama, AirBnb",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Ruby on Rails ile AirBnb Klon Kodlayalım",
                            UserId = 1,
                            ViewsCount = 26777
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(8004),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(8005),
                            Title = "Brand Title Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "act Manuel"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8069),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8070),
                            Note = "C# Makale Yorumu",
                            Text = "Lorem Ipsum pasajlarının birçok çeşitlemesi vardır. Ancak bunların büyük bir çoğunluğu mizah katılarak veya rastgele sözcükler eklenerek değiştirilmişlerdir. Eğer bir Lorem Ipsum pasajı kullanacaksanız, metin aralarına utandırıcı sözcükler gizlenmediğinden emin olmanız gerekir. İnternet'teki tüm Lorem Ipsum üreteçleri önceden belirlenmiş metin bloklarını yineler. Bu da, bu üreteci İnternet üzerindeki gerçek Lorem Ipsum üreteci yapar. Bu üreteç, 200'den fazla Latince sözcük ve onlara ait cümle yapılarını içeren bir sözlük kullanır. Bu nedenle, üretilen Lorem Ipsum metinleri yinelemelerden, mizahtan ve karakteristik olmayan sözcüklerden uzaktır."
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8072),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8073),
                            Note = "C++ Makale Yorumu",
                            Text = "Lorem Ipsum jest tekstem stosowanym jako przykładowy wypełniacz w przemyśle poligraficznym. Został po raz pierwszy użyty w XV w. przez nieznanego drukarza do wypełnienia tekstem próbnej książki. Pięć wieków później zaczął być używany przemyśle elektronicznym, pozostając praktycznie niezmienionym. Spopularyzował się w latach 60. XX w. wraz z publikacją arkuszy Letrasetu, zawierających fragmenty Lorem Ipsum, a ostatnio z zawierającym różne wersje Lorem Ipsum oprogramowaniem przeznaczonym do realizacji druków na komputerach osobistych, jak Aldus PageMaker"
                        },
                        new
                        {
                            Id = 3,
                            ArticleId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8075),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8076),
                            Note = "JavaScript Makale Yorumu",
                            Text = "Ang Lorem Ipsum ay ginagamit na modelo ng industriya ng pagpriprint at pagtytypeset. Ang Lorem Ipsum ang naging regular na modelo simula pa noong 1500s, noong may isang di kilalang manlilimbag and kumuha ng galley ng type at ginulo ang pagkaka-ayos nito upang makagawa ng libro ng mga type specimen. Nalagpasan nito hindi lang limang siglo, kundi nalagpasan din nito ang paglaganap ng electronic typesetting at nanatiling parehas. Sumikat ito noong 1960s kasabay ng pag labas ng Letraset sheets na mayroong mga talata ng Lorem Ipsum, at kamakailan lang sa mga desktop publishing software tulad ng Aldus Pagemaker ginamit ang mga bersyon ng Lorem Ipsum."
                        },
                        new
                        {
                            Id = 4,
                            ArticleId = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8078),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8079),
                            Note = "Typescript Makale Yorumu",
                            Text = "Lorem Ipsum er rett og slett dummytekst fra og for trykkeindustrien. Lorem Ipsum har vært bransjens standard for dummytekst helt siden 1500-tallet, da en ukjent boktrykker stokket en mengde bokstaver for å lage et prøveeksemplar av en bok. Lorem Ipsum har tålt tidens tann usedvanlig godt, og har i tillegg til å bestå gjennom fem århundrer også tålt spranget over til elektronisk typografi uten vesentlige endringer. Lorem Ipsum ble gjort allment kjent i 1960-årene ved lanseringen av Letraset-ark med avsnitt fra Lorem Ipsum, og senere med sideombrekkingsprogrammet Aldus PageMaker som tok i bruk nettopp Lorem Ipsum for dummytekst."
                        },
                        new
                        {
                            Id = 5,
                            ArticleId = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8081),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8082),
                            Note = "Java Makale Yorumu",
                            Text = "Lorem Ipsum este pur şi simplu o machetă pentru text a industriei tipografice. Lorem Ipsum a fost macheta standard a industriei încă din secolul al XVI-lea, când un tipograf anonim a luat o planşetă de litere şi le-a amestecat pentru a crea o carte demonstrativă pentru literele respective. Nu doar că a supravieţuit timp de cinci secole, dar şi a facut saltul în tipografia electronică practic neschimbată. A fost popularizată în anii '60 odată cu ieşirea colilor Letraset care conţineau pasaje Lorem Ipsum, iar mai recent, prin programele de publicare pentru calculator, ca Aldus PageMaker care includeau versiuni de Lorem Ipsum."
                        },
                        new
                        {
                            Id = 6,
                            ArticleId = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8084),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8085),
                            Note = "Python Makale Yorumu",
                            Text = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a."
                        },
                        new
                        {
                            Id = 7,
                            ArticleId = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8087),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8087),
                            Note = "Php Makale Yorumu",
                            Text = "Lorem Ipsum – tas ir teksta salikums, kuru izmanto poligrāfijā un maketēšanas darbos. Lorem Ipsum ir kļuvis par vispārpieņemtu teksta aizvietotāju kopš 16. gadsimta sākuma. Tajā laikā kāds nezināms iespiedējs izveidoja teksta fragmentu, lai nodrukātu grāmatu ar burtu paraugiem. Tas ir ne tikai pārdzīvojis piecus gadsimtus, bet bez ievērojamām izmaiņām saglabājies arī mūsdienās, pārejot uz datorizētu teksta apstrādi. Tā popularizēšanai 60-tajos gados kalpoja Letraset burtu paraugu publicēšana ar Lorem Ipsum teksta fragmentiem un, nesenā pagātnē, tādas maketēšanas programmas kā Aldus PageMaker, kuras šablonu paraugos ir izmantots Lorem Ipsum teksts."
                        },
                        new
                        {
                            Id = 8,
                            ArticleId = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8090),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8090),
                            Note = "Kotlin Makale Yorumu",
                            Text = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like)."
                        },
                        new
                        {
                            Id = 9,
                            ArticleId = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8093),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8093),
                            Note = "Swift Makale Yorumu",
                            Text = "هنالك العديد من الأنواع المتوفرة لنصوص لوريم إيبسوم، ولكن الغالبية تم تعديلها بشكل ما عبر إدخال بعض النوادر أو الكلمات العشوائية إلى النص. إن كنت تريد أن تستخدم نص لوريم إيبسوم ما، عليك أن تتحقق أولاً أن ليس هناك أي كلمات أو عبارات محرجة أو غير لائقة مخبأة في هذا النص. بينما تعمل جميع مولّدات نصوص لوريم إيبسوم على الإنترنت على إعادة تكرار مقاطع من نص لوريم إيبسوم نفسه عدة مرات بما تتطلبه الحاجة، يقوم مولّدنا هذا باستخدام كلمات من قاموس يحوي على أكثر من 200 كلمة لا تينية، مضاف إليها مجموعة من الجمل النموذجية، لتكوين نص لوريم إيبسوم ذو شكل منطقي قريب إلى النص الحقيقي. وبالتالي يكون النص الناتح خالي من التكرار، أو أي كلمات أو عبارات غير لائقة أو ما شابه. وهذا ما يجعله أول مولّد نص لوريم إيبسوم حقيقي على الإنترنت."
                        },
                        new
                        {
                            Id = 10,
                            ArticleId = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8095),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(8096),
                            Note = "Ruby Makale Yorumu",
                            Text = "Lorem Ipsum，也称乱数假文或者哑元文本， 是印刷及排版领域所常用的虚拟文字。由于曾经一台匿名的打印机刻意打乱了一盒印刷字体从而造出一本字体样品书，Lorem Ipsum从西元15世纪起就被作为此领域的标准文本使用。它不仅延续了五个世纪，还通过了电子排版的挑战，其雏形却依然保存至今。在1960年代，”Leatraset”公司发布了印刷着Lorem Ipsum段落的纸张，从而广泛普及了它的使用。最近，计算机桌面出版软件”Aldus PageMaker”也通过同样的方式使Lorem Ipsum落入大众的视野。"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HospitalOfReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 4, 4, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1233),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1229),
                            CustomerReferanceId = 1,
                            CustomerTypeId = 1,
                            Email = "hasta1@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1230),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 2,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 4, 5, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1242),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1240),
                            CustomerReferanceId = 1,
                            CustomerTypeId = 2,
                            Email = "hasta2@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1240),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 3,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 4, 6, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1246),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1244),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1245),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 4,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 4, 7, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1250),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1248),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1249),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 5,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 4, 8, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1255),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1253),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1254),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 6,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 4, 9, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1259),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1257),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1258),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 7,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 4, 10, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1264),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1262),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(1262),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("CustomerReferances", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(2224),
                            Description = "Description",
                            FirstName = "Sema",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(2225),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Phone = "+905050102249"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(2228),
                            Description = "Description",
                            FirstName = "Sema",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(2229),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Phone = "+905050102249"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(3001),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(3001),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(3004),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(3005),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(3007),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(3008),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 3"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(6982),
                            EmployeeTypeId = 1,
                            FirstName = "Personel 1",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(6982),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 2,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(6985),
                            EmployeeTypeId = 1,
                            FirstName = "Ikinci Personel",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(6986),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 3,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(6989),
                            EmployeeTypeId = 1,
                            FirstName = "Ucuncu perosnel",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(6989),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(7153),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(7153),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(7155),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(7156),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(7157),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(7157),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(7160),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(7161),
                            Note = "Not",
                            Title = "Title"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(1867),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(1868),
                            Name = "AgendaModule.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(1870),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(1871),
                            Name = "CustomerModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(1873),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(1874),
                            Name = "FinanceModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(1876),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(1876),
                            Name = "HomeModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(1879),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(1879),
                            Name = "InstitutionalModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(1881),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(1882),
                            Name = "MarketingModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(1884),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(1885),
                            Name = "StockModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(510),
                            CustomerId = 1,
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(511),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 4, 3, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(513),
                            Title = "Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(519),
                            CustomerId = 2,
                            Description = "Doğum günü yaklaşmakta.",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(520),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 4, 2, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(521),
                            Title = "Doğum Günü!",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(523),
                            CustomerId = 3,
                            Description = "Aylık cihaz bakımı için konuşulacak",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(524),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 4, 1, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(525),
                            Title = "Cihaz Bakımı!",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AmountPaid")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PaymentTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(5538),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(5539),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            AmountPaid = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(5544),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(5544),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            AmountPaid = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(5547),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(5547),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            AmountPaid = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(5550),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(5550),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            AmountPaid = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(5553),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(5554),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            AmountPaid = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(5556),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(5557),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            AmountPaid = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(5559),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(5560),
                            PaymentTypeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(5828),
                            Description = "test description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 865, DateTimeKind.Local).AddTicks(5828),
                            Title = "test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("ProductSubGroupId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductSubGroupId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(6459),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(6460),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductName = "Siemens Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            SerialNumber = "A12BO9930HT4"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(6463),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(6464),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductName = "Jabra Signia",
                            ProductSubGroupId = 1,
                            SerialNumber = "A12BO9930HT3"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(6467),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(6467),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductName = "Apple Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            SerialNumber = "A12BO9930HT2"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(6470),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(6470),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductName = "Samsung Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            SerialNumber = "A12BO9930HT1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(1361),
                            Description = "Ürün Grubu Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(1362),
                            Title = "Ürün Grubu 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductSubGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(2796),
                            Description = "Ürün Alt Grubu Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(2797),
                            ProductGroupId = 1,
                            Title = "Ürün Alt Grubu Başlığı"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Programs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2601),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2601),
                            ModuleId = 5,
                            Name = "EmployeeProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2604),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2604),
                            ModuleId = 5,
                            Name = "UserProgram.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2607),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2607),
                            ModuleId = 7,
                            Name = "StockProgram.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2609),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2610),
                            ModuleId = 6,
                            Name = "CustomerReferenceProgram.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2612),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2613),
                            ModuleId = 1,
                            Name = "AppointmentProgram.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2615),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2616),
                            ModuleId = 1,
                            Name = "NotificationProgram.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2618),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2618),
                            ModuleId = 3,
                            Name = "PaymentProgram.Read"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2621),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2621),
                            ModuleId = 2,
                            Name = "CustomerProgram.Read"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2624),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2624),
                            ModuleId = 7,
                            Name = "BrandProgram.Read"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2626),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2627),
                            ModuleId = 3,
                            Name = "SaleProgram.Read"
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2629),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2630),
                            ModuleId = 7,
                            Name = "ProductProgram.Read"
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2632),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(2632),
                            ModuleId = 5,
                            Name = "RoleProgram.Create"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessLevel = 3,
                            ConcurrencyStamp = "712d46f2-4d97-4244-8fe7-3c250933a7c4",
                            Definition = "Kullanıcı Ekleme Yetkisi",
                            Name = "User.Create",
                            NormalizedName = "USER.CREATE"
                        },
                        new
                        {
                            Id = 2,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bcdccfb4-5196-4850-a494-6386f72585f4",
                            Definition = "Kullanıcı Görüntüleme Yetkisi",
                            Name = "User.Read",
                            NormalizedName = "USER.READ"
                        },
                        new
                        {
                            Id = 3,
                            AccessLevel = 3,
                            ConcurrencyStamp = "fac59916-a971-4894-8f7e-f0f4e45a447b",
                            Definition = "Kullanıcı Güncelleme Yetkisi",
                            Name = "User.Update",
                            NormalizedName = "USER.UPDATE"
                        },
                        new
                        {
                            Id = 4,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ee9001bb-9dfa-4a88-bd07-1adad27db025",
                            Definition = "Kullanıcı Silme Yetkisi",
                            Name = "User.Delete",
                            NormalizedName = "USER.DELETE"
                        },
                        new
                        {
                            Id = 5,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bdc12395-aafe-4970-a460-2f81ec1c66f9",
                            Definition = "Rol Görüntüleme Yetkisi",
                            Name = "Role.Read",
                            NormalizedName = "ROLE.READ"
                        },
                        new
                        {
                            Id = 6,
                            AccessLevel = 3,
                            ConcurrencyStamp = "685f9933-99c3-4402-a666-d6f092257cbc",
                            Definition = "Rol Güncelleme Yetkisi",
                            Name = "Role.Update",
                            NormalizedName = "ROLE.UPDATE"
                        },
                        new
                        {
                            Id = 7,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d5ebc03c-5e58-487e-b462-7f25168cb79b",
                            Definition = "Rol Silme Yetkisi",
                            Name = "Role.Delete",
                            NormalizedName = "ROLE.DELETE"
                        },
                        new
                        {
                            Id = 8,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7556cfe3-4e9e-45e3-8a23-7380c5511b93",
                            Definition = "Rol Ekleme Yetkisi",
                            Name = "Role.Create",
                            NormalizedName = "ROLE.CREATE"
                        },
                        new
                        {
                            Id = 9,
                            AccessLevel = 3,
                            ConcurrencyStamp = "397ea4ce-fdba-4f60-bcb4-4d9b7fb3a85c",
                            Definition = "Ödeme Ekleme Yetkisi",
                            Name = "Payment.Create",
                            NormalizedName = "PAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 10,
                            AccessLevel = 3,
                            ConcurrencyStamp = "76b643d3-6a07-439f-9012-1380b8e1da9a",
                            Definition = "Ödeme Görüntüleme Yetkisi",
                            Name = "Payment.Read",
                            NormalizedName = "PAYMENT.READ"
                        },
                        new
                        {
                            Id = 11,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a6a568a9-6141-4c8d-86f1-0e9e37dca17f",
                            Definition = "Ödeme Güncelleme Yetkisi",
                            Name = "Payment.Update",
                            NormalizedName = "PAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 12,
                            AccessLevel = 3,
                            ConcurrencyStamp = "df280359-054b-43e0-9155-f31533ac7da1",
                            Definition = "Ödeme Silme Yetkisi",
                            Name = "Payment.Delete",
                            NormalizedName = "PAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 13,
                            AccessLevel = 3,
                            ConcurrencyStamp = "55553df7-6696-4dfb-8be5-9072b96cae6b",
                            Definition = "Ödeme Türü Ekleme Yetkisi",
                            Name = "PaymentType.Create",
                            NormalizedName = "PAYMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 14,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3e7b7c14-648b-4f5e-9326-ed28819e6408",
                            Definition = "Ödeme Türü Görüntüleme Yetkisi",
                            Name = "PaymentType.Read",
                            NormalizedName = "PAYMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 15,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c994cae3-5cf8-4857-9d83-c6c301580ae5",
                            Definition = "Ödeme Türü Güncelleme Yetkisi",
                            Name = "PaymentType.Update",
                            NormalizedName = "PAYMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 16,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9816d0c3-291b-462e-802d-d51f77a9e726",
                            Definition = "Ödeme Türü Silme Yetkisi",
                            Name = "PaymentType.Delete",
                            NormalizedName = "PAYMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 17,
                            AccessLevel = 3,
                            ConcurrencyStamp = "de07959f-f8b1-4c01-8adb-a516aee4cd59",
                            Definition = "Çalışan Ekleme Yetkisi",
                            Name = "Employee.Create",
                            NormalizedName = "EMPLOYEE.CREATE"
                        },
                        new
                        {
                            Id = 18,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1a8e13ab-7b96-4fa2-8b10-ed0b5a1ccf51",
                            Definition = "Çalışan Görüntüleme Yetkisi",
                            Name = "Employee.Read",
                            NormalizedName = "EMPLOYEE.READ"
                        },
                        new
                        {
                            Id = 19,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1564d251-5c03-4989-97d7-192d7246f36f",
                            Definition = "Çalışan Güncelleme Yetkisi",
                            Name = "Employee.Update",
                            NormalizedName = "EMPLOYEE.UPDATE"
                        },
                        new
                        {
                            Id = 20,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bd2ec8a5-d1c9-4555-8244-487cbba96145",
                            Definition = "Çalışan Silme Yetkisi",
                            Name = "Employee.Delete",
                            NormalizedName = "EMPLOYEE.DELETE"
                        },
                        new
                        {
                            Id = 21,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6028ea13-1425-4029-90c8-c111a6b1a550",
                            Definition = "Çalışan Türü Ekleme Yetkisi",
                            Name = "EmployeeType.Create",
                            NormalizedName = "EMPLOYEETYPE.CREATE"
                        },
                        new
                        {
                            Id = 22,
                            AccessLevel = 3,
                            ConcurrencyStamp = "60023225-f655-479b-ac30-dc64c0ed3c45",
                            Definition = "Çalışan Türü Görüntüleme Yetkisi",
                            Name = "EmployeeType.Read",
                            NormalizedName = "EMPLOYEETYPE.READ"
                        },
                        new
                        {
                            Id = 23,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c6ebc77f-a992-46cf-b106-874144132a3b",
                            Definition = "Çalışan Türü Güncelleme Yetkisi",
                            Name = "EmployeeType.Update",
                            NormalizedName = "EMPLOYEETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 24,
                            AccessLevel = 3,
                            ConcurrencyStamp = "aab0c9df-9bbb-4771-8ede-0980d0e5273a",
                            Definition = "Çalışan Türü Silme Yetkisi",
                            Name = "EmployeeType.Delete",
                            NormalizedName = "EMPLOYEETYPE.DELETE"
                        },
                        new
                        {
                            Id = 25,
                            AccessLevel = 3,
                            ConcurrencyStamp = "638e19d0-e3c7-4433-a11e-9eb0c9c1d507",
                            Definition = "Müşteri Ekleme Yetkisi",
                            Name = "Customer.Create",
                            NormalizedName = "CUSTOMER.CREATE"
                        },
                        new
                        {
                            Id = 26,
                            AccessLevel = 3,
                            ConcurrencyStamp = "722f8d10-be42-4a96-8091-e00d4c9ae423",
                            Definition = "Müşteri Görüntüleme Yetkisi",
                            Name = "Customer.Read",
                            NormalizedName = "CUSTOMER.READ"
                        },
                        new
                        {
                            Id = 27,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d2cf2f45-570c-4d57-b235-018b568d4589",
                            Definition = "Müşteri Güncelleme Yetkisi",
                            Name = "Customer.Update",
                            NormalizedName = "CUSTOMER.UPDATE"
                        },
                        new
                        {
                            Id = 28,
                            AccessLevel = 3,
                            ConcurrencyStamp = "035bb806-d2b0-494c-851b-3f450e5af563",
                            Definition = "Müşteri Silme Yetkisi",
                            Name = "Customer.Delete",
                            NormalizedName = "CUSTOMER.DELETE"
                        },
                        new
                        {
                            Id = 29,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a12e4121-96c5-44ea-9f0a-aa002c0e623c",
                            Definition = "Müşteri Tipi Ekleme Yetkisi",
                            Name = "CustomerType.Create",
                            NormalizedName = "CUSTOMERTYPE.CREATE"
                        },
                        new
                        {
                            Id = 30,
                            AccessLevel = 3,
                            ConcurrencyStamp = "25b4e898-1c2b-4ff5-b367-93ffcd699b5b",
                            Definition = "Müşteri Tipi Görüntüleme Yetkisi",
                            Name = "CustomerType.Read",
                            NormalizedName = "CUSTOMERTYPE.READ"
                        },
                        new
                        {
                            Id = 31,
                            AccessLevel = 3,
                            ConcurrencyStamp = "02064e4d-524d-4c1d-89e7-5ffc619b7942",
                            Definition = "Müşteri Tipi Güncelleme Yetkisi",
                            Name = "CustomerType.Update",
                            NormalizedName = "CUSTOMERTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 32,
                            AccessLevel = 3,
                            ConcurrencyStamp = "340925a4-9247-431d-9317-9c47898f508e",
                            Definition = "Müşteri Tipi Silme Yetkisi",
                            Name = "CustomerType.Delete",
                            NormalizedName = "CUSTOMERTYPE.DELETE"
                        },
                        new
                        {
                            Id = 33,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0c652bb7-3682-483f-96f5-0dc1909069be",
                            Definition = "Bildirim Ekleme Yetkisi",
                            Name = "Notification.Create",
                            NormalizedName = "NOTİFİCATİON.CREATE"
                        },
                        new
                        {
                            Id = 34,
                            AccessLevel = 3,
                            ConcurrencyStamp = "aebda01f-0b14-45b3-849e-052c7ea4aeb7",
                            Definition = "Bildirim Görüntüleme Yetkisi",
                            Name = "Notification.Read",
                            NormalizedName = "NOTİFİCATİON.READ"
                        },
                        new
                        {
                            Id = 35,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ba424639-ce25-4296-a4ef-dd6d0acf3995",
                            Definition = "Bildirim Güncelleme Yetkisi",
                            Name = "Notification.Update",
                            NormalizedName = "NOTİFİCATİON.UPDATE"
                        },
                        new
                        {
                            Id = 36,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e3970787-bf9f-4421-be5f-0617793929dd",
                            Definition = "Bildirim Silme Yetkisi",
                            Name = "Notification.Delete",
                            NormalizedName = "NOTİFİCATİON.DELETE"
                        },
                        new
                        {
                            Id = 37,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2a86d8c4-6832-4d8a-8c67-b56de8efd889",
                            Definition = "Marka Ekleme Yetkisi",
                            Name = "Brand.Create",
                            NormalizedName = "BRAND.CREATE"
                        },
                        new
                        {
                            Id = 38,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4e54fb92-c3df-46a9-bf30-e60c40c98341",
                            Definition = "Marka Görüntüleme Yetkisi",
                            Name = "Brand.Read",
                            NormalizedName = "BRAND.READ"
                        },
                        new
                        {
                            Id = 39,
                            AccessLevel = 3,
                            ConcurrencyStamp = "198135b2-1170-4da4-bdda-ca5d64a2e2e9",
                            Definition = "Marka Güncelleme Yetkisi",
                            Name = "Brand.Update",
                            NormalizedName = "BRAND.UPDATE"
                        },
                        new
                        {
                            Id = 40,
                            AccessLevel = 3,
                            ConcurrencyStamp = "be44e991-674b-4597-9767-ca02895ec559",
                            Definition = "Marka Silme Yetkisi",
                            Name = "Brand.Delete",
                            NormalizedName = "BRAND.DELETE"
                        },
                        new
                        {
                            Id = 41,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6d1a8498-1e47-4d36-bff2-98bde8bb279a",
                            Definition = "Satış Durumu Ekleme Yetkisi",
                            Name = "SaleStatus.Create",
                            NormalizedName = "SALESTATUS.CREATE"
                        },
                        new
                        {
                            Id = 42,
                            AccessLevel = 3,
                            ConcurrencyStamp = "190d76f6-7418-48cb-a107-f191d7c48da2",
                            Definition = "Satış Durumu Görüntüleme Yetkisi",
                            Name = "SaleStatus.Read",
                            NormalizedName = "SALESTATUS.READ"
                        },
                        new
                        {
                            Id = 43,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2bbddde7-fcf9-4ee5-9e02-1350fb737a80",
                            Definition = "Satış Durumu Güncelleme Yetkisi",
                            Name = "SaleStatus.Update",
                            NormalizedName = "SALESTATUS.UPDATE"
                        },
                        new
                        {
                            Id = 44,
                            AccessLevel = 3,
                            ConcurrencyStamp = "447a4f0a-edc3-4a53-8da5-2208e517753b",
                            Definition = "Satış Durumu Silme Yetkisi",
                            Name = "SaleStatus.Delete",
                            NormalizedName = "SALESTATUS.DELETE"
                        },
                        new
                        {
                            Id = 45,
                            AccessLevel = 3,
                            ConcurrencyStamp = "eb5aff8f-6d55-4f24-99f5-dbe50803fe2a",
                            Definition = "Satış Türü Ekleme Yetkisi",
                            Name = "SaleType.Create",
                            NormalizedName = "SALETYPE.CREATE"
                        },
                        new
                        {
                            Id = 46,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1e7f5536-cda1-45e3-958a-4c91c989fc08",
                            Definition = "Satış Türü Görüntüleme Yetkisi",
                            Name = "SaleType.Read",
                            NormalizedName = "SALETYPE.READ"
                        },
                        new
                        {
                            Id = 47,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ff1a051a-917f-4a64-9d3b-7d1d12394341",
                            Definition = "Satış Türü Güncelleme Yetkisi",
                            Name = "SaleType.Update",
                            NormalizedName = "SALETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 48,
                            AccessLevel = 3,
                            ConcurrencyStamp = "29af0355-0270-42df-b701-e73ced30ea09",
                            Definition = "Satış Türü Silme Yetkisi",
                            Name = "SaleType.Delete",
                            NormalizedName = "SALETYPE.DELETE"
                        },
                        new
                        {
                            Id = 49,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3d2f34c8-3569-4377-acc7-6e288887d201",
                            Definition = "Ürün Grubu Ekleme Yetkisi",
                            Name = "ProductGroup.Create",
                            NormalizedName = "PRODUCTGROUP.CREATE"
                        },
                        new
                        {
                            Id = 50,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0692f39c-4c3d-43f7-8cd5-5ebf1949ca7e",
                            Definition = "Ürün Grubu Görüntüleme Yetkisi",
                            Name = "ProductGroup.Read",
                            NormalizedName = "PRODUCTGROUP.READ"
                        },
                        new
                        {
                            Id = 51,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bbb0b629-18dd-4d18-852e-c6e9935a2cb9",
                            Definition = "Ürün Grubu Güncelleme Yetkisi",
                            Name = "ProductGroup.Update",
                            NormalizedName = "PRODUCTGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 52,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d00a52a6-6c5d-4afa-aed4-43050b25829d",
                            Definition = "Ürün Grubu Silme Yetkisi",
                            Name = "ProductGroup.Delete",
                            NormalizedName = "PRODUCTGROUP.DELETE"
                        },
                        new
                        {
                            Id = 53,
                            AccessLevel = 3,
                            ConcurrencyStamp = "26e69be4-a84f-4f2a-b7f4-9702258f9937",
                            Definition = "Ürün Alt Grubu Ekleme Yetkisi",
                            Name = "ProductSubGroup.Create",
                            NormalizedName = "PRODUCTSUBGROUP.CREATE"
                        },
                        new
                        {
                            Id = 54,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a0719f32-f775-43a7-a066-a03c8acd6232",
                            Definition = "Ürün Alt Grubu Görüntüleme Yetkisi",
                            Name = "ProductSubGroup.Read",
                            NormalizedName = "PRODUCTSUBGROUP.READ"
                        },
                        new
                        {
                            Id = 55,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f7028e21-0428-40be-b3b5-4113010b17bb",
                            Definition = "Ürün Alt Grubu Güncelleme Yetkisi",
                            Name = "ProductSubGroup.Update",
                            NormalizedName = "PRODUCTSUBGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 56,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2330a9d3-0671-476e-829b-c1074fbc8ec8",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "ProductSubGroup.Delete",
                            NormalizedName = "PRODUCTSUBGROUP.DELETE"
                        },
                        new
                        {
                            Id = 57,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6de638aa-b0ef-4024-b6ef-715751273d93",
                            Definition = "Randevu Türü Ekleme Yetkisi",
                            Name = "AppointmentType.Create",
                            NormalizedName = "APPOİNTMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 58,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1d291ba0-4eaa-438e-a1ba-9240fb2925c2",
                            Definition = "Randevu Türü Görüntüleme Yetkisi",
                            Name = "AppointmentType.Read",
                            NormalizedName = "APPOİNTMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 59,
                            AccessLevel = 3,
                            ConcurrencyStamp = "dae31bb6-b72b-4144-8b83-0691cb764937",
                            Definition = "Randevu Türü Güncelleme Yetkisi",
                            Name = "AppointmentType.Update",
                            NormalizedName = "APPOİNTMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 60,
                            AccessLevel = 3,
                            ConcurrencyStamp = "42c92115-d90f-4b83-818c-691912e3a5b3",
                            Definition = "Randevu Türü Silme Yetkisi",
                            Name = "AppointmentType.Delete",
                            NormalizedName = "APPOİNTMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 61,
                            AccessLevel = 3,
                            ConcurrencyStamp = "46dcc118-33c0-493c-9d1f-1b48c47efd88",
                            Definition = "Satış Oluşturma Yetkisi",
                            Name = "Sale.Create",
                            NormalizedName = "SALE.CREATE"
                        },
                        new
                        {
                            Id = 62,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a6523c79-b233-486d-9463-1be5a7ea9145",
                            Definition = "Satış Görüntüleme Yetkisi",
                            Name = "Sale.Read",
                            NormalizedName = "SALE.READ"
                        },
                        new
                        {
                            Id = 63,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c1c04e9b-eece-4857-9eca-3485c737d523",
                            Definition = "Satış Güncelleme Yetkisi",
                            Name = "Sale.Update",
                            NormalizedName = "SALE.UPDATE"
                        },
                        new
                        {
                            Id = 64,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7ed3eb92-5438-48fd-b3cb-3b6448226f46",
                            Definition = "Satış Silme Yetkisi",
                            Name = "Sale.Delete",
                            NormalizedName = "SALE.DELETE"
                        },
                        new
                        {
                            Id = 65,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f5575d98-3457-4943-8d87-69edf219a5b4",
                            Definition = "Ürün Ekleme Yetkisi",
                            Name = "Product.Create",
                            NormalizedName = "PRODUCT.CREATE"
                        },
                        new
                        {
                            Id = 66,
                            AccessLevel = 3,
                            ConcurrencyStamp = "457b35bd-718e-4e62-b7bc-96df559579d9",
                            Definition = "Ürün Görüntüleme Yetkisi",
                            Name = "Product.Read",
                            NormalizedName = "PRODUCT.READ"
                        },
                        new
                        {
                            Id = 67,
                            AccessLevel = 3,
                            ConcurrencyStamp = "36e14c97-552e-4656-a9aa-844227bc5092",
                            Definition = "Ürün Güncelleme Yetkisi",
                            Name = "Product.Update",
                            NormalizedName = "PRODUCT.UPDATE"
                        },
                        new
                        {
                            Id = 68,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4b3333a0-c3d7-4c2a-9de2-687f529e5d37",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "Product.Delete",
                            NormalizedName = "PRODUCT.DELETE"
                        },
                        new
                        {
                            Id = 69,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bdc9705c-0d14-43ad-ac24-704b108c250e",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "Appointment.Create",
                            NormalizedName = "APPOİNTMENT.CREATE"
                        },
                        new
                        {
                            Id = 70,
                            AccessLevel = 3,
                            ConcurrencyStamp = "35ec62b4-9ce3-4855-b7cf-0ecb0f853885",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "Appointment.Read",
                            NormalizedName = "APPOİNTMENT.READ"
                        },
                        new
                        {
                            Id = 71,
                            AccessLevel = 3,
                            ConcurrencyStamp = "db83d765-edfc-432f-89a9-d64373f799fe",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "Appointment.Update",
                            NormalizedName = "APPOİNTMENT.UPDATE"
                        },
                        new
                        {
                            Id = 72,
                            AccessLevel = 3,
                            ConcurrencyStamp = "53e068c6-b568-4ffc-9773-846592d6f367",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "Appointment.Delete",
                            NormalizedName = "APPOİNTMENT.DELETE"
                        },
                        new
                        {
                            Id = 73,
                            AccessLevel = 2,
                            ConcurrencyStamp = "fa8a68ce-4ac4-43fd-87e5-155ca959c6b1",
                            Definition = "Markalar Programı Görüntüleme",
                            Name = "BrandProgram.Read",
                            NormalizedName = "BRANDPROGRAM.READ"
                        },
                        new
                        {
                            Id = 74,
                            AccessLevel = 2,
                            ConcurrencyStamp = "6a7e7f3c-440a-40a6-b9fc-3f9a93e892c2",
                            Definition = "Randevular Programı Görüntüleme",
                            Name = "AppointmentProgram.Read",
                            NormalizedName = "APPOİNTMENTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 75,
                            AccessLevel = 2,
                            ConcurrencyStamp = "7bdd8cc9-4c05-4763-b4bd-14582ef2839b",
                            Definition = "Hastalar Programı Görüntüleme",
                            Name = "CustomerProgram.Read",
                            NormalizedName = "CUSTOMERPROGRAM.READ"
                        },
                        new
                        {
                            Id = 76,
                            AccessLevel = 2,
                            ConcurrencyStamp = "744da1f7-beb1-460f-b922-73ab6fee6b8c",
                            Definition = "Referanslar Programı Görüntüleme",
                            Name = "CustomerReferenceProgram.Read",
                            NormalizedName = "CUSTOMERREFERENCEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 77,
                            AccessLevel = 2,
                            ConcurrencyStamp = "70cc2473-a972-46d5-81d0-722489851a6d",
                            Definition = "Personeller Programı Görüntüleme",
                            Name = "EmployeeProgram.Read",
                            NormalizedName = "EMPLOYEEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 78,
                            AccessLevel = 2,
                            ConcurrencyStamp = "093742bf-1b7d-4e0a-aaec-670f45ee7a9c",
                            Definition = "Bildirimler Programı Görüntüleme",
                            Name = "NotificationProgram.Read",
                            NormalizedName = "NOTİFİCATİONPROGRAM.READ"
                        },
                        new
                        {
                            Id = 79,
                            AccessLevel = 2,
                            ConcurrencyStamp = "104231f1-2768-414b-881d-46bd0a49a7a8",
                            Definition = "Ödemeler Programı Görüntüleme",
                            Name = "PaymentProgram.Read",
                            NormalizedName = "PAYMENTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 80,
                            AccessLevel = 2,
                            ConcurrencyStamp = "a6cad038-85e5-4ff3-b31e-c6fc6e90b9dd",
                            Definition = "Ürünler Programı Görüntüleme",
                            Name = "ProductProgram.Read",
                            NormalizedName = "PRODUCTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 81,
                            AccessLevel = 2,
                            ConcurrencyStamp = "f17f1aae-27f2-4f84-8271-039ddbecd0b1",
                            Definition = "Roller Programı Görüntüleme",
                            Name = "RoleProgram.Create",
                            NormalizedName = "ROLEPROGRAM.CREATE"
                        },
                        new
                        {
                            Id = 82,
                            AccessLevel = 2,
                            ConcurrencyStamp = "ad468e16-198a-4102-a28f-a378bf8b834a",
                            Definition = "Satışlar Programı Görüntüleme",
                            Name = "SaleProgram.Read",
                            NormalizedName = "SALEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 83,
                            AccessLevel = 2,
                            ConcurrencyStamp = "2c5ba872-a306-4782-b4a9-8e97b45465dc",
                            Definition = "Stok Programı Görüntüleme",
                            Name = "StockProgram.Read",
                            NormalizedName = "STOCKPROGRAM.READ"
                        },
                        new
                        {
                            Id = 84,
                            AccessLevel = 2,
                            ConcurrencyStamp = "9a5efee7-d80e-4df1-9552-0dfe55772de6",
                            Definition = "Kullanıcılar Programı Görüntüleme",
                            Name = "UserProgram.Read",
                            NormalizedName = "USERPROGRAM.READ"
                        },
                        new
                        {
                            Id = 85,
                            AccessLevel = 1,
                            ConcurrencyStamp = "93dc0bc8-9913-4389-933f-b150b807ef9b",
                            Definition = "Stok Modülü Görüntüleme",
                            Name = "StockModule.Read",
                            NormalizedName = "StockModule.Read"
                        },
                        new
                        {
                            Id = 86,
                            AccessLevel = 1,
                            ConcurrencyStamp = "9728f666-1b2d-4670-be55-ec927d9c92fa",
                            Definition = "MArketing Modülü Görüntüleme",
                            Name = "MarketingModule.Read",
                            NormalizedName = "MARKETİNGMODULE.READ"
                        },
                        new
                        {
                            Id = 87,
                            AccessLevel = 1,
                            ConcurrencyStamp = "6b9a8c5c-ed8a-4b6f-9474-3184e2078246",
                            Definition = "Ajanda Modülü Görüntüleme",
                            Name = "AgendaModule.Read",
                            NormalizedName = "AGENDAMODULE.READ"
                        },
                        new
                        {
                            Id = 88,
                            AccessLevel = 1,
                            ConcurrencyStamp = "bf5def11-04fe-4a45-a4f9-e64185f51cfc",
                            Definition = "Kurumsal Modülü Görüntüleme",
                            Name = "InstitutionalModule.Read",
                            NormalizedName = "INSTİTUTİONALMODULE.READ"
                        },
                        new
                        {
                            Id = 89,
                            AccessLevel = 1,
                            ConcurrencyStamp = "e1fa388d-ffb8-42bd-af5a-2195ee618ed9",
                            Definition = "Müşteri Modülü Görüntüleme",
                            Name = "CustomerModule.Read",
                            NormalizedName = "CUSTOMERMODULE.READ"
                        },
                        new
                        {
                            Id = 90,
                            AccessLevel = 1,
                            ConcurrencyStamp = "8e90031b-b09f-4305-86c0-a6c21bd882a1",
                            Definition = "Finans Modülü Görüntüleme",
                            Name = "FinanceModule.Read",
                            NormalizedName = "FİNANCEMODULE.READ"
                        },
                        new
                        {
                            Id = 91,
                            AccessLevel = 1,
                            ConcurrencyStamp = "8b59726e-c929-4e48-9c9d-45d3c60dd5ee",
                            Definition = "Anasayfa Görüntüleme Yetkisi",
                            Name = "HomeModule.Read",
                            NormalizedName = "HOMEMODULE.READ"
                        },
                        new
                        {
                            Id = 92,
                            AccessLevel = 1,
                            ConcurrencyStamp = "d6e20d18-461a-484a-be7d-a2c2ef539d44",
                            Definition = "SüperAdmin Yetkisi",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMİN"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.HasIndex("SaleStatusId");

                    b.HasIndex("SaleTypeId");

                    b.ToTable("Sales", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 500,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(17),
                            CustomerId = 1,
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(18),
                            ProductId = 1,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 200,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(22),
                            CustomerId = 1,
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(22),
                            ProductId = 2,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 500,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(25),
                            CustomerId = 1,
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(26),
                            ProductId = 3,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SaleStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(3575),
                            Description = "açıklama deneme status sale 1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(3575),
                            Title = "Satış Aşamasında"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(3579),
                            Description = "açıklama deneme status sale 1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 866, DateTimeKind.Local).AddTicks(3579),
                            Title = "Satıldı"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SaleTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(849),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(850),
                            Title = "Nakit"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(853),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(853),
                            Title = "Kart"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(855),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(856),
                            Title = "Çek"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(858),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(859),
                            Title = "Senet"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("Stocks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(7843),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(7844),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 1,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(7875),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(7876),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 2,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(7878),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(7879),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 3,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(7881),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(7882),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 4,
                            Quantity = 20
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("SubPrograms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3381),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3382),
                            Name = "User.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3385),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3385),
                            Name = "User.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3387),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3388),
                            Name = "User.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3390),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3391),
                            Name = "User.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 14,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3393),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3394),
                            Name = "Role.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3396),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3397),
                            Name = "Role.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3399),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3399),
                            Name = "Role.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3402),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3402),
                            Name = "Role.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 37,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3404),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3405),
                            Name = "Payment.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 38,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3407),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3408),
                            Name = "Payment.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 39,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3410),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3411),
                            Name = "Payment.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 40,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3413),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3414),
                            Name = "Payment.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 41,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3416),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3416),
                            Name = "PaymentType.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 42,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3419),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3419),
                            Name = "PaymentType.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 43,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3421),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3422),
                            Name = "PaymentType.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 44,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3424),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3425),
                            Name = "PaymentType.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 45,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3427),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3428),
                            Name = "Employee.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 46,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3430),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3431),
                            Name = "Employee.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 47,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3433),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3433),
                            Name = "Employee.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 48,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3436),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3436),
                            Name = "Employee.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 49,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3439),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3439),
                            Name = "EmployeeType.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 50,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3441),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3442),
                            Name = "EmployeeType.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 51,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3444),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3445),
                            Name = "EmployeeType.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 52,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3447),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3448),
                            Name = "EmployeeType.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 53,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3450),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3450),
                            Name = "Customer.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 54,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3453),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3455),
                            Name = "Customer.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 55,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3457),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3459),
                            Name = "Customer.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 56,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3462),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3463),
                            Name = "Customer.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 57,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3466),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3467),
                            Name = "CustomerType.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 58,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3469),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3470),
                            Name = "CustomerType.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 59,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3472),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3473),
                            Name = "CustomerType.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 60,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3475),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3476),
                            Name = "CustomerType.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 61,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3478),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3479),
                            Name = "Notification.Create",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 62,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3481),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3481),
                            Name = "Notification.Read",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 63,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3483),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3484),
                            Name = "Notification.Update",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 64,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3486),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3487),
                            Name = "Notification.Delete",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 65,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3489),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3490),
                            Name = "Brand.Create",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 66,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3492),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3492),
                            Name = "Brand.Update",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 67,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3495),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3495),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 85,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3497),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3498),
                            Name = "Brand.Read",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 68,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3500),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3501),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 69,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3503),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3503),
                            Name = "SaleStatus.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 70,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3506),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3506),
                            Name = "SaleStatus.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 71,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3508),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3509),
                            Name = "SaleStatus.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 72,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3511),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3512),
                            Name = "SaleStatus.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 73,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3514),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3515),
                            Name = "SaleType.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 74,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3517),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3518),
                            Name = "SaleType.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 75,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3520),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3520),
                            Name = "SaleType.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 76,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3522),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3523),
                            Name = "SaleType.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 77,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3556),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3557),
                            Name = "ProductGroup.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 78,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3559),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3560),
                            Name = "ProductGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 79,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3562),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3562),
                            Name = "ProductGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 80,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3565),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3565),
                            Name = "ProductGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 81,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3567),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3568),
                            Name = "ProductSubGroup.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 82,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3570),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3571),
                            Name = "ProductSubGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 83,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3573),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3574),
                            Name = "ProductSubGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 84,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3576),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3576),
                            Name = "ProductSubGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 89,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3579),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3579),
                            Name = "AppointmentType.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 90,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3581),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3582),
                            Name = "AppointmentType.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 91,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3584),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3585),
                            Name = "AppointmentType.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 92,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3587),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3587),
                            Name = "AppointmentType.Delete",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 93,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3590),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3590),
                            Name = "Sale.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 94,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3593),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3593),
                            Name = "Sale.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 95,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3595),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3596),
                            Name = "Sale.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 96,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3598),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3599),
                            Name = "Sale.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 97,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3601),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3601),
                            Name = "Product.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 98,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3604),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3604),
                            Name = "Product.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 99,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3606),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3607),
                            Name = "Product.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 100,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3609),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3610),
                            Name = "Product.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 101,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3612),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3613),
                            Name = "Appointment.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 102,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3615),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3615),
                            Name = "Appointment.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 103,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3618),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3618),
                            Name = "Appointment.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 104,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3620),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 867, DateTimeKind.Local).AddTicks(3621),
                            Name = "Appointment.Delete",
                            ProgramId = 5
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Link")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Admin User of MyBlog",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9790076d-001e-419c-8da7-202de0737dea",
                            Email = "adminuser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINUSER@GMAIL.COM",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEFwMmMMK0SpAdwWyg40Ikg7y1bpP8Vg5w0QAbptpxdn5KJVI/9W7kGzTWFrwrUz3mA==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "6cf84892-efb7-4079-b895-17bc84101268",
                            TwoFactorEnabled = false,
                            UserName = "adminuser"
                        },
                        new
                        {
                            Id = 2,
                            About = "Editor User of MyBlog",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59b8cded-d7ef-4605-b008-1bb6eaa70f40",
                            Email = "editoruser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITORUSER@GMAIL.COM",
                            NormalizedUserName = "EDITORUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEFwNElngSMm1Omb+eTm7iZFosvKEjNyAHSxz8rAe5c4yntdMrVHvNA/pkkMl+diPRg==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "ff5362d4-e2cd-4fcf-a66e-48fe6332e7c5",
                            TwoFactorEnabled = false,
                            UserName = "editoruser"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 92
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6544),
                            Description = "C# Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6545),
                            Name = "C#",
                            Note = "C# Blog Kategorisi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6547),
                            Description = "C++ Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6548),
                            Name = "C++",
                            Note = "C++ Blog Kategorisi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6550),
                            Description = "JavaScript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6550),
                            Name = "JavaScript",
                            Note = "JavaScript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6553),
                            Description = "Typescript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6553),
                            Name = "Typescript",
                            Note = "Typescript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6556),
                            Description = "Java Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6556),
                            Name = "Java",
                            Note = "Java Blog Kategorisi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6559),
                            Description = "Python Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6559),
                            Name = "Python",
                            Note = "Python Blog Kategorisi"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6562),
                            Description = "Php Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6562),
                            Name = "Php",
                            Note = "Php Blog Kategorisi"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6565),
                            Description = "Kotlin Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6565),
                            Name = "Kotlin",
                            Note = "Kotlin Blog Kategorisi"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6568),
                            Description = "Swift Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6568),
                            Name = "Swift",
                            Note = "Swift Blog Kategorisi"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6570),
                            Description = "Ruby Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 859, DateTimeKind.Local).AddTicks(6571),
                            Name = "Ruby",
                            Note = "Ruby Blog Kategorisi"
                        });
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(3931),
                            Description = "Product Kategori 2 Açıkama",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(3932),
                            Name = "Product Kategori 1",
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(3935),
                            Description = "Product Kategori 2 Açıkama",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 3, 31, 7, 24, 53, 860, DateTimeKind.Local).AddTicks(3936),
                            Name = "Product Kategori 2",
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany("Appointments")
                        .HasForeignKey("UserId");

                    b.Navigation("AppointmentType");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.HasOne("MyBlog.Shared.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferance", "CustomerReferance")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerReferanceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Customers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferance");

                    b.Navigation("CustomerType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Notifications")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Shared.Entities.Concrete.ProductCategory", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("MyBlog.Entities.Concrete.ProductSubGroup", "ProductSubGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("ProductSubGroup");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.ProductGroup", "ProductGroup")
                        .WithMany("ProductSubGroups")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Module", "Module")
                        .WithMany("Programs")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Sales")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Sale")
                        .HasForeignKey("MyBlog.Entities.Concrete.Sale", "ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SaleStatus", "SaleStatus")
                        .WithMany("Sales")
                        .HasForeignKey("SaleStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SaleType", "SaleType")
                        .WithMany("Sales")
                        .HasForeignKey("SaleTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Product");

                    b.Navigation("SaleStatus");

                    b.Navigation("SaleType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("MyBlog.Entities.Concrete.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Program", "Program")
                        .WithMany("SubPrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Customers");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Navigation("ProductSubGroups");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Navigation("SubPrograms");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Articles");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
