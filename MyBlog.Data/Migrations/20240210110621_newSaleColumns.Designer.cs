// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.Data.Concrete.EntityFramework.Context;

#nullable disable

namespace MyBlog.Data.Migrations
{
    [DbContext(typeof(MyBlogContext))]
    [Migration("20240210110621_newSaleColumns")]
    partial class newSaleColumns
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMade")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewCustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTypeId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 82, DateTimeKind.Local).AddTicks(8428),
                            CustomerId = 1,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama2",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 82, DateTimeKind.Local).AddTicks(8429),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(3389),
                            Description = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(3391),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CommentCount = 0,
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4834),
                            Date = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4832),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4835),
                            Note = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoTags = "C#, C# 9, .NET5, .NET Framework, .NET Core",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C# 9.0 ve .NET 5 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CommentCount = 0,
                            Content = "Yinelenen bir sayfa içeriğinin okuyucunun dikkatini dağıttığı bilinen bir gerçektir. Lorem Ipsum kullanmanın amacı, sürekli 'buraya metin gelecek, buraya metin gelecek' yazmaya kıyasla daha dengeli bir harf dağılımı sağlayarak okunurluğu artırmasıdır. Şu anda birçok masaüstü yayıncılık paketi ve web sayfa düzenleyicisi, varsayılan mıgır metinler olarak Lorem Ipsum kullanmaktadır. Ayrıca arama motorlarında 'lorem ipsum' anahtar sözcükleri ile arama yapıldığında henüz tasarım aşamasında olan çok sayıda site listelenir. Yıllar içinde, bazen kazara, bazen bilinçli olarak (örneğin mizah katılarak), çeşitli sürümleri geliştirilmiştir.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4840),
                            Date = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4839),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4841),
                            Note = "C++ 11 ve 19 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C++ 11 ve 19 Yenilikleri",
                            SeoTags = "C++ 11 ve 19 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C++ 11 ve 19 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 295
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4844),
                            Date = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4843),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4845),
                            Note = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoTags = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 12
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CommentCount = 0,
                            Content = "É um facto estabelecido de que um leitor é distraído pelo conteúdo legível de uma página quando analisa a sua mancha gráfica. Logo, o uso de Lorem Ipsum leva a uma distribuição mais ou menos normal de letras, ao contrário do uso de 'Conteúdo aqui,conteúdo aqui'', tornando-o texto legível. Muitas ferramentas de publicação electrónica e editores de páginas web usam actualmente o Lorem Ipsum como o modelo de texto usado por omissão, e uma pesquisa por 'lorem ipsum' irá encontrar muitos websites ainda na sua infância. Várias versões têm evoluído ao longo dos anos, por vezes por acidente, por vezes propositadamente (como no caso do humor).",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4847),
                            Date = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4847),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4848),
                            Note = "Typescript 4.1 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Typescript 4.1, Typescript, TYPESCRIPT 2021",
                            SeoTags = "Typescript 4.1 Güncellemeleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Typescript 4.1",
                            UserId = 1,
                            ViewsCount = 666
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4851),
                            Date = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4850),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4851),
                            Note = "JAVA",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Java, Android, Mobile, Kotlin, Uygulama Geliştirme",
                            SeoTags = "Java, Mobil, Kotlin, Android, IOS, SWIFT",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Java ve Android'in Geleceği | 2021",
                            UserId = 1,
                            ViewsCount = 3225
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            CommentCount = 0,
                            Content = "Le Lorem Ipsum est simplement du faux texte employé dans la composition et la mise en page avant impression. Le Lorem Ipsum est le faux texte standard de l'imprimerie depuis les années 1500, quand un imprimeur anonyme assembla ensemble des morceaux de texte pour réaliser un livre spécimen de polices de texte. Il n'a pas fait que survivre cinq siècles, mais s'est aussi adapté à la bureautique informatique, sans que son contenu n'en soit modifié. Il a été popularisé dans les années 1960 grâce à la vente de feuilles Letraset contenant des passages du Lorem Ipsum, et, plus récemment, par son inclusion dans des applications de mise en page de texte, comme Aldus PageMaker.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4854),
                            Date = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4853),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4855),
                            Note = "Python",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Python ile Veri Madenciliği",
                            SeoTags = "Python, Veri Madenciliği Nasıl Yapılır?",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Python ile Veri Madenciliği | 2021",
                            UserId = 1,
                            ViewsCount = 9999
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            CommentCount = 0,
                            Content = "Contrairement à une opinion répandue, le Lorem Ipsum n'est pas simplement du texte aléatoire. Il trouve ses racines dans une oeuvre de la littérature latine classique datant de 45 av. J.-C., le rendant vieux de 2000 ans. Un professeur du Hampden-Sydney College, en Virginie, s'est intéressé à un des mots latins les plus obscurs, consectetur, extrait d'un passage du Lorem Ipsum, et en étudiant tous les usages de ce mot dans la littérature classique, découvrit la source incontestable du Lorem Ipsum. Il provient en fait des sections 1.10.32 et 1.10.33 du 0De Finibus Bonorum et Malorum' (Des Suprêmes Biens et des Suprêmes Maux) de Cicéron. Cet ouvrage, très populaire pendant la Renaissance, est un traité sur la théorie de l'éthique. Les premières lignes du Lorem Ipsum, 'Lorem ipsum dolor sit amet...'', proviennent de la section 1.10.32",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4857),
                            Date = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4857),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4858),
                            Note = "PHP",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Php ile API Oluşturma Rehberi",
                            SeoTags = "php, laravel, api, oop",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Php Laravel Başlangıç Rehberi | API",
                            UserId = 1,
                            ViewsCount = 4818
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            CommentCount = 0,
                            Content = "Plusieurs variations de Lorem Ipsum peuvent être trouvées ici ou là, mais la majeure partie d'entre elles a été altérée par l'addition d'humour ou de mots aléatoires qui ne ressemblent pas une seconde à du texte standard. Si vous voulez utiliser un passage du Lorem Ipsum, vous devez être sûr qu'il n'y a rien d'embarrassant caché dans le texte. Tous les générateurs de Lorem Ipsum sur Internet tendent à reproduire le même extrait sans fin, ce qui fait de lipsum.com le seul vrai générateur de Lorem Ipsum. Iil utilise un dictionnaire de plus de 200 mots latins, en combinaison de plusieurs structures de phrases, pour générer un Lorem Ipsum irréprochable. Le Lorem Ipsum ainsi obtenu ne contient aucune répétition, ni ne contient des mots farfelus, ou des touches d'humour.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4860),
                            Date = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4860),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4861),
                            Note = "Kotlin",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Kotlin ile Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "kotlin, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Kotlin ile Mobil Programlama",
                            UserId = 1,
                            ViewsCount = 750
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            CommentCount = 0,
                            Content = "Al contrario di quanto si pensi, Lorem Ipsum non è semplicemente una sequenza casuale di caratteri. Risale ad un classico della letteratura latina del 45 AC, cosa che lo rende vecchio di 2000 anni. Richard McClintock, professore di latino al Hampden-Sydney College in Virginia, ha ricercato una delle più oscure parole latine, consectetur, da un passaggio del Lorem Ipsum e ha scoperto tra i vari testi in cui è citata, la fonte da cui è tratto il testo, le sezioni 1.10.32 and 1.10.33 del 'de Finibus Bonorum et Malorum' di Cicerone. Questo testo è un trattato su teorie di etica, molto popolare nel Rinascimento. La prima riga del Lorem Ipsum, 'Lorem ipsum dolor sit amet..'', è tratta da un passaggio della sezione 1.10.32.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4864),
                            Date = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4863),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4865),
                            Note = "Swift",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Swift ile IOS Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "IOS, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Swift ile IOS Programlama",
                            UserId = 1,
                            ViewsCount = 14900
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            CommentCount = 0,
                            Content = "Esistono innumerevoli variazioni dei passaggi del Lorem Ipsum, ma la maggior parte hanno subito delle variazioni del tempo, a causa dell’inserimento di passaggi ironici, o di sequenze casuali di caratteri palesemente poco verosimili. Se si decide di utilizzare un passaggio del Lorem Ipsum, è bene essere certi che non contenga nulla di imbarazzante. In genere, i generatori di testo segnaposto disponibili su internet tendono a ripetere paragrafi predefiniti, rendendo questo il primo vero generatore automatico su intenet. Infatti utilizza un dizionario di oltre 200 vocaboli latini, combinati con un insieme di modelli di strutture di periodi, per generare passaggi di testo verosimili. Il testo così generato è sempre privo di ripetizioni, parole imbarazzanti o fuori luogo ecc.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4867),
                            Date = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4867),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(4868),
                            Note = "Ruby",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Ruby, Ruby on Rails Web Programlama, AirBnb Klon",
                            SeoTags = "Ruby on Rails, Ruby, Web Programlama, AirBnb",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Ruby on Rails ile AirBnb Klon Kodlayalım",
                            UserId = 1,
                            ViewsCount = 26777
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("AssociatedInstitutions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6684),
                            Description = "İş Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6685),
                            PaymentTypeId = 1,
                            Title = "İş Bankası"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6686),
                            Description = "Garanti Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6687),
                            PaymentTypeId = 1,
                            Title = "Garanti Bankası"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6688),
                            Description = "Yapı Kredi Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6688),
                            PaymentTypeId = 1,
                            Title = "Yapı Kredi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6689),
                            Description = "Akbank Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6689),
                            PaymentTypeId = 1,
                            Title = "Akbank"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6690),
                            Description = "Avrupa Ses Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6690),
                            PaymentTypeId = 2,
                            Title = "Avrupa Ses"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6691),
                            Description = "Sivasot Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6691),
                            PaymentTypeId = 2,
                            Title = "Sivasot"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6692),
                            Description = "Timtoptan Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6692),
                            PaymentTypeId = 2,
                            Title = "Timtoptan"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "act Manuel"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6555),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6556),
                            Note = "C# Makale Yorumu",
                            Text = "Lorem Ipsum pasajlarının birçok çeşitlemesi vardır. Ancak bunların büyük bir çoğunluğu mizah katılarak veya rastgele sözcükler eklenerek değiştirilmişlerdir. Eğer bir Lorem Ipsum pasajı kullanacaksanız, metin aralarına utandırıcı sözcükler gizlenmediğinden emin olmanız gerekir. İnternet'teki tüm Lorem Ipsum üreteçleri önceden belirlenmiş metin bloklarını yineler. Bu da, bu üreteci İnternet üzerindeki gerçek Lorem Ipsum üreteci yapar. Bu üreteç, 200'den fazla Latince sözcük ve onlara ait cümle yapılarını içeren bir sözlük kullanır. Bu nedenle, üretilen Lorem Ipsum metinleri yinelemelerden, mizahtan ve karakteristik olmayan sözcüklerden uzaktır."
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6559),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6559),
                            Note = "C++ Makale Yorumu",
                            Text = "Lorem Ipsum jest tekstem stosowanym jako przykładowy wypełniacz w przemyśle poligraficznym. Został po raz pierwszy użyty w XV w. przez nieznanego drukarza do wypełnienia tekstem próbnej książki. Pięć wieków później zaczął być używany przemyśle elektronicznym, pozostając praktycznie niezmienionym. Spopularyzował się w latach 60. XX w. wraz z publikacją arkuszy Letrasetu, zawierających fragmenty Lorem Ipsum, a ostatnio z zawierającym różne wersje Lorem Ipsum oprogramowaniem przeznaczonym do realizacji druków na komputerach osobistych, jak Aldus PageMaker"
                        },
                        new
                        {
                            Id = 3,
                            ArticleId = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6561),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6562),
                            Note = "JavaScript Makale Yorumu",
                            Text = "Ang Lorem Ipsum ay ginagamit na modelo ng industriya ng pagpriprint at pagtytypeset. Ang Lorem Ipsum ang naging regular na modelo simula pa noong 1500s, noong may isang di kilalang manlilimbag and kumuha ng galley ng type at ginulo ang pagkaka-ayos nito upang makagawa ng libro ng mga type specimen. Nalagpasan nito hindi lang limang siglo, kundi nalagpasan din nito ang paglaganap ng electronic typesetting at nanatiling parehas. Sumikat ito noong 1960s kasabay ng pag labas ng Letraset sheets na mayroong mga talata ng Lorem Ipsum, at kamakailan lang sa mga desktop publishing software tulad ng Aldus Pagemaker ginamit ang mga bersyon ng Lorem Ipsum."
                        },
                        new
                        {
                            Id = 4,
                            ArticleId = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6564),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6564),
                            Note = "Typescript Makale Yorumu",
                            Text = "Lorem Ipsum er rett og slett dummytekst fra og for trykkeindustrien. Lorem Ipsum har vært bransjens standard for dummytekst helt siden 1500-tallet, da en ukjent boktrykker stokket en mengde bokstaver for å lage et prøveeksemplar av en bok. Lorem Ipsum har tålt tidens tann usedvanlig godt, og har i tillegg til å bestå gjennom fem århundrer også tålt spranget over til elektronisk typografi uten vesentlige endringer. Lorem Ipsum ble gjort allment kjent i 1960-årene ved lanseringen av Letraset-ark med avsnitt fra Lorem Ipsum, og senere med sideombrekkingsprogrammet Aldus PageMaker som tok i bruk nettopp Lorem Ipsum for dummytekst."
                        },
                        new
                        {
                            Id = 5,
                            ArticleId = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6566),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6566),
                            Note = "Java Makale Yorumu",
                            Text = "Lorem Ipsum este pur şi simplu o machetă pentru text a industriei tipografice. Lorem Ipsum a fost macheta standard a industriei încă din secolul al XVI-lea, când un tipograf anonim a luat o planşetă de litere şi le-a amestecat pentru a crea o carte demonstrativă pentru literele respective. Nu doar că a supravieţuit timp de cinci secole, dar şi a facut saltul în tipografia electronică practic neschimbată. A fost popularizată în anii '60 odată cu ieşirea colilor Letraset care conţineau pasaje Lorem Ipsum, iar mai recent, prin programele de publicare pentru calculator, ca Aldus PageMaker care includeau versiuni de Lorem Ipsum."
                        },
                        new
                        {
                            Id = 6,
                            ArticleId = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6568),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6569),
                            Note = "Python Makale Yorumu",
                            Text = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a."
                        },
                        new
                        {
                            Id = 7,
                            ArticleId = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6570),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6571),
                            Note = "Php Makale Yorumu",
                            Text = "Lorem Ipsum – tas ir teksta salikums, kuru izmanto poligrāfijā un maketēšanas darbos. Lorem Ipsum ir kļuvis par vispārpieņemtu teksta aizvietotāju kopš 16. gadsimta sākuma. Tajā laikā kāds nezināms iespiedējs izveidoja teksta fragmentu, lai nodrukātu grāmatu ar burtu paraugiem. Tas ir ne tikai pārdzīvojis piecus gadsimtus, bet bez ievērojamām izmaiņām saglabājies arī mūsdienās, pārejot uz datorizētu teksta apstrādi. Tā popularizēšanai 60-tajos gados kalpoja Letraset burtu paraugu publicēšana ar Lorem Ipsum teksta fragmentiem un, nesenā pagātnē, tādas maketēšanas programmas kā Aldus PageMaker, kuras šablonu paraugos ir izmantots Lorem Ipsum teksts."
                        },
                        new
                        {
                            Id = 8,
                            ArticleId = 8,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6573),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6573),
                            Note = "Kotlin Makale Yorumu",
                            Text = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like)."
                        },
                        new
                        {
                            Id = 9,
                            ArticleId = 9,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6575),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6576),
                            Note = "Swift Makale Yorumu",
                            Text = "هنالك العديد من الأنواع المتوفرة لنصوص لوريم إيبسوم، ولكن الغالبية تم تعديلها بشكل ما عبر إدخال بعض النوادر أو الكلمات العشوائية إلى النص. إن كنت تريد أن تستخدم نص لوريم إيبسوم ما، عليك أن تتحقق أولاً أن ليس هناك أي كلمات أو عبارات محرجة أو غير لائقة مخبأة في هذا النص. بينما تعمل جميع مولّدات نصوص لوريم إيبسوم على الإنترنت على إعادة تكرار مقاطع من نص لوريم إيبسوم نفسه عدة مرات بما تتطلبه الحاجة، يقوم مولّدنا هذا باستخدام كلمات من قاموس يحوي على أكثر من 200 كلمة لا تينية، مضاف إليها مجموعة من الجمل النموذجية، لتكوين نص لوريم إيبسوم ذو شكل منطقي قريب إلى النص الحقيقي. وبالتالي يكون النص الناتح خالي من التكرار، أو أي كلمات أو عبارات غير لائقة أو ما شابه. وهذا ما يجعله أول مولّد نص لوريم إيبسوم حقيقي على الإنترنت."
                        },
                        new
                        {
                            Id = 10,
                            ArticleId = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6577),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(6578),
                            Note = "Ruby Makale Yorumu",
                            Text = "Lorem Ipsum，也称乱数假文或者哑元文本， 是印刷及排版领域所常用的虚拟文字。由于曾经一台匿名的打印机刻意打乱了一盒印刷字体从而造出一本字体样品书，Lorem Ipsum从西元15世纪起就被作为此领域的标准文本使用。它不仅延续了五个世纪，还通过了电子排版的挑战，其雏形却依然保存至今。在1960年代，”Leatraset”公司发布了印刷着Lorem Ipsum段落的纸张，从而广泛普及了它的使用。最近，计算机桌面出版软件”Aldus PageMaker”也通过同样的方式使Lorem Ipsum落入大众的视野。"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HospitalOfReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2024, 2, 14, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(8383),
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(8378),
                            CustomerReferanceId = 1,
                            CustomerTypeId = 1,
                            Email = "hasta1@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(8379),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceTitleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FromWhere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TC")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceTitleId");

                    b.ToTable("CustomerReferances", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 82, DateTimeKind.Local).AddTicks(929),
                            CustomerReferanceTitleId = 1,
                            Description = "Description",
                            FirstName = "Sema",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 82, DateTimeKind.Local).AddTicks(930),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Phone = "+905050102249"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferanceTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("CustomerReferanceTitles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(9907),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(9908),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Referans Unvan 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 82, DateTimeKind.Local).AddTicks(1422),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 82, DateTimeKind.Local).AddTicks(1423),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(117),
                            Email = "bedirhangn@gmail.com",
                            EmployeeTypeId = 1,
                            FirstName = "Personel 1",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(118),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(695),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(696),
                            Note = "Not",
                            Title = "Title"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDaily")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncome")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Expenses", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.MessageToDeveloper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EstimatedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MessageToDevelopers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(7219),
                            EstimatedCompletionDate = new DateTime(2024, 2, 15, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(7222),
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "TEST",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(7220),
                            Progress = 3,
                            Title = "MessageToDeveloper Title Test"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(7225),
                            EstimatedCompletionDate = new DateTime(2024, 2, 15, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(7226),
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "TEST 2222222222222222",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(7226),
                            Progress = 1,
                            Title = "MessageToDeveloper Title Test"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(7228),
                            EstimatedCompletionDate = new DateTime(2024, 2, 13, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(7229),
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "TEST 2222222222222222",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(7229),
                            Progress = 4,
                            Title = "MessageToDeveloper Title Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(4988),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(4989),
                            Name = "AgendaProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(4992),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(4992),
                            Name = "CustomerModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(4994),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(4994),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(4996),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(4997),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(4999),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(4999),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5001),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5001),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5003),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5003),
                            Name = "StockModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(6324),
                            CustomerId = 1,
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(6325),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2024, 2, 13, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(6332),
                            Title = "Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(6340),
                            CustomerId = 1,
                            Description = "Doğum günü yaklaşmakta.",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(6341),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2024, 2, 12, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(6342),
                            Title = "Doğum Günü!",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(6346),
                            CustomerId = 1,
                            Description = "Aylık cihaz bakımı için konuşulacak",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(6347),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2024, 2, 11, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(6349),
                            Title = "Cihaz Bakımı!",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DebtAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PaidPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutPayments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 0m,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 95, DateTimeKind.Local).AddTicks(6694),
                            DebtAmount = 15000m,
                            Description = "TEST desc 1 ",
                            DueDate = new DateTime(2024, 2, 14, 14, 6, 20, 95, DateTimeKind.Local).AddTicks(6700),
                            IsActive = true,
                            IsDeleted = false,
                            IsPaid = true,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 95, DateTimeKind.Local).AddTicks(6695),
                            PaidPlace = "Ödemenin Yapılacağı yer"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OutPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OutPaymentId");

                    b.ToTable("OutPaymentDetails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1000m,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 95, DateTimeKind.Local).AddTicks(7956),
                            Description = "TEST desc 1 ",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 95, DateTimeKind.Local).AddTicks(7957),
                            OutPaymentId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ParamCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamValue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue5")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue6")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Parameter", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(9407),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(9408),
                            ParamCode = "SGKTutari",
                            ParamType = "Tutar Tipi 1",
                            ParamValue = "1000"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("AssociatedInstitutionId")
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedInstitutionsId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId1")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PaymentTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTypeId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedInstitutionId");

                    b.HasIndex("AssociatedInstitutionsId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PaymentTypeId1");

                    b.ToTable("Payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 95, DateTimeKind.Local).AddTicks(3836),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 95, DateTimeKind.Local).AddTicks(3837),
                            PaymentTypeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 95, DateTimeKind.Local).AddTicks(8180),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 95, DateTimeKind.Local).AddTicks(8180),
                            Title = "KK | POS"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 95, DateTimeKind.Local).AddTicks(8183),
                            Description = "Mail Order Payment",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 95, DateTimeKind.Local).AddTicks(8183),
                            Title = "Mail Order"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 95, DateTimeKind.Local).AddTicks(8185),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 95, DateTimeKind.Local).AddTicks(8186),
                            Title = "Peşin"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsProduct")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("ProductSubGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SubModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductSubGroupId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.HasIndex("SubModelId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(7255),
                            Description = "Ürün Grubu Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(7256),
                            Title = "Ürün Grubu 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductSubGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(8581),
                            Description = "Model Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(8582),
                            ProductGroupId = 1,
                            Title = "Model Başlığı"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Programs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5909),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5909),
                            ModuleId = 5,
                            Name = "EmployeeProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5911),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5912),
                            ModuleId = 5,
                            Name = "UserModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5914),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5915),
                            ModuleId = 7,
                            Name = "StockModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5918),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5919),
                            ModuleId = 6,
                            Name = "CustomerReferanceModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5921),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5922),
                            ModuleId = 1,
                            Name = "AppointmentModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5923),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5924),
                            ModuleId = 1,
                            Name = "NotificationModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5925),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5926),
                            ModuleId = 3,
                            Name = "PaymentProgram.Read"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5928),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5929),
                            ModuleId = 2,
                            Name = "CustomerProgram.Read"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5930),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5932),
                            ModuleId = 7,
                            Name = "BrandModule.Read"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5933),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5934),
                            ModuleId = 3,
                            Name = "SaleModule.Read"
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5935),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5936),
                            ModuleId = 7,
                            Name = "ProductProgram.Read"
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5938),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(5938),
                            ModuleId = 5,
                            Name = "RoleModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessLevel = 1,
                            ConcurrencyStamp = "217145e6-64e1-4b4b-9d6e-bc24253eeae2",
                            Definition = "SüperAdmin Yetkisi",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2,
                            AccessLevel = 1,
                            ConcurrencyStamp = "133d700b-616a-460d-840b-dc4422231bb2",
                            Definition = "Standart Kullanıcı Yetkisi",
                            Name = "DefaultUser",
                            NormalizedName = "DEFAULTUSER"
                        },
                        new
                        {
                            Id = 3,
                            AccessLevel = 1,
                            ConcurrencyStamp = "07717510-994f-4f0e-8fa5-1b1f283346d3",
                            Definition = "Developer Yetkisi",
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = 4,
                            AccessLevel = 3,
                            ConcurrencyStamp = "574d62aa-f38f-4884-a988-4f493106b5f8",
                            Definition = "Kullanıcı Ekleme Yetkisi",
                            Name = "User.Create",
                            NormalizedName = "USER.CREATE"
                        },
                        new
                        {
                            Id = 5,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ea6ec734-dcf4-4819-af61-227a32b547e3",
                            Definition = "Kullanıcı Görüntüleme Yetkisi",
                            Name = "User.Read",
                            NormalizedName = "USER.READ"
                        },
                        new
                        {
                            Id = 6,
                            AccessLevel = 3,
                            ConcurrencyStamp = "202fe52e-a026-4257-a61b-1d3fc355c6df",
                            Definition = "Kullanıcı Güncelleme Yetkisi",
                            Name = "User.Update",
                            NormalizedName = "USER.UPDATE"
                        },
                        new
                        {
                            Id = 7,
                            AccessLevel = 3,
                            ConcurrencyStamp = "36be63e8-f629-44c2-b1fa-1223549d482d",
                            Definition = "Kullanıcı Silme Yetkisi",
                            Name = "User.Delete",
                            NormalizedName = "USER.DELETE"
                        },
                        new
                        {
                            Id = 8,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ad13ac80-f587-47dd-a344-2b0b87905d9c",
                            Definition = "Rol Görüntüleme Yetkisi",
                            Name = "Role.Read",
                            NormalizedName = "ROLE.READ"
                        },
                        new
                        {
                            Id = 9,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f5672ddb-47c2-4853-a030-08528eef9142",
                            Definition = "Rol Güncelleme Yetkisi",
                            Name = "Role.Update",
                            NormalizedName = "ROLE.UPDATE"
                        },
                        new
                        {
                            Id = 10,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0ea1fd11-3c25-4225-8a73-5f0636e2fbd9",
                            Definition = "Rol Silme Yetkisi",
                            Name = "Role.Delete",
                            NormalizedName = "ROLE.DELETE"
                        },
                        new
                        {
                            Id = 11,
                            AccessLevel = 3,
                            ConcurrencyStamp = "92986cf1-20ff-464e-8c2b-ffb3e0ef6eba",
                            Definition = "Rol Ekleme Yetkisi",
                            Name = "Role.Create",
                            NormalizedName = "ROLE.CREATE"
                        },
                        new
                        {
                            Id = 12,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d48527bc-51db-46d8-9b38-746c41cb8479",
                            Definition = "Ödeme Ekleme Yetkisi",
                            Name = "Payment.Create",
                            NormalizedName = "PAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 13,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6589bbc7-3169-4f3a-8cc3-6917329513f1",
                            Definition = "Ödeme Görüntüleme Yetkisi",
                            Name = "Payment.Read",
                            NormalizedName = "PAYMENT.READ"
                        },
                        new
                        {
                            Id = 14,
                            AccessLevel = 3,
                            ConcurrencyStamp = "13cfb5a5-ac7e-440d-9e24-77c6a5df7edd",
                            Definition = "Ödeme Güncelleme Yetkisi",
                            Name = "Payment.Update",
                            NormalizedName = "PAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 15,
                            AccessLevel = 3,
                            ConcurrencyStamp = "364b8143-d60c-4540-abef-cff7054cf707",
                            Definition = "Ödeme Silme Yetkisi",
                            Name = "Payment.Delete",
                            NormalizedName = "PAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 16,
                            AccessLevel = 3,
                            ConcurrencyStamp = "742dc0fb-8029-43ca-92b3-d8e43d260f41",
                            Definition = "Ödeme Türü Ekleme Yetkisi",
                            Name = "PaymentType.Create",
                            NormalizedName = "PAYMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 17,
                            AccessLevel = 3,
                            ConcurrencyStamp = "596d2949-3270-45ae-b13a-d56dab2292f5",
                            Definition = "Ödeme Türü Görüntüleme Yetkisi",
                            Name = "PaymentType.Read",
                            NormalizedName = "PAYMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 18,
                            AccessLevel = 3,
                            ConcurrencyStamp = "33dc0a80-d0b0-4499-a1d9-5161a0be002d",
                            Definition = "Ödeme Türü Güncelleme Yetkisi",
                            Name = "PaymentType.Update",
                            NormalizedName = "PAYMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 19,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7aabb3db-7d50-43c2-8cfd-9300a802a0a1",
                            Definition = "Ödeme Türü Silme Yetkisi",
                            Name = "PaymentType.Delete",
                            NormalizedName = "PAYMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 20,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7bc64158-53c4-4cbe-8efd-165ff3c09ef1",
                            Definition = "Personel Ekleme Yetkisi",
                            Name = "Employee.Create",
                            NormalizedName = "EMPLOYEE.CREATE"
                        },
                        new
                        {
                            Id = 21,
                            AccessLevel = 3,
                            ConcurrencyStamp = "69d296a9-3917-4009-8fbf-9fb296daf88c",
                            Definition = "Personel Görüntüleme Yetkisi",
                            Name = "Employee.Read",
                            NormalizedName = "EMPLOYEE.READ"
                        },
                        new
                        {
                            Id = 22,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bf4fa51b-0c4e-42ab-bbe6-ae1e33b720da",
                            Definition = "Personel Güncelleme Yetkisi",
                            Name = "Employee.Update",
                            NormalizedName = "EMPLOYEE.UPDATE"
                        },
                        new
                        {
                            Id = 23,
                            AccessLevel = 3,
                            ConcurrencyStamp = "17968609-e989-4f89-a9e2-6af8a516a541",
                            Definition = "Personel Silme Yetkisi",
                            Name = "Employee.Delete",
                            NormalizedName = "EMPLOYEE.DELETE"
                        },
                        new
                        {
                            Id = 24,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3d51218a-b51f-4158-a9ed-664472bbcdbc",
                            Definition = "Personel Türü Ekleme Yetkisi",
                            Name = "EmployeeType.Create",
                            NormalizedName = "EMPLOYEETYPE.CREATE"
                        },
                        new
                        {
                            Id = 25,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1f7be72d-7313-41da-a70d-1c59953bb5d2",
                            Definition = "Personel Türü Görüntüleme Yetkisi",
                            Name = "EmployeeType.Read",
                            NormalizedName = "EMPLOYEETYPE.READ"
                        },
                        new
                        {
                            Id = 26,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c0d55f15-2cc9-48a8-8aba-6b3ccfd3b82e",
                            Definition = "Personel Türü Güncelleme Yetkisi",
                            Name = "EmployeeType.Update",
                            NormalizedName = "EMPLOYEETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 27,
                            AccessLevel = 3,
                            ConcurrencyStamp = "98280ac3-7e4b-42ef-b35f-5b50d8b80a71",
                            Definition = "Personel Türü Silme Yetkisi",
                            Name = "EmployeeType.Delete",
                            NormalizedName = "EMPLOYEETYPE.DELETE"
                        },
                        new
                        {
                            Id = 28,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f8444bb3-b059-4e7b-86ad-8940c0e39e3d",
                            Definition = "Müşteri Ekleme Yetkisi",
                            Name = "Customer.Create",
                            NormalizedName = "CUSTOMER.CREATE"
                        },
                        new
                        {
                            Id = 29,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c9c85a72-91ac-40a7-aaaf-cbfd495999af",
                            Definition = "Müşteri Görüntüleme Yetkisi",
                            Name = "Customer.Read",
                            NormalizedName = "CUSTOMER.READ"
                        },
                        new
                        {
                            Id = 30,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a64476b8-8927-46d1-8bf4-79feeb7d3d6a",
                            Definition = "Müşteri Güncelleme Yetkisi",
                            Name = "Customer.Update",
                            NormalizedName = "CUSTOMER.UPDATE"
                        },
                        new
                        {
                            Id = 31,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9862a960-185b-4ee7-950d-24fe06eea983",
                            Definition = "Müşteri Silme Yetkisi",
                            Name = "Customer.Delete",
                            NormalizedName = "CUSTOMER.DELETE"
                        },
                        new
                        {
                            Id = 32,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b9198d38-276a-45dc-aef3-72ebbd4369bf",
                            Definition = "Müşteri Tipi Ekleme Yetkisi",
                            Name = "CustomerType.Create",
                            NormalizedName = "CUSTOMERTYPE.CREATE"
                        },
                        new
                        {
                            Id = 33,
                            AccessLevel = 3,
                            ConcurrencyStamp = "abd627ba-4304-4473-a08a-3a0202984396",
                            Definition = "Müşteri Tipi Görüntüleme Yetkisi",
                            Name = "CustomerType.Read",
                            NormalizedName = "CUSTOMERTYPE.READ"
                        },
                        new
                        {
                            Id = 34,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b93586d1-827e-418e-b856-51ee2559f200",
                            Definition = "Müşteri Tipi Güncelleme Yetkisi",
                            Name = "CustomerType.Update",
                            NormalizedName = "CUSTOMERTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 35,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1088d9ef-49e9-4ad2-9e82-804ed4c744fc",
                            Definition = "Müşteri Tipi Silme Yetkisi",
                            Name = "CustomerType.Delete",
                            NormalizedName = "CUSTOMERTYPE.DELETE"
                        },
                        new
                        {
                            Id = 36,
                            AccessLevel = 3,
                            ConcurrencyStamp = "151126fa-b090-4659-ae77-1886ba4a7e08",
                            Definition = "Bildirim Ekleme Yetkisi",
                            Name = "Notification.Create",
                            NormalizedName = "NOTIFICATION.CREATE"
                        },
                        new
                        {
                            Id = 37,
                            AccessLevel = 3,
                            ConcurrencyStamp = "84d3410e-9479-468c-8ecf-7bae7b3ab647",
                            Definition = "Bildirim Görüntüleme Yetkisi",
                            Name = "Notification.Read",
                            NormalizedName = "NOTIFICATION.READ"
                        },
                        new
                        {
                            Id = 38,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6ebaf30f-d4f9-41b6-88d8-62c6fefe76a4",
                            Definition = "Bildirim Güncelleme Yetkisi",
                            Name = "Notification.Update",
                            NormalizedName = "NOTIFICATION.UPDATE"
                        },
                        new
                        {
                            Id = 39,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d4ed2c38-78fe-45be-8c02-bd90d134d8f0",
                            Definition = "Bildirim Silme Yetkisi",
                            Name = "Notification.Delete",
                            NormalizedName = "NOTIFICATION.DELETE"
                        },
                        new
                        {
                            Id = 40,
                            AccessLevel = 3,
                            ConcurrencyStamp = "34b87877-d22c-441a-9c38-68497253dc5b",
                            Definition = "Brand Ekleme Yetkisi",
                            Name = "Brand.Create",
                            NormalizedName = "BRAND.CREATE"
                        },
                        new
                        {
                            Id = 41,
                            AccessLevel = 3,
                            ConcurrencyStamp = "962805d1-462b-482b-b8b5-b0071cc6e368",
                            Definition = "Brand Görüntüleme Yetkisi",
                            Name = "Brand.Read",
                            NormalizedName = "BRAND.READ"
                        },
                        new
                        {
                            Id = 42,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7616398a-91b8-477d-9623-de293986b2c8",
                            Definition = "Brand Güncelleme Yetkisi",
                            Name = "Brand.Update",
                            NormalizedName = "BRAND.UPDATE"
                        },
                        new
                        {
                            Id = 43,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c6021f12-bad4-4dca-ab33-e471f63cb616",
                            Definition = "Brand Silme Yetkisi",
                            Name = "Brand.Delete",
                            NormalizedName = "BRAND.DELETE"
                        },
                        new
                        {
                            Id = 44,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e847fb16-7113-481c-b207-002239ba0d55",
                            Definition = "Brand Ekleme Yetkisi",
                            Name = "MessageToDeveloper.Create",
                            NormalizedName = "MESSAGETODEVELOPER.CREATE"
                        },
                        new
                        {
                            Id = 45,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ada01ef4-46b0-4039-b14f-0501fbd7f7d5",
                            Definition = "Brand  Yetkisi",
                            Name = "MessageToDeveloper.Read",
                            NormalizedName = "MESSAGETODEVELOPER.READ"
                        },
                        new
                        {
                            Id = 46,
                            AccessLevel = 3,
                            ConcurrencyStamp = "31917909-6df3-4f7e-be98-951da344fef5",
                            Definition = "Brand  Yetkisi",
                            Name = "MessageToDeveloper.Update",
                            NormalizedName = "MESSAGETODEVELOPER.UPDATE"
                        },
                        new
                        {
                            Id = 47,
                            AccessLevel = 3,
                            ConcurrencyStamp = "decf0392-0f8d-4fa4-8b84-e548f3a58d79",
                            Definition = "Brand  Yetkisi",
                            Name = "MessageToDeveloper.Delete",
                            NormalizedName = "MESSAGETODEVELOPER.DELETE"
                        },
                        new
                        {
                            Id = 48,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ca0b64d7-dbf4-4b4d-9d68-7d2d3a5f5537",
                            Definition = "Satış Durumu Ekleme Yetkisi",
                            Name = "SaleStatus.Create",
                            NormalizedName = "SALESTATUS.CREATE"
                        },
                        new
                        {
                            Id = 49,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1686808a-fb19-49c8-8f32-b4d6568da84e",
                            Definition = "Satış Durumu Görüntüleme Yetkisi",
                            Name = "SaleStatus.Read",
                            NormalizedName = "SALESTATUS.READ"
                        },
                        new
                        {
                            Id = 50,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0ff9e5b5-6f99-455c-b1da-8c960bd84b13",
                            Definition = "Satış Durumu Güncelleme Yetkisi",
                            Name = "SaleStatus.Update",
                            NormalizedName = "SALESTATUS.UPDATE"
                        },
                        new
                        {
                            Id = 51,
                            AccessLevel = 3,
                            ConcurrencyStamp = "15fc39df-1bc1-4c4b-8a5f-eb8846afe280",
                            Definition = "Satış Durumu Silme Yetkisi",
                            Name = "SaleStatus.Delete",
                            NormalizedName = "SALESTATUS.DELETE"
                        },
                        new
                        {
                            Id = 52,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e4a5309e-411e-4015-95b4-dd2d9a32b3a0",
                            Definition = "Satış Türü Ekleme Yetkisi",
                            Name = "SaleType.Create",
                            NormalizedName = "SALETYPE.CREATE"
                        },
                        new
                        {
                            Id = 53,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bbc94df7-99a8-4153-b424-a3b35595243f",
                            Definition = "Satış Türü Görüntüleme Yetkisi",
                            Name = "SaleType.Read",
                            NormalizedName = "SALETYPE.READ"
                        },
                        new
                        {
                            Id = 54,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f64c17a0-b1fd-4918-b2f9-742c5852b23f",
                            Definition = "Satış Türü Güncelleme Yetkisi",
                            Name = "SaleType.Update",
                            NormalizedName = "SALETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 55,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d79536f3-4f3a-4bf2-930d-1c7de131a3ab",
                            Definition = "Satış Türü Silme Yetkisi",
                            Name = "SaleType.Delete",
                            NormalizedName = "SALETYPE.DELETE"
                        },
                        new
                        {
                            Id = 56,
                            AccessLevel = 3,
                            ConcurrencyStamp = "adc83f12-7f80-4a4c-8f2a-c7138d66f3c5",
                            Definition = "Ürün Grubu Ekleme Yetkisi",
                            Name = "ProductGroup.Create",
                            NormalizedName = "PRODUCTGROUP.CREATE"
                        },
                        new
                        {
                            Id = 57,
                            AccessLevel = 3,
                            ConcurrencyStamp = "32ef0712-fd4b-4a2b-a93c-f05471a22a47",
                            Definition = "Ürün Grubu Görüntüleme Yetkisi",
                            Name = "ProductGroup.Read",
                            NormalizedName = "PRODUCTGROUP.READ"
                        },
                        new
                        {
                            Id = 58,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b3b23fb3-827a-42b5-9bcf-3c4bbf8a6dcc",
                            Definition = "Ürün Grubu Güncelleme Yetkisi",
                            Name = "ProductGroup.Update",
                            NormalizedName = "PRODUCTGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 59,
                            AccessLevel = 3,
                            ConcurrencyStamp = "fbe51c11-2404-42fb-bf5d-178064bf036f",
                            Definition = "Ürün Grubu Silme Yetkisi",
                            Name = "ProductGroup.Delete",
                            NormalizedName = "PRODUCTGROUP.DELETE"
                        },
                        new
                        {
                            Id = 60,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2e9309f3-272f-4e6a-9795-8823dbbdd95a",
                            Definition = "Model Ekleme Yetkisi",
                            Name = "ProductSubGroup.Create",
                            NormalizedName = "PRODUCTSUBGROUP.CREATE"
                        },
                        new
                        {
                            Id = 61,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3b25da8e-4394-468f-bff5-33d55220eb5f",
                            Definition = "Model Görüntüleme Yetkisi",
                            Name = "ProductSubGroup.Read",
                            NormalizedName = "PRODUCTSUBGROUP.READ"
                        },
                        new
                        {
                            Id = 62,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ab14baff-4090-4052-963f-2138e7c378ba",
                            Definition = "Model Güncelleme Yetkisi",
                            Name = "ProductSubGroup.Update",
                            NormalizedName = "PRODUCTSUBGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 63,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5f056cf3-3af8-49ed-bff5-49034e157a18",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "ProductSubGroup.Delete",
                            NormalizedName = "PRODUCTSUBGROUP.DELETE"
                        },
                        new
                        {
                            Id = 64,
                            AccessLevel = 3,
                            ConcurrencyStamp = "553dc579-918d-4450-a83e-0e4d772c2280",
                            Definition = "Randevu Türü Ekleme Yetkisi",
                            Name = "AppointmentType.Create",
                            NormalizedName = "APPOINTMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 65,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b06f3e5c-1a5c-45d5-942d-63e5b248c94f",
                            Definition = "Randevu Türü Görüntüleme Yetkisi",
                            Name = "AppointmentType.Read",
                            NormalizedName = "APPOINTMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 66,
                            AccessLevel = 3,
                            ConcurrencyStamp = "489f343b-bf83-4391-b229-223f1a22f738",
                            Definition = "Randevu Türü Güncelleme Yetkisi",
                            Name = "AppointmentType.Update",
                            NormalizedName = "APPOINTMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 67,
                            AccessLevel = 3,
                            ConcurrencyStamp = "09232585-faae-41e7-ab3c-3fdcf08a0051",
                            Definition = "Randevu Türü Silme Yetkisi",
                            Name = "AppointmentType.Delete",
                            NormalizedName = "APPOINTMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 68,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f91e7b39-4ce1-4f02-9e31-f104a31558cb",
                            Definition = "Satış Oluşturma Yetkisi",
                            Name = "Sale.Create",
                            NormalizedName = "SALE.CREATE"
                        },
                        new
                        {
                            Id = 69,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d9fb295e-cc2d-4ebe-9ee3-6125afd9b4fd",
                            Definition = "Satış Görüntüleme Yetkisi",
                            Name = "Sale.Read",
                            NormalizedName = "SALE.READ"
                        },
                        new
                        {
                            Id = 70,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d1628867-5250-4268-80af-e9e939b77f2d",
                            Definition = "Satış Güncelleme Yetkisi",
                            Name = "Sale.Update",
                            NormalizedName = "SALE.UPDATE"
                        },
                        new
                        {
                            Id = 71,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7132d049-bdd8-4ffc-b26c-5ce159a7fa88",
                            Definition = "Satış Silme Yetkisi",
                            Name = "Sale.Delete",
                            NormalizedName = "SALE.DELETE"
                        },
                        new
                        {
                            Id = 72,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d551778e-ad92-47a8-8ff0-4409503dfcb1",
                            Definition = "Ürün Ekleme Yetkisi",
                            Name = "Product.Create",
                            NormalizedName = "PRODUCT.CREATE"
                        },
                        new
                        {
                            Id = 73,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8794d93e-e0da-4e82-a822-433241dc0fcb",
                            Definition = "Ürün Görüntüleme Yetkisi",
                            Name = "Product.Read",
                            NormalizedName = "PRODUCT.READ"
                        },
                        new
                        {
                            Id = 74,
                            AccessLevel = 3,
                            ConcurrencyStamp = "cdbaa625-cfe2-4596-b4ad-d53e9a332db3",
                            Definition = "Ürün Güncelleme Yetkisi",
                            Name = "Product.Update",
                            NormalizedName = "PRODUCT.UPDATE"
                        },
                        new
                        {
                            Id = 75,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b68c2df5-52c4-48e3-bf91-7f97e1c03ca5",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "Product.Delete",
                            NormalizedName = "PRODUCT.DELETE"
                        },
                        new
                        {
                            Id = 76,
                            AccessLevel = 3,
                            ConcurrencyStamp = "209c6632-f127-4f0e-9990-53fc00d452d9",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "Appointment.Create",
                            NormalizedName = "APPOINTMENT.CREATE"
                        },
                        new
                        {
                            Id = 77,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1558f9b8-480c-4057-bdc2-b67a7d344e05",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "Appointment.Read",
                            NormalizedName = "APPOINTMENT.READ"
                        },
                        new
                        {
                            Id = 78,
                            AccessLevel = 3,
                            ConcurrencyStamp = "89bcb64e-76e2-4409-a476-eda68d4faf4c",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "Appointment.Update",
                            NormalizedName = "APPOINTMENT.UPDATE"
                        },
                        new
                        {
                            Id = 79,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6d147bc7-c08a-4d2c-aa5f-ab91885b368c",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "Appointment.Delete",
                            NormalizedName = "APPOINTMENT.DELETE"
                        },
                        new
                        {
                            Id = 80,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1746101a-78bf-43fa-806d-51f2a4d8b712",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "OutPayment.Create",
                            NormalizedName = "OUTPAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 81,
                            AccessLevel = 3,
                            ConcurrencyStamp = "61c38a48-8880-46a8-bfb8-1af1f225a126",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "OutPayment.Read",
                            NormalizedName = "OUTPAYMENT.READ"
                        },
                        new
                        {
                            Id = 82,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0151b087-4a74-45d2-9077-25abc3f9d663",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "OutPayment.Update",
                            NormalizedName = "OUTPAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 83,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8192a934-4e87-40bc-8ad8-9a31c6474f76",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "OutPayment.Delete",
                            NormalizedName = "OUTPAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 84,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c092f222-ca33-46c9-98a3-b0ae2e1ac003",
                            Definition = "Dış Ödeme Detayı Oluşturma Yetkisi",
                            Name = "OutPaymentDetail.Create",
                            NormalizedName = "OUTPAYMENTDETAIL.CREATE"
                        },
                        new
                        {
                            Id = 85,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a44d2613-2202-4a3a-b560-bd9e9de7b881",
                            Definition = "Dış Ödeme Detayı Görüntüleme Yetkisi",
                            Name = "OutPaymentDetail.Read",
                            NormalizedName = "OUTPAYMENTDETAIL.READ"
                        },
                        new
                        {
                            Id = 86,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c6a4a70c-e45b-4297-9ff5-ec5d69d5b025",
                            Definition = "Dış Ödeme Detayı Güncelleme Yetkisi",
                            Name = "OutPaymentDetail.Update",
                            NormalizedName = "OUTPAYMENTDETAIL.UPDATE"
                        },
                        new
                        {
                            Id = 87,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ea2a11ad-548c-425e-bcde-9b46f616bf2a",
                            Definition = "Dış Ödeme Detayı Silme Yetkisi",
                            Name = "OutPaymentDetail.Delete",
                            NormalizedName = "OUTPAYMENTDETAIL.DELETE"
                        },
                        new
                        {
                            Id = 88,
                            AccessLevel = 2,
                            ConcurrencyStamp = "df1a35b0-371a-4c04-a3e4-027039f55e43",
                            Definition = "Markalar Programı Görüntüleme",
                            Name = "EmployeeProgram.Read",
                            NormalizedName = "EMPLOYEEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 89,
                            AccessLevel = 2,
                            ConcurrencyStamp = "566d5870-b076-4481-a57f-c23d088272b2",
                            Definition = "Randevular Programı Görüntüleme",
                            Name = "InstitutionalProgram.Read",
                            NormalizedName = "INSTITUTIONALPROGRAM.READ"
                        },
                        new
                        {
                            Id = 90,
                            AccessLevel = 2,
                            ConcurrencyStamp = "f2df181b-be93-4de9-a37b-dddcfef7d634",
                            Definition = "Hastalar Programı Görüntüleme",
                            Name = "CustomerProgram.Read",
                            NormalizedName = "CUSTOMERPROGRAM.READ"
                        },
                        new
                        {
                            Id = 91,
                            AccessLevel = 2,
                            ConcurrencyStamp = "13936c8d-d1cb-4a4c-98f2-fe8f625adb5f",
                            Definition = "Referanslar Programı Görüntüleme",
                            Name = "PaymentProgram.Read",
                            NormalizedName = "PAYMENTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 92,
                            AccessLevel = 2,
                            ConcurrencyStamp = "611a4eec-411f-483c-bac8-ffa526687e01",
                            Definition = "Ürünler Programı Görüntüleme",
                            Name = "ProductProgram.Read",
                            NormalizedName = "PRODUCTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 93,
                            AccessLevel = 2,
                            ConcurrencyStamp = "5e21ad48-6f74-488c-8e41-27f23be35d99",
                            Definition = "Roller Programı Görüntüleme",
                            Name = "MarketingProgram.Read",
                            NormalizedName = "MARKETINGPROGRAM.READ"
                        },
                        new
                        {
                            Id = 94,
                            AccessLevel = 2,
                            ConcurrencyStamp = "6a0a34e2-282d-4d49-863c-0d097170e0a3",
                            Definition = "Satışlar Programı Görüntüleme",
                            Name = "AgendaProgram.Read",
                            NormalizedName = "AGENDAPROGRAM.READ"
                        },
                        new
                        {
                            Id = 95,
                            AccessLevel = 2,
                            ConcurrencyStamp = "f749ff12-ed37-447f-887d-bf2317bb4500",
                            Definition = "Stok Programı Görüntüleme",
                            Name = "FinanceProgram.Read",
                            NormalizedName = "FINANCEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 96,
                            AccessLevel = 1,
                            ConcurrencyStamp = "828fc7c5-5bc2-477c-a8d8-e05e82965cca",
                            Definition = "Anasayfa Görüntüleme Yetkisi",
                            Name = "HomeProgram.Read",
                            NormalizedName = "HOMEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 97,
                            AccessLevel = 1,
                            ConcurrencyStamp = "d5147156-0743-4660-9d16-5645d5e4c571",
                            Definition = "Stok Modülü Görüntüleme",
                            Name = "StockModule.Read",
                            NormalizedName = "StockModule.Read"
                        },
                        new
                        {
                            Id = 98,
                            AccessLevel = 1,
                            ConcurrencyStamp = "88f03f96-ca03-4f0a-9f68-6a674870d024",
                            Definition = "Personel Tipleri Modülü Görüntüleme",
                            Name = "EmployeeTypeModule.Read",
                            NormalizedName = "EMPLOYEETYPEMODULE.READ"
                        },
                        new
                        {
                            Id = 99,
                            AccessLevel = 1,
                            ConcurrencyStamp = "bebcc65f-7544-40c5-acb9-330bf1871881",
                            Definition = "Personeller Modülü Görüntüleme",
                            Name = "EmployeeModule.Read",
                            NormalizedName = "EMPLOYEEMODULE.READ"
                        },
                        new
                        {
                            Id = 100,
                            AccessLevel = 1,
                            ConcurrencyStamp = "abcd8ab7-1cb1-46b5-a8df-772000bafca0",
                            Definition = "Kullanıcılar Modülü Görüntüleme",
                            Name = "UserModule.Read",
                            NormalizedName = "USERMODULE.READ"
                        },
                        new
                        {
                            Id = 101,
                            AccessLevel = 1,
                            ConcurrencyStamp = "8125c348-ab5f-4104-8cef-f3a80934adf1",
                            Definition = "Hastalar Modülü Görüntüleme",
                            Name = "CustomerModule.Read",
                            NormalizedName = "CUSTOMERMODULE.READ"
                        },
                        new
                        {
                            Id = 102,
                            AccessLevel = 1,
                            ConcurrencyStamp = "b73978fb-27b4-4d81-958b-edeaae88dae6",
                            Definition = "HAsta Tipleri Modülü Görüntüleme",
                            Name = "CustomerTypeModule.Read",
                            NormalizedName = "CUSTOMERTYPEMODULE.READ"
                        },
                        new
                        {
                            Id = 103,
                            AccessLevel = 1,
                            ConcurrencyStamp = "bbd9a099-6891-49b3-8097-3c53ae9f69ac",
                            Definition = "Ürünler Modülü Yetkisi",
                            Name = "ProductModule.Read",
                            NormalizedName = "PRODUCTMODULE.READ"
                        },
                        new
                        {
                            Id = 104,
                            AccessLevel = 1,
                            ConcurrencyStamp = "2ea0bff7-c0e6-4216-9a69-b554cf8260d4",
                            Definition = "Ürün Grupları Modülü Yetkisi",
                            Name = "ProductGroupModule.Read",
                            NormalizedName = "PRODUCTGROUPMODULE.READ"
                        },
                        new
                        {
                            Id = 105,
                            AccessLevel = 1,
                            ConcurrencyStamp = "87145165-89b5-420d-bae0-d7140fc4277f",
                            Definition = "Ürün Alt Grupları Modülü Yetkisi",
                            Name = "ProductSubGroupModule.Read",
                            NormalizedName = "PRODUCTSUBGROUPMODULE.READ"
                        },
                        new
                        {
                            Id = 106,
                            AccessLevel = 1,
                            ConcurrencyStamp = "c26d90a7-201f-432f-9157-08b8eea78485",
                            Definition = "Markalar Modülü Yetkisi",
                            Name = "BrandModule.Read",
                            NormalizedName = "BRANDMODULE.READ"
                        },
                        new
                        {
                            Id = 107,
                            AccessLevel = 1,
                            ConcurrencyStamp = "6caece13-0f0c-4f57-b5eb-864eabdb18dc",
                            Definition = "Hasta Referanları Modülü Yetkisi",
                            Name = "CustomerReferanceModule.Read",
                            NormalizedName = "CUSTOMERREFERANCEMODULE.READ"
                        },
                        new
                        {
                            Id = 108,
                            AccessLevel = 1,
                            ConcurrencyStamp = "15afdeae-882a-4a36-a591-ebfa5c125d89",
                            Definition = "Randevular Modülü Yetkisi",
                            Name = "AppointmentModule.Read",
                            NormalizedName = "APPOINTMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 109,
                            AccessLevel = 1,
                            ConcurrencyStamp = "efd4b09e-f52c-4b0b-a967-65c92a09f532",
                            Definition = "Bildirimler Modülü Yetkisi",
                            Name = "NotificationModule.Read",
                            NormalizedName = "NOTIFICATIONMODULE.READ"
                        },
                        new
                        {
                            Id = 110,
                            AccessLevel = 1,
                            ConcurrencyStamp = "f93db391-6fe6-44ea-aece-16cd08d38a1b",
                            Definition = "Dış Ödemeler Modülü Yetkisi",
                            Name = "OutPaymentModule.Read",
                            NormalizedName = "OUTPAYMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 111,
                            AccessLevel = 1,
                            ConcurrencyStamp = "77b88731-024a-4623-952f-d205c92e099f",
                            Definition = "Satışlar Modülü Yetkisi",
                            Name = "SaleModule.Read",
                            NormalizedName = "SALEMODULE.READ"
                        },
                        new
                        {
                            Id = 112,
                            AccessLevel = 1,
                            ConcurrencyStamp = "9b726163-a5fd-4321-9db6-b70bd69fcbf0",
                            Definition = "Gelen Ödemeler Modülü Yetkisi",
                            Name = "PaymentModule.Read",
                            NormalizedName = "PAYMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 113,
                            AccessLevel = 1,
                            ConcurrencyStamp = "d43a74e6-768a-47ae-984b-05784ed3d798",
                            Definition = "Gelir Giderler Modülü Yetkisi",
                            Name = "ExpenseModule.Read",
                            NormalizedName = "EXPENSEMODULE.READ"
                        },
                        new
                        {
                            Id = 114,
                            AccessLevel = 1,
                            ConcurrencyStamp = "3c8069c5-8514-4583-9a0a-8726d7d92b15",
                            Definition = "Roller Modülü Yetkisi",
                            Name = "RoleModule.Read",
                            NormalizedName = "ROLEMODULE.READ"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountOfSgk")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DownPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvoiceDue")
                        .HasColumnType("bit");

                    b.Property<int>("IsProduct")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SaleStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SgkId")
                        .HasColumnType("int");

                    b.Property<string>("SgkTypeTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedSaleDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("SaleStatusId");

                    b.HasIndex("SaleTypeId");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SaleStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(9344),
                            Description = "açıklama deneme status sale 1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 96, DateTimeKind.Local).AddTicks(9345),
                            Title = "Satış Aşamasında"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SaleTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(4376),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(4376),
                            Title = "Nakit"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("Stocks", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortBy")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("SubModels", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("SubPrograms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6376),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6378),
                            Name = "User.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6380),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6380),
                            Name = "User.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6382),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6383),
                            Name = "User.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6384),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6385),
                            Name = "User.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 14,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6387),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6387),
                            Name = "Role.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6389),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6389),
                            Name = "Role.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6391),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6391),
                            Name = "Role.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6393),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6393),
                            Name = "Role.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 37,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6395),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6396),
                            Name = "Payment.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 38,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6397),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6398),
                            Name = "Payment.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 39,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6400),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6400),
                            Name = "Payment.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 40,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6402),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6402),
                            Name = "Payment.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 41,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6404),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6405),
                            Name = "PaymentType.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 42,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6406),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6407),
                            Name = "PaymentType.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 43,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6408),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6409),
                            Name = "PaymentType.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 44,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6410),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6411),
                            Name = "PaymentType.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 45,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6413),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6413),
                            Name = "Employee.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 46,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6415),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6415),
                            Name = "Employee.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 47,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6417),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6417),
                            Name = "Employee.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 48,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6419),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6419),
                            Name = "Employee.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 49,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6421),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6422),
                            Name = "EmployeeType.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 50,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6423),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6424),
                            Name = "EmployeeType.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 51,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6425),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6426),
                            Name = "EmployeeType.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 52,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6427),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6428),
                            Name = "EmployeeType.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 53,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6430),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6430),
                            Name = "Customer.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 54,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6432),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6432),
                            Name = "Customer.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 55,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6434),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6434),
                            Name = "Customer.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 56,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6436),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6436),
                            Name = "Customer.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 57,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6479),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6479),
                            Name = "CustomerType.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 58,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6481),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6482),
                            Name = "CustomerType.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 59,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6483),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6484),
                            Name = "CustomerType.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 60,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6486),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6486),
                            Name = "CustomerType.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 61,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6488),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6488),
                            Name = "Notification.Create",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 62,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6490),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6491),
                            Name = "Notification.Read",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 63,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6492),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6493),
                            Name = "Notification.Update",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 64,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6495),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6496),
                            Name = "Notification.Delete",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 65,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6498),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6498),
                            Name = "Brand.Create",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 66,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6500),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6500),
                            Name = "Brand.Update",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 67,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6503),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6504),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 85,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6506),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6507),
                            Name = "Brand.Read",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 68,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6508),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6509),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 69,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6511),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6511),
                            Name = "SaleStatus.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 70,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6514),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6514),
                            Name = "SaleStatus.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 71,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6516),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6516),
                            Name = "SaleStatus.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 72,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6518),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6518),
                            Name = "SaleStatus.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 73,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6520),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6521),
                            Name = "SaleType.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 74,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6522),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6523),
                            Name = "SaleType.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 75,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6524),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6525),
                            Name = "SaleType.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 76,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6526),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6527),
                            Name = "SaleType.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 77,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6528),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6529),
                            Name = "ProductGroup.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 78,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6530),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6531),
                            Name = "ProductGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 79,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6533),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6533),
                            Name = "ProductGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 80,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6535),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6535),
                            Name = "ProductGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 81,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6537),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6537),
                            Name = "ProductSubGroup.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 82,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6539),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6539),
                            Name = "ProductSubGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 83,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6541),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6541),
                            Name = "ProductSubGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 84,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6543),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6544),
                            Name = "ProductSubGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 89,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6545),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6546),
                            Name = "AppointmentType.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 90,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6547),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6548),
                            Name = "AppointmentType.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 91,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6549),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6550),
                            Name = "AppointmentType.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 92,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6551),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6552),
                            Name = "AppointmentType.Delete",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 93,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6553),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6554),
                            Name = "Sale.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 94,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6556),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6557),
                            Name = "Sale.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 95,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6558),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6559),
                            Name = "Sale.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 96,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6560),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6561),
                            Name = "Sale.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 97,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6562),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6563),
                            Name = "Product.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 98,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6564),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6565),
                            Name = "Product.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 99,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6567),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6567),
                            Name = "Product.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 100,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6569),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6569),
                            Name = "Product.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 101,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6571),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6571),
                            Name = "Appointment.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 102,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6573),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6573),
                            Name = "Appointment.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 103,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6575),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6575),
                            Name = "Appointment.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 104,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6577),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 97, DateTimeKind.Local).AddTicks(6578),
                            Name = "Appointment.Delete",
                            ProgramId = 5
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Link")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Admin | Bilal",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6029d6f-4738-4b85-8193-05190113027b",
                            Email = "bilalAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bilal",
                            Institution = "Fokus",
                            LastName = "Meto",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "BILALADMIN@GMAIL.COM",
                            NormalizedUserName = "BILALADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJHEUankP4fNln4TaooxE7V7+OxY/tWTW5+dTgsUrKU1BftWVG/f8HPG7y+uOftd9g==",
                            PhoneNumber = "+905537314131",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "b71769c9-53cc-4e65-91ac-d7063cda260d",
                            TwoFactorEnabled = false,
                            UserName = "bilalAdmin"
                        },
                        new
                        {
                            Id = 2,
                            About = "Admin | Nazlı",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "849b0bf1-378a-4ee7-9b4c-be84c6629f5e",
                            Email = "nazliAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nazlı",
                            Institution = "Fokus",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "NAZLIADMIN@GMAIL.COM",
                            NormalizedUserName = "NAZLIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEC7yEH/sd2zVgK8/UYrGLoxNC5hs+01quZNT51To4hFw/Zvkz16/q6UeLiqFPvhOdg==",
                            PhoneNumber = "+905398815246",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "92240225-480f-4dfd-b8b7-616ddac4644e",
                            TwoFactorEnabled = false,
                            UserName = "nazliAdmin"
                        },
                        new
                        {
                            Id = 3,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1aaa995d-ffc1-488d-a5f4-d73ee6770fc6",
                            Email = "sema@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sema",
                            Institution = "Fokus",
                            LastName = "-",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEMA@GMAIL.COM",
                            NormalizedUserName = "SEMA",
                            PasswordHash = "AQAAAAEAACcQAAAAEOy3V4KG4wh5laxNjoInVSdvU8GJjc/5Dskbmmew5R5GMRC88s2DigSu7VRjSet7LQ==",
                            PhoneNumber = "+905071273567",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "e0e50094-fce0-40bb-b2f2-e55057ec0b18",
                            TwoFactorEnabled = false,
                            UserName = "sema"
                        },
                        new
                        {
                            Id = 4,
                            About = "Geliştirici",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4315775a-795f-4752-aa68-4fcccd191de4",
                            Email = "x@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bedirhan",
                            Institution = "Dev",
                            LastName = "Gündöner",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "X@GMAIL.COM",
                            NormalizedUserName = "DEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEFsnHw9//hstVx3GF62aJtGPkb7/RwBZj9D6Q+ocGqn7ufwn3VqbLkqdKTzqL+UaAA==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "386aff34-6ecd-428a-9f54-65897f9824bf",
                            TwoFactorEnabled = false,
                            UserName = "dev"
                        },
                        new
                        {
                            Id = 5,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "147b3e7e-8bec-4edc-8ca9-4b01924886e3",
                            Email = "berra@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Berra",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERRA@GMAIL.COM",
                            NormalizedUserName = "BERRA",
                            PasswordHash = "AQAAAAEAACcQAAAAEL91UfMPAqYXwpHl7CD9JWCc2cyRMErQ2u4eQHDCGJTnDrO+5LfFOr4r1+Tzt8Nx0g==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "df0a17fc-b52a-4032-a7b2-f5d1426836ec",
                            TwoFactorEnabled = false,
                            UserName = "berra"
                        },
                        new
                        {
                            Id = 6,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8420e3eb-c768-4280-b51b-eb9aa62af1f3",
                            Email = "Elif@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elif",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF@GMAIL.COM",
                            NormalizedUserName = "ELIF",
                            PasswordHash = "AQAAAAEAACcQAAAAEMyUP7Y36+8K+h5NF+6ecl4QxMJ0M1OlqPophyNV9WBGIBdT5eRH6FiSQD9uDclO6A==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "368adb11-4d3d-46f7-b365-0d5d9c12e586",
                            TwoFactorEnabled = false,
                            UserName = "Elif"
                        },
                        new
                        {
                            Id = 7,
                            About = "Admin | Bilal",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c5ab9a70-8633-4ecf-9683-10efd3340c34",
                            Email = "esmaAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esma",
                            Institution = "Ases",
                            LastName = "Meto",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESMAADMIN@GMAIL.COM",
                            NormalizedUserName = "ESMAADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDkQjUKfrou3vUtoHPoFS48/E99AviIj0WKTOgfLxKImFFRkP/zjIEn/UyjD4lulJw==",
                            PhoneNumber = "+905537314131",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "9ef29505-efc9-449a-9144-bd9edc7e74b5",
                            TwoFactorEnabled = false,
                            UserName = "esmaAdmin"
                        },
                        new
                        {
                            Id = 8,
                            About = "Admin | Nazlı",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9934f47-345b-4238-9458-b8c633bc5523",
                            Email = "asiyeAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Asiye",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASIYEADMIN@GMAIL.COM",
                            NormalizedUserName = "ASIYEADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHo7+i/5Xx39POLhjZAMuUUVtRM2V8SEA5dHm0s9meWcNo8mIBrWYUFeulm/cJW20Q==",
                            PhoneNumber = "+905398815246",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "e8565794-1562-4777-8af2-b2d822ed5f87",
                            TwoFactorEnabled = false,
                            UserName = "asiyeAdmin"
                        },
                        new
                        {
                            Id = 10,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d744841-45be-4a4c-ac3c-599af403005f",
                            Email = "yeliz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Yeliz",
                            Institution = "Ases",
                            LastName = "Kılıç",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "YELIZ@GMAIL.COM",
                            NormalizedUserName = "YELIZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEMmpzz3CL/uBlqVf9C2RiIbG0U4NzOpzy++O7w9gZkoPT1axpiCEZKTvNvxrvf/Kxg==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "6f8ea38d-3bd8-4c17-8953-eb3c12582638",
                            TwoFactorEnabled = false,
                            UserName = "yeliz"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5635),
                            Description = "C# Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5636),
                            Name = "C#",
                            Note = "C# Blog Kategorisi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5639),
                            Description = "C++ Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5639),
                            Name = "C++",
                            Note = "C++ Blog Kategorisi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5641),
                            Description = "JavaScript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5642),
                            Name = "JavaScript",
                            Note = "JavaScript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5643),
                            Description = "Typescript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5644),
                            Name = "Typescript",
                            Note = "Typescript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5646),
                            Description = "Java Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5646),
                            Name = "Java",
                            Note = "Java Blog Kategorisi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5648),
                            Description = "Python Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5649),
                            Name = "Python",
                            Note = "Python Blog Kategorisi"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5650),
                            Description = "Php Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5651),
                            Name = "Php",
                            Note = "Php Blog Kategorisi"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5653),
                            Description = "Kotlin Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5653),
                            Name = "Kotlin",
                            Note = "Kotlin Blog Kategorisi"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5655),
                            Description = "Swift Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5655),
                            Name = "Swift",
                            Note = "Swift Blog Kategorisi"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5657),
                            Description = "Ruby Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 81, DateTimeKind.Local).AddTicks(5658),
                            Name = "Ruby",
                            Note = "Ruby Blog Kategorisi"
                        });
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 10, 14, 6, 20, 82, DateTimeKind.Local).AddTicks(1935),
                            Description = "Product Kategori 2 Açıkama",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 10, 14, 6, 20, 82, DateTimeKind.Local).AddTicks(1936),
                            Name = "Product Kategori 1",
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany("Appointments")
                        .HasForeignKey("UserId");

                    b.Navigation("AppointmentType");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.HasOne("MyBlog.Shared.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany("AssociatedInstitutions")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferance", "CustomerReferance")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerReferanceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Customers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferance");

                    b.Navigation("CustomerType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferanceTitle", "CustomerReferanceTitle")
                        .WithMany("CustomersReferances")
                        .HasForeignKey("CustomerReferanceTitleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferanceTitle");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Model", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Notifications")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPaymentDetail", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("outPaymentDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.OutPayment", "OutPayment")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("OutPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("OutPayment");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", null)
                        .WithMany("Payments")
                        .HasForeignKey("AssociatedInstitutionId");

                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", "AssociatedInstitutions")
                        .WithMany()
                        .HasForeignKey("AssociatedInstitutionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", null)
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId1");

                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Brand", null)
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("MyBlog.Entities.Concrete.Model", "Model")
                        .WithMany("Products")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Shared.Entities.Concrete.ProductCategory", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("MyBlog.Entities.Concrete.ProductSubGroup", "ProductSubGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SubModel", "SubModel")
                        .WithMany("Products")
                        .HasForeignKey("SubModelId");

                    b.Navigation("Model");

                    b.Navigation("ProductSubGroup");

                    b.Navigation("SubModel");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.ProductGroup", "ProductGroup")
                        .WithMany("ProductSubGroups")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Module", "Module")
                        .WithMany("Programs")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId");

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Sales")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Sale")
                        .HasForeignKey("MyBlog.Entities.Concrete.Sale", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.SaleStatus", "SaleStatus")
                        .WithMany("Sales")
                        .HasForeignKey("SaleStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SaleType", "SaleType")
                        .WithMany("Sales")
                        .HasForeignKey("SaleTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Product");

                    b.Navigation("SaleStatus");

                    b.Navigation("SaleType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("MyBlog.Entities.Concrete.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubModel", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Program", "Program")
                        .WithMany("SubPrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Navigation("Models");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferanceTitle", b =>
                {
                    b.Navigation("CustomersReferances");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Customers");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");

                    b.Navigation("outPaymentDetails");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Model", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPayment", b =>
                {
                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Navigation("ProductSubGroups");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Navigation("SubPrograms");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubModel", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Articles");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
