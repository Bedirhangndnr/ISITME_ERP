// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.Data.Concrete.EntityFramework.Context;

#nullable disable

namespace MyBlog.Data.Migrations
{
    [DbContext(typeof(MyBlogContext))]
    partial class MyBlogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMade")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTypeId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(6700),
                            CustomerId = 1,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama2",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(6701),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentTypeId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(6706),
                            CustomerId = 2,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(6707),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentTypeId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(6709),
                            CustomerId = 3,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama3",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(6710),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(2582),
                            Description = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(2583),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Test"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(2585),
                            Description = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(2586),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CommentCount = 0,
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9746),
                            Date = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9745),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9747),
                            Note = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoTags = "C#, C# 9, .NET5, .NET Framework, .NET Core",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C# 9.0 ve .NET 5 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CommentCount = 0,
                            Content = "Yinelenen bir sayfa içeriğinin okuyucunun dikkatini dağıttığı bilinen bir gerçektir. Lorem Ipsum kullanmanın amacı, sürekli 'buraya metin gelecek, buraya metin gelecek' yazmaya kıyasla daha dengeli bir harf dağılımı sağlayarak okunurluğu artırmasıdır. Şu anda birçok masaüstü yayıncılık paketi ve web sayfa düzenleyicisi, varsayılan mıgır metinler olarak Lorem Ipsum kullanmaktadır. Ayrıca arama motorlarında 'lorem ipsum' anahtar sözcükleri ile arama yapıldığında henüz tasarım aşamasında olan çok sayıda site listelenir. Yıllar içinde, bazen kazara, bazen bilinçli olarak (örneğin mizah katılarak), çeşitli sürümleri geliştirilmiştir.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9751),
                            Date = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9750),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9752),
                            Note = "C++ 11 ve 19 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C++ 11 ve 19 Yenilikleri",
                            SeoTags = "C++ 11 ve 19 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C++ 11 ve 19 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 295
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9755),
                            Date = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9754),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9756),
                            Note = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoTags = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 12
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CommentCount = 0,
                            Content = "É um facto estabelecido de que um leitor é distraído pelo conteúdo legível de uma página quando analisa a sua mancha gráfica. Logo, o uso de Lorem Ipsum leva a uma distribuição mais ou menos normal de letras, ao contrário do uso de 'Conteúdo aqui,conteúdo aqui'', tornando-o texto legível. Muitas ferramentas de publicação electrónica e editores de páginas web usam actualmente o Lorem Ipsum como o modelo de texto usado por omissão, e uma pesquisa por 'lorem ipsum' irá encontrar muitos websites ainda na sua infância. Várias versões têm evoluído ao longo dos anos, por vezes por acidente, por vezes propositadamente (como no caso do humor).",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9759),
                            Date = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9758),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9760),
                            Note = "Typescript 4.1 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Typescript 4.1, Typescript, TYPESCRIPT 2021",
                            SeoTags = "Typescript 4.1 Güncellemeleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Typescript 4.1",
                            UserId = 1,
                            ViewsCount = 666
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9763),
                            Date = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9763),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9764),
                            Note = "JAVA",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Java, Android, Mobile, Kotlin, Uygulama Geliştirme",
                            SeoTags = "Java, Mobil, Kotlin, Android, IOS, SWIFT",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Java ve Android'in Geleceği | 2021",
                            UserId = 1,
                            ViewsCount = 3225
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            CommentCount = 0,
                            Content = "Le Lorem Ipsum est simplement du faux texte employé dans la composition et la mise en page avant impression. Le Lorem Ipsum est le faux texte standard de l'imprimerie depuis les années 1500, quand un imprimeur anonyme assembla ensemble des morceaux de texte pour réaliser un livre spécimen de polices de texte. Il n'a pas fait que survivre cinq siècles, mais s'est aussi adapté à la bureautique informatique, sans que son contenu n'en soit modifié. Il a été popularisé dans les années 1960 grâce à la vente de feuilles Letraset contenant des passages du Lorem Ipsum, et, plus récemment, par son inclusion dans des applications de mise en page de texte, comme Aldus PageMaker.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9768),
                            Date = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9767),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9768),
                            Note = "Python",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Python ile Veri Madenciliği",
                            SeoTags = "Python, Veri Madenciliği Nasıl Yapılır?",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Python ile Veri Madenciliği | 2021",
                            UserId = 1,
                            ViewsCount = 9999
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            CommentCount = 0,
                            Content = "Contrairement à une opinion répandue, le Lorem Ipsum n'est pas simplement du texte aléatoire. Il trouve ses racines dans une oeuvre de la littérature latine classique datant de 45 av. J.-C., le rendant vieux de 2000 ans. Un professeur du Hampden-Sydney College, en Virginie, s'est intéressé à un des mots latins les plus obscurs, consectetur, extrait d'un passage du Lorem Ipsum, et en étudiant tous les usages de ce mot dans la littérature classique, découvrit la source incontestable du Lorem Ipsum. Il provient en fait des sections 1.10.32 et 1.10.33 du 0De Finibus Bonorum et Malorum' (Des Suprêmes Biens et des Suprêmes Maux) de Cicéron. Cet ouvrage, très populaire pendant la Renaissance, est un traité sur la théorie de l'éthique. Les premières lignes du Lorem Ipsum, 'Lorem ipsum dolor sit amet...'', proviennent de la section 1.10.32",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9772),
                            Date = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9771),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9772),
                            Note = "PHP",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Php ile API Oluşturma Rehberi",
                            SeoTags = "php, laravel, api, oop",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Php Laravel Başlangıç Rehberi | API",
                            UserId = 1,
                            ViewsCount = 4818
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            CommentCount = 0,
                            Content = "Plusieurs variations de Lorem Ipsum peuvent être trouvées ici ou là, mais la majeure partie d'entre elles a été altérée par l'addition d'humour ou de mots aléatoires qui ne ressemblent pas une seconde à du texte standard. Si vous voulez utiliser un passage du Lorem Ipsum, vous devez être sûr qu'il n'y a rien d'embarrassant caché dans le texte. Tous les générateurs de Lorem Ipsum sur Internet tendent à reproduire le même extrait sans fin, ce qui fait de lipsum.com le seul vrai générateur de Lorem Ipsum. Iil utilise un dictionnaire de plus de 200 mots latins, en combinaison de plusieurs structures de phrases, pour générer un Lorem Ipsum irréprochable. Le Lorem Ipsum ainsi obtenu ne contient aucune répétition, ni ne contient des mots farfelus, ou des touches d'humour.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9776),
                            Date = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9775),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9777),
                            Note = "Kotlin",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Kotlin ile Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "kotlin, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Kotlin ile Mobil Programlama",
                            UserId = 1,
                            ViewsCount = 750
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            CommentCount = 0,
                            Content = "Al contrario di quanto si pensi, Lorem Ipsum non è semplicemente una sequenza casuale di caratteri. Risale ad un classico della letteratura latina del 45 AC, cosa che lo rende vecchio di 2000 anni. Richard McClintock, professore di latino al Hampden-Sydney College in Virginia, ha ricercato una delle più oscure parole latine, consectetur, da un passaggio del Lorem Ipsum e ha scoperto tra i vari testi in cui è citata, la fonte da cui è tratto il testo, le sezioni 1.10.32 and 1.10.33 del 'de Finibus Bonorum et Malorum' di Cicerone. Questo testo è un trattato su teorie di etica, molto popolare nel Rinascimento. La prima riga del Lorem Ipsum, 'Lorem ipsum dolor sit amet..'', è tratta da un passaggio della sezione 1.10.32.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9780),
                            Date = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9779),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9781),
                            Note = "Swift",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Swift ile IOS Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "IOS, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Swift ile IOS Programlama",
                            UserId = 1,
                            ViewsCount = 14900
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            CommentCount = 0,
                            Content = "Esistono innumerevoli variazioni dei passaggi del Lorem Ipsum, ma la maggior parte hanno subito delle variazioni del tempo, a causa dell’inserimento di passaggi ironici, o di sequenze casuali di caratteri palesemente poco verosimili. Se si decide di utilizzare un passaggio del Lorem Ipsum, è bene essere certi che non contenga nulla di imbarazzante. In genere, i generatori di testo segnaposto disponibili su internet tendono a ripetere paragrafi predefiniti, rendendo questo il primo vero generatore automatico su intenet. Infatti utilizza un dizionario di oltre 200 vocaboli latini, combinati con un insieme di modelli di strutture di periodi, per generare passaggi di testo verosimili. Il testo così generato è sempre privo di ripetizioni, parole imbarazzanti o fuori luogo ecc.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9784),
                            Date = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9784),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 869, DateTimeKind.Local).AddTicks(9785),
                            Note = "Ruby",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Ruby, Ruby on Rails Web Programlama, AirBnb Klon",
                            SeoTags = "Ruby on Rails, Ruby, Web Programlama, AirBnb",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Ruby on Rails ile AirBnb Klon Kodlayalım",
                            UserId = 1,
                            ViewsCount = 26777
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("AssociatedInstitutions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2067),
                            Description = "İş Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2067),
                            PaymentTypeId = 1,
                            Title = "İş Bankası"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2069),
                            Description = "Garanti Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2069),
                            PaymentTypeId = 1,
                            Title = "Garanti Bankası"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2070),
                            Description = "Yapı Kredi Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2071),
                            PaymentTypeId = 1,
                            Title = "Yapı Kredi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2072),
                            Description = "Akbank Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2072),
                            PaymentTypeId = 1,
                            Title = "Akbank"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2073),
                            Description = "Avrupa Ses Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2073),
                            PaymentTypeId = 2,
                            Title = "Avrupa Ses"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2074),
                            Description = "Sivasot Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2075),
                            PaymentTypeId = 2,
                            Title = "Sivasot"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2076),
                            Description = "Timtoptan Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2076),
                            PaymentTypeId = 2,
                            Title = "Timtoptan"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(1837),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(1838),
                            Title = "Brand Title Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "act Manuel"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2465),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2466),
                            Note = "C# Makale Yorumu",
                            Text = "Lorem Ipsum pasajlarının birçok çeşitlemesi vardır. Ancak bunların büyük bir çoğunluğu mizah katılarak veya rastgele sözcükler eklenerek değiştirilmişlerdir. Eğer bir Lorem Ipsum pasajı kullanacaksanız, metin aralarına utandırıcı sözcükler gizlenmediğinden emin olmanız gerekir. İnternet'teki tüm Lorem Ipsum üreteçleri önceden belirlenmiş metin bloklarını yineler. Bu da, bu üreteci İnternet üzerindeki gerçek Lorem Ipsum üreteci yapar. Bu üreteç, 200'den fazla Latince sözcük ve onlara ait cümle yapılarını içeren bir sözlük kullanır. Bu nedenle, üretilen Lorem Ipsum metinleri yinelemelerden, mizahtan ve karakteristik olmayan sözcüklerden uzaktır."
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2469),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2469),
                            Note = "C++ Makale Yorumu",
                            Text = "Lorem Ipsum jest tekstem stosowanym jako przykładowy wypełniacz w przemyśle poligraficznym. Został po raz pierwszy użyty w XV w. przez nieznanego drukarza do wypełnienia tekstem próbnej książki. Pięć wieków później zaczął być używany przemyśle elektronicznym, pozostając praktycznie niezmienionym. Spopularyzował się w latach 60. XX w. wraz z publikacją arkuszy Letrasetu, zawierających fragmenty Lorem Ipsum, a ostatnio z zawierającym różne wersje Lorem Ipsum oprogramowaniem przeznaczonym do realizacji druków na komputerach osobistych, jak Aldus PageMaker"
                        },
                        new
                        {
                            Id = 3,
                            ArticleId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2472),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2472),
                            Note = "JavaScript Makale Yorumu",
                            Text = "Ang Lorem Ipsum ay ginagamit na modelo ng industriya ng pagpriprint at pagtytypeset. Ang Lorem Ipsum ang naging regular na modelo simula pa noong 1500s, noong may isang di kilalang manlilimbag and kumuha ng galley ng type at ginulo ang pagkaka-ayos nito upang makagawa ng libro ng mga type specimen. Nalagpasan nito hindi lang limang siglo, kundi nalagpasan din nito ang paglaganap ng electronic typesetting at nanatiling parehas. Sumikat ito noong 1960s kasabay ng pag labas ng Letraset sheets na mayroong mga talata ng Lorem Ipsum, at kamakailan lang sa mga desktop publishing software tulad ng Aldus Pagemaker ginamit ang mga bersyon ng Lorem Ipsum."
                        },
                        new
                        {
                            Id = 4,
                            ArticleId = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2475),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2476),
                            Note = "Typescript Makale Yorumu",
                            Text = "Lorem Ipsum er rett og slett dummytekst fra og for trykkeindustrien. Lorem Ipsum har vært bransjens standard for dummytekst helt siden 1500-tallet, da en ukjent boktrykker stokket en mengde bokstaver for å lage et prøveeksemplar av en bok. Lorem Ipsum har tålt tidens tann usedvanlig godt, og har i tillegg til å bestå gjennom fem århundrer også tålt spranget over til elektronisk typografi uten vesentlige endringer. Lorem Ipsum ble gjort allment kjent i 1960-årene ved lanseringen av Letraset-ark med avsnitt fra Lorem Ipsum, og senere med sideombrekkingsprogrammet Aldus PageMaker som tok i bruk nettopp Lorem Ipsum for dummytekst."
                        },
                        new
                        {
                            Id = 5,
                            ArticleId = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2478),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2479),
                            Note = "Java Makale Yorumu",
                            Text = "Lorem Ipsum este pur şi simplu o machetă pentru text a industriei tipografice. Lorem Ipsum a fost macheta standard a industriei încă din secolul al XVI-lea, când un tipograf anonim a luat o planşetă de litere şi le-a amestecat pentru a crea o carte demonstrativă pentru literele respective. Nu doar că a supravieţuit timp de cinci secole, dar şi a facut saltul în tipografia electronică practic neschimbată. A fost popularizată în anii '60 odată cu ieşirea colilor Letraset care conţineau pasaje Lorem Ipsum, iar mai recent, prin programele de publicare pentru calculator, ca Aldus PageMaker care includeau versiuni de Lorem Ipsum."
                        },
                        new
                        {
                            Id = 6,
                            ArticleId = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2481),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2482),
                            Note = "Python Makale Yorumu",
                            Text = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a."
                        },
                        new
                        {
                            Id = 7,
                            ArticleId = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2484),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2485),
                            Note = "Php Makale Yorumu",
                            Text = "Lorem Ipsum – tas ir teksta salikums, kuru izmanto poligrāfijā un maketēšanas darbos. Lorem Ipsum ir kļuvis par vispārpieņemtu teksta aizvietotāju kopš 16. gadsimta sākuma. Tajā laikā kāds nezināms iespiedējs izveidoja teksta fragmentu, lai nodrukātu grāmatu ar burtu paraugiem. Tas ir ne tikai pārdzīvojis piecus gadsimtus, bet bez ievērojamām izmaiņām saglabājies arī mūsdienās, pārejot uz datorizētu teksta apstrādi. Tā popularizēšanai 60-tajos gados kalpoja Letraset burtu paraugu publicēšana ar Lorem Ipsum teksta fragmentiem un, nesenā pagātnē, tādas maketēšanas programmas kā Aldus PageMaker, kuras šablonu paraugos ir izmantots Lorem Ipsum teksts."
                        },
                        new
                        {
                            Id = 8,
                            ArticleId = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2487),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2488),
                            Note = "Kotlin Makale Yorumu",
                            Text = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like)."
                        },
                        new
                        {
                            Id = 9,
                            ArticleId = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2490),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2491),
                            Note = "Swift Makale Yorumu",
                            Text = "هنالك العديد من الأنواع المتوفرة لنصوص لوريم إيبسوم، ولكن الغالبية تم تعديلها بشكل ما عبر إدخال بعض النوادر أو الكلمات العشوائية إلى النص. إن كنت تريد أن تستخدم نص لوريم إيبسوم ما، عليك أن تتحقق أولاً أن ليس هناك أي كلمات أو عبارات محرجة أو غير لائقة مخبأة في هذا النص. بينما تعمل جميع مولّدات نصوص لوريم إيبسوم على الإنترنت على إعادة تكرار مقاطع من نص لوريم إيبسوم نفسه عدة مرات بما تتطلبه الحاجة، يقوم مولّدنا هذا باستخدام كلمات من قاموس يحوي على أكثر من 200 كلمة لا تينية، مضاف إليها مجموعة من الجمل النموذجية، لتكوين نص لوريم إيبسوم ذو شكل منطقي قريب إلى النص الحقيقي. وبالتالي يكون النص الناتح خالي من التكرار، أو أي كلمات أو عبارات غير لائقة أو ما شابه. وهذا ما يجعله أول مولّد نص لوريم إيبسوم حقيقي على الإنترنت."
                        },
                        new
                        {
                            Id = 10,
                            ArticleId = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2493),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(2494),
                            Note = "Ruby Makale Yorumu",
                            Text = "Lorem Ipsum，也称乱数假文或者哑元文本， 是印刷及排版领域所常用的虚拟文字。由于曾经一台匿名的打印机刻意打乱了一盒印刷字体从而造出一本字体样品书，Lorem Ipsum从西元15世纪起就被作为此领域的标准文本使用。它不仅延续了五个世纪，还通过了电子排版的挑战，其雏形却依然保存至今。在1960年代，”Leatraset”公司发布了印刷着Lorem Ipsum段落的纸张，从而广泛普及了它的使用。最近，计算机桌面出版软件”Aldus PageMaker”也通过同样的方式使Lorem Ipsum落入大众的视野。"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HospitalOfReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 7, 26, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6115),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6111),
                            CustomerReferanceId = 1,
                            CustomerTypeId = 1,
                            Email = "hasta1@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6112),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 2,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 7, 27, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6124),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6122),
                            CustomerReferanceId = 1,
                            CustomerTypeId = 2,
                            Email = "hasta2@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6123),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 3,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 7, 28, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6129),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6127),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6128),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 4,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 7, 29, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6134),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6132),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6132),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 5,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 7, 30, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6139),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6136),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6137),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 6,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 7, 31, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6143),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6141),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6142),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 7,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 8, 1, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6148),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6146),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(6147),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("CustomerReferances", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(7107),
                            Description = "Description",
                            FirstName = "Sema",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(7108),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Phone = "+905050102249"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(7112),
                            Description = "Description",
                            FirstName = "Sema",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(7113),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Phone = "+905050102249"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(7918),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(7919),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(7922),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(7923),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(7925),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(7926),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 3"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(800),
                            Email = "bedirhangn@gmail.com",
                            EmployeeTypeId = 1,
                            FirstName = "Personel 1",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(801),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 2,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(804),
                            EmployeeTypeId = 1,
                            FirstName = "Ikinci Personel",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(805),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 3,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(807),
                            EmployeeTypeId = 1,
                            FirstName = "Ucuncu perosnel",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(808),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(971),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(972),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(974),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(975),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(976),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(976),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(979),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(980),
                            Note = "Not",
                            Title = "Title"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDaily")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncome")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Expenses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 100,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2219),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2224),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 122,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2227),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2228),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 21,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2230),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2231),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 341,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2233),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2234),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 422,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2236),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2237),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 6,
                            Amount = 122,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2239),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2240),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 7,
                            Amount = 322,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2242),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2243),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 8,
                            Amount = 422,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2246),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2246),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 9,
                            Amount = 522,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2249),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2249),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 10,
                            Amount = 122,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2252),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2253),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 11,
                            Amount = 232,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2255),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2256),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 12,
                            Amount = 122,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2258),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2259),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 13,
                            Amount = 222,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2261),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2262),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 14,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2264),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2265),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 15,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2267),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2268),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 16,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2270),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2271),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 17,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2273),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2274),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 18,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2276),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2277),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 19,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 23, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2279),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(2280),
                            Note = "TEST"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(9932),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(9933),
                            Name = "AgendaProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(9936),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(9936),
                            Name = "CustomerModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(9939),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(9939),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(9942),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(9943),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(9945),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(9945),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(9948),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(9948),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(9950),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(9951),
                            Name = "StockModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(5802),
                            CustomerId = 1,
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(5803),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 7, 25, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(5808),
                            Title = "Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(5816),
                            CustomerId = 2,
                            Description = "Doğum günü yaklaşmakta.",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(5817),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 7, 24, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(5819),
                            Title = "Doğum Günü!",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(5821),
                            CustomerId = 3,
                            Description = "Aylık cihaz bakımı için konuşulacak",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(5822),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 7, 23, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(5824),
                            Title = "Cihaz Bakımı!",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DebtAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PaidPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutPayments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 0m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(7724),
                            DebtAmount = 15000m,
                            Description = "TEST desc 1 ",
                            DueDate = new DateTime(2023, 7, 26, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(7729),
                            IsActive = true,
                            IsDeleted = false,
                            IsPaid = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(7725),
                            PaidPlace = "Ödemenin Yapılacağı yer"
                        },
                        new
                        {
                            Id = 2,
                            AmountPaid = 0m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(7732),
                            DebtAmount = 10000m,
                            Description = "TEST desc 1 ",
                            DueDate = new DateTime(2023, 7, 26, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(7734),
                            IsActive = true,
                            IsDeleted = false,
                            IsPaid = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(7733),
                            PaidPlace = "Ödemenin Yapılacağı yer"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OutPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OutPaymentId");

                    b.ToTable("OutPaymentDetails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1000m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(9392),
                            Description = "TEST desc 1 ",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(9393),
                            OutPaymentId = 1
                        },
                        new
                        {
                            Id = 2,
                            AmountPaid = 2000m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(9397),
                            Description = "TEST desc 1 ",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(9398),
                            OutPaymentId = 1
                        },
                        new
                        {
                            Id = 3,
                            AmountPaid = 1500m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(9400),
                            Description = "TEST desc 1 ",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(9401),
                            OutPaymentId = 1
                        },
                        new
                        {
                            Id = 4,
                            AmountPaid = 2300m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(9403),
                            Description = "TEST desc 1 ",
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(9404),
                            OutPaymentId = 2
                        },
                        new
                        {
                            Id = 5,
                            AmountPaid = 1450m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(9406),
                            Description = "TEST desc 1 ",
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(9407),
                            OutPaymentId = 2
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("AssociatedInstitutionId")
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedInstitutionsId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId1")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PaymentTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTypeId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedInstitutionId");

                    b.HasIndex("AssociatedInstitutionsId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PaymentTypeId1");

                    b.ToTable("Payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(6749),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(6750),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(6754),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(6754),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(6757),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(6758),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(6760),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(6761),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(6764),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(6764),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(6767),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(6768),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(6770),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(6771),
                            PaymentTypeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(9525),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(9526),
                            Title = "KK | POS"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(9528),
                            Description = "Mail Order Payment",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(9528),
                            Title = "Mail Order"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(9529),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 879, DateTimeKind.Local).AddTicks(9530),
                            Title = "Peşin"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("ProductSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductSubGroupId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(1650),
                            IsActive = true,
                            IsDeleted = false,
                            IsSold = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(1651),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Siemens Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT4"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(1655),
                            IsActive = true,
                            IsDeleted = false,
                            IsSold = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(1656),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Jabra Signia",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT3"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(1659),
                            IsActive = true,
                            IsDeleted = false,
                            IsSold = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(1660),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Apple Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT2"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(1663),
                            IsActive = true,
                            IsDeleted = false,
                            IsSold = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(1663),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Samsung Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(8305),
                            Description = "Ürün Grubu Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 880, DateTimeKind.Local).AddTicks(8306),
                            Title = "Ürün Grubu 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductSubGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(955),
                            Description = "Ürün Alt Grubu Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(957),
                            ProductGroupId = 1,
                            Title = "Ürün Alt Grubu Başlığı"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Programs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(689),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(690),
                            ModuleId = 5,
                            Name = "EmployeeProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(693),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(694),
                            ModuleId = 5,
                            Name = "UserModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(697),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(698),
                            ModuleId = 7,
                            Name = "StockModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(701),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(702),
                            ModuleId = 6,
                            Name = "CustomerReferanceModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(704),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(705),
                            ModuleId = 1,
                            Name = "AppointmentModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(708),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(709),
                            ModuleId = 1,
                            Name = "NotificationModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(713),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(714),
                            ModuleId = 3,
                            Name = "PaymentProgram.Read"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(716),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(717),
                            ModuleId = 2,
                            Name = "CustomerProgram.Read"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(720),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(721),
                            ModuleId = 7,
                            Name = "BrandModule.Read"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(769),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(770),
                            ModuleId = 3,
                            Name = "SaleModule.Read"
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(773),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(774),
                            ModuleId = 7,
                            Name = "ProductProgram.Read"
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(777),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(777),
                            ModuleId = 5,
                            Name = "RoleModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessLevel = 1,
                            ConcurrencyStamp = "1f20915e-968e-4778-89aa-656826a219b3",
                            Definition = "SüperAdmin Yetkisi",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2,
                            AccessLevel = 3,
                            ConcurrencyStamp = "565227f4-760e-4316-999f-a8fc8b14086c",
                            Definition = "Kullanıcı Ekleme Yetkisi",
                            Name = "User.Create",
                            NormalizedName = "USER.CREATE"
                        },
                        new
                        {
                            Id = 3,
                            AccessLevel = 3,
                            ConcurrencyStamp = "08aa5e70-0e45-447f-b66d-52256aa75dbf",
                            Definition = "Kullanıcı Görüntüleme Yetkisi",
                            Name = "User.Read",
                            NormalizedName = "USER.READ"
                        },
                        new
                        {
                            Id = 4,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1576694f-8043-4a54-9163-0501abe11442",
                            Definition = "Kullanıcı Güncelleme Yetkisi",
                            Name = "User.Update",
                            NormalizedName = "USER.UPDATE"
                        },
                        new
                        {
                            Id = 5,
                            AccessLevel = 3,
                            ConcurrencyStamp = "87c2b84f-b6b6-4ac2-a7a8-b3c43f38930c",
                            Definition = "Kullanıcı Silme Yetkisi",
                            Name = "User.Delete",
                            NormalizedName = "USER.DELETE"
                        },
                        new
                        {
                            Id = 6,
                            AccessLevel = 3,
                            ConcurrencyStamp = "155536bd-6238-46bc-a024-4e18a873cac3",
                            Definition = "Rol Görüntüleme Yetkisi",
                            Name = "Role.Read",
                            NormalizedName = "ROLE.READ"
                        },
                        new
                        {
                            Id = 7,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0c41df22-2643-4eaf-971b-038d4431fb6a",
                            Definition = "Rol Güncelleme Yetkisi",
                            Name = "Role.Update",
                            NormalizedName = "ROLE.UPDATE"
                        },
                        new
                        {
                            Id = 8,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1d731e88-ff45-43a1-a97b-f15d9ce691aa",
                            Definition = "Rol Silme Yetkisi",
                            Name = "Role.Delete",
                            NormalizedName = "ROLE.DELETE"
                        },
                        new
                        {
                            Id = 9,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6321a858-0259-4490-b2de-9646ad2040b1",
                            Definition = "Rol Ekleme Yetkisi",
                            Name = "Role.Create",
                            NormalizedName = "ROLE.CREATE"
                        },
                        new
                        {
                            Id = 10,
                            AccessLevel = 3,
                            ConcurrencyStamp = "46f56073-b7c9-4329-936b-4b84c27e4ef8",
                            Definition = "Ödeme Ekleme Yetkisi",
                            Name = "Payment.Create",
                            NormalizedName = "PAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 11,
                            AccessLevel = 3,
                            ConcurrencyStamp = "924b0f5a-1e6c-4869-b83f-a81fd671314e",
                            Definition = "Ödeme Görüntüleme Yetkisi",
                            Name = "Payment.Read",
                            NormalizedName = "PAYMENT.READ"
                        },
                        new
                        {
                            Id = 12,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d1ab5055-b54b-4a6d-9dcd-815ec9e27b1a",
                            Definition = "Ödeme Güncelleme Yetkisi",
                            Name = "Payment.Update",
                            NormalizedName = "PAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 13,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4a26e643-db9b-4174-8996-7f4b24a5a131",
                            Definition = "Ödeme Silme Yetkisi",
                            Name = "Payment.Delete",
                            NormalizedName = "PAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 14,
                            AccessLevel = 3,
                            ConcurrencyStamp = "640b8782-675c-425c-8665-3bb9f63ff696",
                            Definition = "Ödeme Türü Ekleme Yetkisi",
                            Name = "PaymentType.Create",
                            NormalizedName = "PAYMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 15,
                            AccessLevel = 3,
                            ConcurrencyStamp = "fea94ff8-253e-4adb-af92-6e6edeeabf0d",
                            Definition = "Ödeme Türü Görüntüleme Yetkisi",
                            Name = "PaymentType.Read",
                            NormalizedName = "PAYMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 16,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e5a76647-7685-4036-93b0-e0931cb6b0d5",
                            Definition = "Ödeme Türü Güncelleme Yetkisi",
                            Name = "PaymentType.Update",
                            NormalizedName = "PAYMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 17,
                            AccessLevel = 3,
                            ConcurrencyStamp = "59ffcc19-2665-43b1-8f66-196b05d998e2",
                            Definition = "Ödeme Türü Silme Yetkisi",
                            Name = "PaymentType.Delete",
                            NormalizedName = "PAYMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 18,
                            AccessLevel = 3,
                            ConcurrencyStamp = "fcd40237-50cc-4a3a-a173-18985659bdb0",
                            Definition = "Çalışan Ekleme Yetkisi",
                            Name = "Employee.Create",
                            NormalizedName = "EMPLOYEE.CREATE"
                        },
                        new
                        {
                            Id = 19,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c8bb6c07-119e-4b0d-9f57-cc7606bccc1a",
                            Definition = "Çalışan Görüntüleme Yetkisi",
                            Name = "Employee.Read",
                            NormalizedName = "EMPLOYEE.READ"
                        },
                        new
                        {
                            Id = 20,
                            AccessLevel = 3,
                            ConcurrencyStamp = "cc041ec1-f1aa-4123-9249-1e7841080261",
                            Definition = "Çalışan Güncelleme Yetkisi",
                            Name = "Employee.Update",
                            NormalizedName = "EMPLOYEE.UPDATE"
                        },
                        new
                        {
                            Id = 21,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9746bd29-9303-41b9-b9aa-9d9ef71ebb95",
                            Definition = "Çalışan Silme Yetkisi",
                            Name = "Employee.Delete",
                            NormalizedName = "EMPLOYEE.DELETE"
                        },
                        new
                        {
                            Id = 22,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7dc90d28-2a68-4e73-8188-9502c2bc1eb4",
                            Definition = "Çalışan Türü Ekleme Yetkisi",
                            Name = "EmployeeType.Create",
                            NormalizedName = "EMPLOYEETYPE.CREATE"
                        },
                        new
                        {
                            Id = 23,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8de56e15-aa47-439a-a248-5df500cf72b5",
                            Definition = "Çalışan Türü Görüntüleme Yetkisi",
                            Name = "EmployeeType.Read",
                            NormalizedName = "EMPLOYEETYPE.READ"
                        },
                        new
                        {
                            Id = 24,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4fe6fe53-9074-4d98-9ec6-9b6d805e31f2",
                            Definition = "Çalışan Türü Güncelleme Yetkisi",
                            Name = "EmployeeType.Update",
                            NormalizedName = "EMPLOYEETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 25,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c98e9d3d-9460-41ea-b1cf-4cd3e46911ca",
                            Definition = "Çalışan Türü Silme Yetkisi",
                            Name = "EmployeeType.Delete",
                            NormalizedName = "EMPLOYEETYPE.DELETE"
                        },
                        new
                        {
                            Id = 26,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d128ee45-df52-4a82-8d39-8c25f8606002",
                            Definition = "Müşteri Ekleme Yetkisi",
                            Name = "Customer.Create",
                            NormalizedName = "CUSTOMER.CREATE"
                        },
                        new
                        {
                            Id = 27,
                            AccessLevel = 3,
                            ConcurrencyStamp = "53d46116-ae78-497e-911b-6345f14769a4",
                            Definition = "Müşteri Görüntüleme Yetkisi",
                            Name = "Customer.Read",
                            NormalizedName = "CUSTOMER.READ"
                        },
                        new
                        {
                            Id = 28,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7f7caade-9a05-49fa-9c30-11dab0fac739",
                            Definition = "Müşteri Güncelleme Yetkisi",
                            Name = "Customer.Update",
                            NormalizedName = "CUSTOMER.UPDATE"
                        },
                        new
                        {
                            Id = 29,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f561ec63-06b6-4902-bd6c-895b02dac4f7",
                            Definition = "Müşteri Silme Yetkisi",
                            Name = "Customer.Delete",
                            NormalizedName = "CUSTOMER.DELETE"
                        },
                        new
                        {
                            Id = 30,
                            AccessLevel = 3,
                            ConcurrencyStamp = "741a0e36-6818-414f-ba0c-1bbc4e5b1cd3",
                            Definition = "Müşteri Tipi Ekleme Yetkisi",
                            Name = "CustomerType.Create",
                            NormalizedName = "CUSTOMERTYPE.CREATE"
                        },
                        new
                        {
                            Id = 31,
                            AccessLevel = 3,
                            ConcurrencyStamp = "454bb700-b6b4-46ac-9fcb-4727c72f0618",
                            Definition = "Müşteri Tipi Görüntüleme Yetkisi",
                            Name = "CustomerType.Read",
                            NormalizedName = "CUSTOMERTYPE.READ"
                        },
                        new
                        {
                            Id = 32,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7152106d-0c05-410d-a383-b1ed2ea8c148",
                            Definition = "Müşteri Tipi Güncelleme Yetkisi",
                            Name = "CustomerType.Update",
                            NormalizedName = "CUSTOMERTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 33,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8540f1bf-626f-4ece-af16-a3a5d3c55e63",
                            Definition = "Müşteri Tipi Silme Yetkisi",
                            Name = "CustomerType.Delete",
                            NormalizedName = "CUSTOMERTYPE.DELETE"
                        },
                        new
                        {
                            Id = 34,
                            AccessLevel = 3,
                            ConcurrencyStamp = "dbc70826-a721-4cef-8aee-f7176d39750f",
                            Definition = "Bildirim Ekleme Yetkisi",
                            Name = "Notification.Create",
                            NormalizedName = "NOTIFICATION.CREATE"
                        },
                        new
                        {
                            Id = 35,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4512fbc7-4135-4a6d-a2dd-78d411e33211",
                            Definition = "Bildirim Görüntüleme Yetkisi",
                            Name = "Notification.Read",
                            NormalizedName = "NOTIFICATION.READ"
                        },
                        new
                        {
                            Id = 36,
                            AccessLevel = 3,
                            ConcurrencyStamp = "eca8886e-76f0-4cf6-9423-2976960f7780",
                            Definition = "Bildirim Güncelleme Yetkisi",
                            Name = "Notification.Update",
                            NormalizedName = "NOTIFICATION.UPDATE"
                        },
                        new
                        {
                            Id = 37,
                            AccessLevel = 3,
                            ConcurrencyStamp = "36529f63-11ba-4ca2-b14b-de7d4b01d724",
                            Definition = "Bildirim Silme Yetkisi",
                            Name = "Notification.Delete",
                            NormalizedName = "NOTIFICATION.DELETE"
                        },
                        new
                        {
                            Id = 38,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7413ae32-83ad-4e34-8f18-4ed4abca0c64",
                            Definition = "Marka Ekleme Yetkisi",
                            Name = "Brand.Create",
                            NormalizedName = "BRAND.CREATE"
                        },
                        new
                        {
                            Id = 39,
                            AccessLevel = 3,
                            ConcurrencyStamp = "639d7ec4-0582-488e-a115-5fabd799cd50",
                            Definition = "Marka Görüntüleme Yetkisi",
                            Name = "Brand.Read",
                            NormalizedName = "BRAND.READ"
                        },
                        new
                        {
                            Id = 40,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a864732a-8b77-4ff0-91aa-a8ba0a9f6819",
                            Definition = "Marka Güncelleme Yetkisi",
                            Name = "Brand.Update",
                            NormalizedName = "BRAND.UPDATE"
                        },
                        new
                        {
                            Id = 41,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3481e323-8d36-46de-af49-dbe0184abdce",
                            Definition = "Marka Silme Yetkisi",
                            Name = "Brand.Delete",
                            NormalizedName = "BRAND.DELETE"
                        },
                        new
                        {
                            Id = 42,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d02445ee-9c6a-433c-b1e5-e1b86059cefa",
                            Definition = "Satış Durumu Ekleme Yetkisi",
                            Name = "SaleStatus.Create",
                            NormalizedName = "SALESTATUS.CREATE"
                        },
                        new
                        {
                            Id = 43,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b3b48f2d-9baa-486d-bee6-49dc9f864a27",
                            Definition = "Satış Durumu Görüntüleme Yetkisi",
                            Name = "SaleStatus.Read",
                            NormalizedName = "SALESTATUS.READ"
                        },
                        new
                        {
                            Id = 44,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5b7d0b8e-5324-4968-ac01-4245984034ba",
                            Definition = "Satış Durumu Güncelleme Yetkisi",
                            Name = "SaleStatus.Update",
                            NormalizedName = "SALESTATUS.UPDATE"
                        },
                        new
                        {
                            Id = 45,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5c51ffa3-cd3e-4b04-8a51-43bbb4564614",
                            Definition = "Satış Durumu Silme Yetkisi",
                            Name = "SaleStatus.Delete",
                            NormalizedName = "SALESTATUS.DELETE"
                        },
                        new
                        {
                            Id = 46,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ee59af84-626b-4afc-a4f0-44c062237448",
                            Definition = "Satış Türü Ekleme Yetkisi",
                            Name = "SaleType.Create",
                            NormalizedName = "SALETYPE.CREATE"
                        },
                        new
                        {
                            Id = 47,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b9125adf-418b-4157-8c14-27b2a55fc098",
                            Definition = "Satış Türü Görüntüleme Yetkisi",
                            Name = "SaleType.Read",
                            NormalizedName = "SALETYPE.READ"
                        },
                        new
                        {
                            Id = 48,
                            AccessLevel = 3,
                            ConcurrencyStamp = "215ff822-4351-499f-a164-78bda86cfc2e",
                            Definition = "Satış Türü Güncelleme Yetkisi",
                            Name = "SaleType.Update",
                            NormalizedName = "SALETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 49,
                            AccessLevel = 3,
                            ConcurrencyStamp = "66ef5558-f246-438d-b639-68efd2db2945",
                            Definition = "Satış Türü Silme Yetkisi",
                            Name = "SaleType.Delete",
                            NormalizedName = "SALETYPE.DELETE"
                        },
                        new
                        {
                            Id = 50,
                            AccessLevel = 3,
                            ConcurrencyStamp = "fa02b7e0-5918-42d6-b7c3-01633b76bd9e",
                            Definition = "Ürün Grubu Ekleme Yetkisi",
                            Name = "ProductGroup.Create",
                            NormalizedName = "PRODUCTGROUP.CREATE"
                        },
                        new
                        {
                            Id = 51,
                            AccessLevel = 3,
                            ConcurrencyStamp = "36385dd5-9cf7-4d17-96aa-b07228534e22",
                            Definition = "Ürün Grubu Görüntüleme Yetkisi",
                            Name = "ProductGroup.Read",
                            NormalizedName = "PRODUCTGROUP.READ"
                        },
                        new
                        {
                            Id = 52,
                            AccessLevel = 3,
                            ConcurrencyStamp = "25a108a5-41e7-421e-95b0-8bc6151ed7cd",
                            Definition = "Ürün Grubu Güncelleme Yetkisi",
                            Name = "ProductGroup.Update",
                            NormalizedName = "PRODUCTGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 53,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c4cca521-c92d-4058-92a9-a47b350b48fb",
                            Definition = "Ürün Grubu Silme Yetkisi",
                            Name = "ProductGroup.Delete",
                            NormalizedName = "PRODUCTGROUP.DELETE"
                        },
                        new
                        {
                            Id = 54,
                            AccessLevel = 3,
                            ConcurrencyStamp = "fdd37efa-503f-4e88-a264-e22740cf572f",
                            Definition = "Ürün Alt Grubu Ekleme Yetkisi",
                            Name = "ProductSubGroup.Create",
                            NormalizedName = "PRODUCTSUBGROUP.CREATE"
                        },
                        new
                        {
                            Id = 55,
                            AccessLevel = 3,
                            ConcurrencyStamp = "128105dc-11bd-4a3d-a759-6d968552fca8",
                            Definition = "Ürün Alt Grubu Görüntüleme Yetkisi",
                            Name = "ProductSubGroup.Read",
                            NormalizedName = "PRODUCTSUBGROUP.READ"
                        },
                        new
                        {
                            Id = 56,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d3836470-3696-48a5-b2bf-394723c99772",
                            Definition = "Ürün Alt Grubu Güncelleme Yetkisi",
                            Name = "ProductSubGroup.Update",
                            NormalizedName = "PRODUCTSUBGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 57,
                            AccessLevel = 3,
                            ConcurrencyStamp = "efeb0ccc-406a-48c9-a4e8-a2da95701a8b",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "ProductSubGroup.Delete",
                            NormalizedName = "PRODUCTSUBGROUP.DELETE"
                        },
                        new
                        {
                            Id = 58,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1101e229-ff9f-4607-9ee0-8783c875c5a3",
                            Definition = "Randevu Türü Ekleme Yetkisi",
                            Name = "AppointmentType.Create",
                            NormalizedName = "APPOINTMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 59,
                            AccessLevel = 3,
                            ConcurrencyStamp = "88177a5e-6fb8-475d-a6b8-6be072f785ea",
                            Definition = "Randevu Türü Görüntüleme Yetkisi",
                            Name = "AppointmentType.Read",
                            NormalizedName = "APPOINTMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 60,
                            AccessLevel = 3,
                            ConcurrencyStamp = "42fb20e9-3833-49df-8268-5fc5d9e6dcdc",
                            Definition = "Randevu Türü Güncelleme Yetkisi",
                            Name = "AppointmentType.Update",
                            NormalizedName = "APPOINTMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 61,
                            AccessLevel = 3,
                            ConcurrencyStamp = "da4df418-60b9-4021-ad98-f40eea6d7fcd",
                            Definition = "Randevu Türü Silme Yetkisi",
                            Name = "AppointmentType.Delete",
                            NormalizedName = "APPOINTMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 62,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5f35177b-57e3-4f22-9f76-3f05d20b1093",
                            Definition = "Satış Oluşturma Yetkisi",
                            Name = "Sale.Create",
                            NormalizedName = "SALE.CREATE"
                        },
                        new
                        {
                            Id = 63,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e92bf1e1-2c8b-4226-92f1-64fcf2cf80bb",
                            Definition = "Satış Görüntüleme Yetkisi",
                            Name = "Sale.Read",
                            NormalizedName = "SALE.READ"
                        },
                        new
                        {
                            Id = 64,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9051261b-6eb0-4be4-997f-8d6338fe6512",
                            Definition = "Satış Güncelleme Yetkisi",
                            Name = "Sale.Update",
                            NormalizedName = "SALE.UPDATE"
                        },
                        new
                        {
                            Id = 65,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3d82e795-9099-402f-98b9-cec4fda0ca04",
                            Definition = "Satış Silme Yetkisi",
                            Name = "Sale.Delete",
                            NormalizedName = "SALE.DELETE"
                        },
                        new
                        {
                            Id = 66,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d6fb6859-8c90-4d78-a5aa-3a921080fea7",
                            Definition = "Ürün Ekleme Yetkisi",
                            Name = "Product.Create",
                            NormalizedName = "PRODUCT.CREATE"
                        },
                        new
                        {
                            Id = 67,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3b1ce816-410c-4761-b033-935dae0ac172",
                            Definition = "Ürün Görüntüleme Yetkisi",
                            Name = "Product.Read",
                            NormalizedName = "PRODUCT.READ"
                        },
                        new
                        {
                            Id = 68,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8e2f14a6-02f5-48cc-bd4b-15806abc5bde",
                            Definition = "Ürün Güncelleme Yetkisi",
                            Name = "Product.Update",
                            NormalizedName = "PRODUCT.UPDATE"
                        },
                        new
                        {
                            Id = 69,
                            AccessLevel = 3,
                            ConcurrencyStamp = "44e3333c-d024-411b-b10f-d407e3054619",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "Product.Delete",
                            NormalizedName = "PRODUCT.DELETE"
                        },
                        new
                        {
                            Id = 70,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9a544bf8-f196-4d88-8d58-7d642d5dc73b",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "Appointment.Create",
                            NormalizedName = "APPOINTMENT.CREATE"
                        },
                        new
                        {
                            Id = 71,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d0eb5b17-046e-4a4c-a811-458057fa9bb0",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "Appointment.Read",
                            NormalizedName = "APPOINTMENT.READ"
                        },
                        new
                        {
                            Id = 72,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6fc97ccc-bb0e-48c1-8649-56d90f7a0622",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "Appointment.Update",
                            NormalizedName = "APPOINTMENT.UPDATE"
                        },
                        new
                        {
                            Id = 73,
                            AccessLevel = 3,
                            ConcurrencyStamp = "655661e5-ccd4-4fa9-b951-19c204776cb0",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "Appointment.Delete",
                            NormalizedName = "APPOINTMENT.DELETE"
                        },
                        new
                        {
                            Id = 74,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5678524b-fa03-4c5c-a9e1-f444081bd339",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "OutPayment.Create",
                            NormalizedName = "OUTPAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 75,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a86093bd-9c33-4043-b41c-bf32b0c68de3",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "OutPayment.Read",
                            NormalizedName = "OUTPAYMENT.READ"
                        },
                        new
                        {
                            Id = 76,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a2da5494-aef2-45ff-801b-1abbda10c5c1",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "OutPayment.Update",
                            NormalizedName = "OUTPAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 77,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2d2140d3-b2ec-4569-a440-8288edc84d42",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "OutPayment.Delete",
                            NormalizedName = "OUTPAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 78,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8549c43c-331c-46fe-b087-4c1a4787aa2a",
                            Definition = "Dış Ödeme Detayı Oluşturma Yetkisi",
                            Name = "OutPaymentDetail.Create",
                            NormalizedName = "OUTPAYMENTDETAIL.CREATE"
                        },
                        new
                        {
                            Id = 79,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e61c5de3-5379-4284-a28b-7b415d878075",
                            Definition = "Dış Ödeme Detayı Görüntüleme Yetkisi",
                            Name = "OutPaymentDetail.Read",
                            NormalizedName = "OUTPAYMENTDETAIL.READ"
                        },
                        new
                        {
                            Id = 80,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4ae1fe7a-af10-487b-81d3-424022872ba8",
                            Definition = "Dış Ödeme Detayı Güncelleme Yetkisi",
                            Name = "OutPaymentDetail.Update",
                            NormalizedName = "OUTPAYMENTDETAIL.UPDATE"
                        },
                        new
                        {
                            Id = 81,
                            AccessLevel = 3,
                            ConcurrencyStamp = "26e46ab5-fad6-4372-ac8d-74d8bb834b3c",
                            Definition = "Dış Ödeme Detayı Silme Yetkisi",
                            Name = "OutPaymentDetail.Delete",
                            NormalizedName = "OUTPAYMENTDETAIL.DELETE"
                        },
                        new
                        {
                            Id = 82,
                            AccessLevel = 2,
                            ConcurrencyStamp = "ffa05c3e-80cf-41cc-852d-3e512a13c9d4",
                            Definition = "Markalar Programı Görüntüleme",
                            Name = "EmployeeProgram.Read",
                            NormalizedName = "EMPLOYEEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 83,
                            AccessLevel = 2,
                            ConcurrencyStamp = "b9229e12-cf47-4cb5-887d-6d6526901ea5",
                            Definition = "Randevular Programı Görüntüleme",
                            Name = "InstitutionalProgram.Read",
                            NormalizedName = "INSTITUTIONALPROGRAM.READ"
                        },
                        new
                        {
                            Id = 84,
                            AccessLevel = 2,
                            ConcurrencyStamp = "edf3a8fb-f651-474c-ba94-f2603c12a24f",
                            Definition = "Hastalar Programı Görüntüleme",
                            Name = "CustomerProgram.Read",
                            NormalizedName = "CUSTOMERPROGRAM.READ"
                        },
                        new
                        {
                            Id = 85,
                            AccessLevel = 2,
                            ConcurrencyStamp = "0499c3ff-85e7-440b-b95d-2ffdb9298b80",
                            Definition = "Referanslar Programı Görüntüleme",
                            Name = "PaymentProgram.Read",
                            NormalizedName = "PAYMENTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 86,
                            AccessLevel = 2,
                            ConcurrencyStamp = "3039025a-3995-4115-9a79-6d7ad45a7172",
                            Definition = "Ürünler Programı Görüntüleme",
                            Name = "ProductProgram.Read",
                            NormalizedName = "PRODUCTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 87,
                            AccessLevel = 2,
                            ConcurrencyStamp = "ff316b57-9dee-4aeb-a15e-f12f0f9d3ac6",
                            Definition = "Roller Programı Görüntüleme",
                            Name = "MarketingProgram.Read",
                            NormalizedName = "MARKETINGPROGRAM.READ"
                        },
                        new
                        {
                            Id = 88,
                            AccessLevel = 2,
                            ConcurrencyStamp = "5c5a58da-6a3b-40bd-a1ea-98438bd0e9bf",
                            Definition = "Satışlar Programı Görüntüleme",
                            Name = "AgendaProgram.Read",
                            NormalizedName = "AGENDAPROGRAM.READ"
                        },
                        new
                        {
                            Id = 89,
                            AccessLevel = 2,
                            ConcurrencyStamp = "f21b3a23-53b6-4adc-808a-7fc552ff37fd",
                            Definition = "Stok Programı Görüntüleme",
                            Name = "FinanceProgram.Read",
                            NormalizedName = "FINANCEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 90,
                            AccessLevel = 1,
                            ConcurrencyStamp = "af084a11-664b-46e8-86d6-b0001b24ed80",
                            Definition = "Anasayfa Görüntüleme Yetkisi",
                            Name = "HomeProgram.Read",
                            NormalizedName = "HOMEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 91,
                            AccessLevel = 1,
                            ConcurrencyStamp = "4e76b533-f336-424e-8f4b-d28515069bd4",
                            Definition = "Stok Modülü Görüntüleme",
                            Name = "StockModule.Read",
                            NormalizedName = "StockModule.Read"
                        },
                        new
                        {
                            Id = 92,
                            AccessLevel = 1,
                            ConcurrencyStamp = "bc297873-7d7e-4c7d-9db7-a4c66674a251",
                            Definition = "Personel Tipleri Modülü Görüntüleme",
                            Name = "EmployeeTypeModule.Read",
                            NormalizedName = "EMPLOYEETYPEMODULE.READ"
                        },
                        new
                        {
                            Id = 93,
                            AccessLevel = 1,
                            ConcurrencyStamp = "2dac70a3-c28f-4a06-ab2d-0722fd67814f",
                            Definition = "Personeller Modülü Görüntüleme",
                            Name = "EmployeeModule.Read",
                            NormalizedName = "EMPLOYEEMODULE.READ"
                        },
                        new
                        {
                            Id = 94,
                            AccessLevel = 1,
                            ConcurrencyStamp = "a3c48e09-dccc-4507-9226-cfeda2dcb146",
                            Definition = "Kullanıcılar Modülü Görüntüleme",
                            Name = "UserModule.Read",
                            NormalizedName = "USERMODULE.READ"
                        },
                        new
                        {
                            Id = 95,
                            AccessLevel = 1,
                            ConcurrencyStamp = "de76a253-8d5a-43c0-a721-81ee2e18acf9",
                            Definition = "Hastalar Modülü Görüntüleme",
                            Name = "CustomerModule.Read",
                            NormalizedName = "CUSTOMERMODULE.READ"
                        },
                        new
                        {
                            Id = 96,
                            AccessLevel = 1,
                            ConcurrencyStamp = "6eadc1f4-869a-4ff7-b298-df1beaadfba7",
                            Definition = "HAsta Tipleri Modülü Görüntüleme",
                            Name = "CustomerTypeModule.Read",
                            NormalizedName = "CUSTOMERTYPEMODULE.READ"
                        },
                        new
                        {
                            Id = 97,
                            AccessLevel = 1,
                            ConcurrencyStamp = "e36becb5-8aac-45be-a9ef-d2fea31d39ac",
                            Definition = "Ürünler Modülü Yetkisi",
                            Name = "ProductModule.Read",
                            NormalizedName = "PRODUCTMODULE.READ"
                        },
                        new
                        {
                            Id = 98,
                            AccessLevel = 1,
                            ConcurrencyStamp = "bf0cd5f4-1c4e-4dcf-9e82-47efb677d49d",
                            Definition = "Ürün Grupları Modülü Yetkisi",
                            Name = "ProductGroupModule.Read",
                            NormalizedName = "PRODUCTGROUPMODULE.READ"
                        },
                        new
                        {
                            Id = 99,
                            AccessLevel = 1,
                            ConcurrencyStamp = "0041aab2-37cf-4cd2-9c46-60c158226430",
                            Definition = "Ürün Alt Grupları Modülü Yetkisi",
                            Name = "ProductSubGroupModule.Read",
                            NormalizedName = "PRODUCTSUBGROUPMODULE.READ"
                        },
                        new
                        {
                            Id = 100,
                            AccessLevel = 1,
                            ConcurrencyStamp = "62e860fb-1f4f-437d-958d-2d7d70be3031",
                            Definition = "Markalar Modülü Yetkisi",
                            Name = "BrandModule.Read",
                            NormalizedName = "BRANDMODULE.READ"
                        },
                        new
                        {
                            Id = 101,
                            AccessLevel = 1,
                            ConcurrencyStamp = "a115cf19-68fe-40b9-ac22-08e89fc57786",
                            Definition = "Hasta Referanları Modülü Yetkisi",
                            Name = "CustomerReferanceModule.Read",
                            NormalizedName = "CUSTOMERREFERANCEMODULE.READ"
                        },
                        new
                        {
                            Id = 102,
                            AccessLevel = 1,
                            ConcurrencyStamp = "b01e69f8-6f8b-43cf-8522-c19c9796a706",
                            Definition = "Randevular Modülü Yetkisi",
                            Name = "AppointmentModule.Read",
                            NormalizedName = "APPOINTMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 103,
                            AccessLevel = 1,
                            ConcurrencyStamp = "9c84c1f2-740c-4f52-9195-09e75f643367",
                            Definition = "Bildirimler Modülü Yetkisi",
                            Name = "NotificationModule.Read",
                            NormalizedName = "NOTIFICATIONMODULE.READ"
                        },
                        new
                        {
                            Id = 104,
                            AccessLevel = 1,
                            ConcurrencyStamp = "bde551ef-16e4-467d-903f-82e99922c3d2",
                            Definition = "Dış Ödemeler Modülü Yetkisi",
                            Name = "OutPaymentModule.Read",
                            NormalizedName = "OUTPAYMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 105,
                            AccessLevel = 1,
                            ConcurrencyStamp = "aa721430-e9ae-44f5-9de9-b23b992635a4",
                            Definition = "Satışlar Modülü Yetkisi",
                            Name = "SaleModule.Read",
                            NormalizedName = "SALEMODULE.READ"
                        },
                        new
                        {
                            Id = 106,
                            AccessLevel = 1,
                            ConcurrencyStamp = "1437b7a3-e7d5-4071-ad16-47799ae417d8",
                            Definition = "Gelen Ödemeler Modülü Yetkisi",
                            Name = "PaymentModule.Read",
                            NormalizedName = "PAYMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 107,
                            AccessLevel = 1,
                            ConcurrencyStamp = "5924f92e-19f5-48f5-86e5-4a3da01554c9",
                            Definition = "Gelir Giderler Modülü Yetkisi",
                            Name = "ExpenseModule.Read",
                            NormalizedName = "EXPENSEMODULE.READ"
                        },
                        new
                        {
                            Id = 108,
                            AccessLevel = 1,
                            ConcurrencyStamp = "e2ff4508-065e-4fb9-82ca-9d83fa59c99a",
                            Definition = "Roller Modülü Yetkisi",
                            Name = "RoleModule.Read",
                            NormalizedName = "ROLEMODULE.READ"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfSgk")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvoiceDue")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.HasIndex("SaleStatusId");

                    b.HasIndex("SaleTypeId");

                    b.ToTable("Sales", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 500,
                            AmountOfSgk = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(8041),
                            CustomerId = 1,
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsInvoiceDue = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(8042),
                            ProductId = 1,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 200,
                            AmountOfSgk = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(8046),
                            CustomerId = 1,
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsInvoiceDue = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(8047),
                            ProductId = 2,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 500,
                            AmountOfSgk = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(8050),
                            CustomerId = 1,
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsInvoiceDue = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(8050),
                            ProductId = 3,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SaleStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(2101),
                            Description = "açıklama deneme status sale 1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(2102),
                            Title = "Satış Aşamasında"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(2106),
                            Description = "açıklama deneme status sale 1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(2107),
                            Title = "Satıldı"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SaleTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(8891),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(8892),
                            Title = "Nakit"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(8894),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(8895),
                            Title = "Kart"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(8897),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(8898),
                            Title = "Çek"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(8900),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 881, DateTimeKind.Local).AddTicks(8901),
                            Title = "Senet"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("Stocks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(3126),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(3127),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 1,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(3130),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(3131),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 2,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(3133),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(3134),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 3,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(3136),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 871, DateTimeKind.Local).AddTicks(3137),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 4,
                            Quantity = 20
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("SubPrograms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1620),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1620),
                            Name = "User.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1623),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1623),
                            Name = "User.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1626),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1626),
                            Name = "User.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1629),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1629),
                            Name = "User.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 14,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1631),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1632),
                            Name = "Role.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1634),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1635),
                            Name = "Role.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1637),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1638),
                            Name = "Role.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1640),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1641),
                            Name = "Role.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 37,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1643),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1644),
                            Name = "Payment.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 38,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1646),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1646),
                            Name = "Payment.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 39,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1649),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1649),
                            Name = "Payment.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 40,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1651),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1652),
                            Name = "Payment.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 41,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1654),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1655),
                            Name = "PaymentType.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 42,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1657),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1658),
                            Name = "PaymentType.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 43,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1660),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1661),
                            Name = "PaymentType.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 44,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1663),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1663),
                            Name = "PaymentType.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 45,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1666),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1666),
                            Name = "Employee.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 46,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1668),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1669),
                            Name = "Employee.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 47,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1671),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1672),
                            Name = "Employee.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 48,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1674),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1675),
                            Name = "Employee.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 49,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1730),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1731),
                            Name = "EmployeeType.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 50,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1733),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1734),
                            Name = "EmployeeType.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 51,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1736),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1737),
                            Name = "EmployeeType.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 52,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1739),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1740),
                            Name = "EmployeeType.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 53,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1742),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1743),
                            Name = "Customer.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 54,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1745),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1746),
                            Name = "Customer.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 55,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1748),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1748),
                            Name = "Customer.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 56,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1750),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1751),
                            Name = "Customer.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 57,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1753),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1754),
                            Name = "CustomerType.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 58,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1756),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1757),
                            Name = "CustomerType.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 59,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1759),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1760),
                            Name = "CustomerType.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 60,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1762),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1763),
                            Name = "CustomerType.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 61,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1765),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1765),
                            Name = "Notification.Create",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 62,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1767),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1768),
                            Name = "Notification.Read",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 63,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1770),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1771),
                            Name = "Notification.Update",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 64,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1773),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1774),
                            Name = "Notification.Delete",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 65,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1776),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1776),
                            Name = "Brand.Create",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 66,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1779),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1779),
                            Name = "Brand.Update",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 67,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1781),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1782),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 85,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1784),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1785),
                            Name = "Brand.Read",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 68,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1787),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1788),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 69,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1790),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1790),
                            Name = "SaleStatus.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 70,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1793),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1793),
                            Name = "SaleStatus.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 71,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1795),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1796),
                            Name = "SaleStatus.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 72,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1798),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1799),
                            Name = "SaleStatus.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 73,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1801),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1802),
                            Name = "SaleType.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 74,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1804),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1804),
                            Name = "SaleType.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 75,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1807),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1807),
                            Name = "SaleType.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 76,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1809),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1810),
                            Name = "SaleType.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 77,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1812),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1813),
                            Name = "ProductGroup.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 78,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1815),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1816),
                            Name = "ProductGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 79,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1818),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1818),
                            Name = "ProductGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 80,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1821),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1821),
                            Name = "ProductGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 81,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1823),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1824),
                            Name = "ProductSubGroup.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 82,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1826),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1827),
                            Name = "ProductSubGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 83,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1829),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1830),
                            Name = "ProductSubGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 84,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1832),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1833),
                            Name = "ProductSubGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 89,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1835),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1835),
                            Name = "AppointmentType.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 90,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1837),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1838),
                            Name = "AppointmentType.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 91,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1840),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1841),
                            Name = "AppointmentType.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 92,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1843),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1844),
                            Name = "AppointmentType.Delete",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 93,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1846),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1847),
                            Name = "Sale.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 94,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1849),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1849),
                            Name = "Sale.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 95,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1851),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1852),
                            Name = "Sale.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 96,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1854),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1855),
                            Name = "Sale.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 97,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1857),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1858),
                            Name = "Product.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 98,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1860),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1860),
                            Name = "Product.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 99,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1863),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1863),
                            Name = "Product.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 100,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1865),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1866),
                            Name = "Product.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 101,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1868),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1869),
                            Name = "Appointment.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 102,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1871),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1872),
                            Name = "Appointment.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 103,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1874),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1874),
                            Name = "Appointment.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 104,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1877),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 882, DateTimeKind.Local).AddTicks(1877),
                            Name = "Appointment.Delete",
                            ProgramId = 5
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Link")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Admin User of MyBlog",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7365543d-068a-4b6a-abde-f3b67a76db79",
                            Email = "adminuser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINUSER@GMAIL.COM",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEGaxEUW71NZyJVT9yMlQ7lG2qiHCox054hvYiRAg6fQRp68lLBCqrL09qKfz+N+hOg==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "cad91995-2ae1-455c-bb7b-b7d3f65c015a",
                            TwoFactorEnabled = false,
                            UserName = "adminuser"
                        },
                        new
                        {
                            Id = 2,
                            About = "Editor User of MyBlog",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45f9f131-9605-4db1-9646-d3c7e891d6f0",
                            Email = "editoruser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITORUSER@GMAIL.COM",
                            NormalizedUserName = "EDITORUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEPUi3OmLofNeMyK70bwvFiAXbfsD/p8n5QD7CxQutfPNXEig2c3KOpGAMsciLRq2ow==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "7e861032-2042-4603-b2a6-28eb2ce41967",
                            TwoFactorEnabled = false,
                            UserName = "editoruser"
                        },
                        new
                        {
                            Id = 3,
                            About = "Editor User 2 of MyBlog",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c8eb8d8-812f-4b0f-9075-1176bd640119",
                            Email = "editoruser2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITORUSER2@GMAIL.COM",
                            NormalizedUserName = "EDITORUSER2",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "d48d5a32-8e14-428d-b9c8-3bd7460563f0",
                            TwoFactorEnabled = false,
                            UserName = "editoruser2"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(862),
                            Description = "C# Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(863),
                            Name = "C#",
                            Note = "C# Blog Kategorisi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(866),
                            Description = "C++ Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(866),
                            Name = "C++",
                            Note = "C++ Blog Kategorisi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(869),
                            Description = "JavaScript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(870),
                            Name = "JavaScript",
                            Note = "JavaScript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(872),
                            Description = "Typescript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(873),
                            Name = "Typescript",
                            Note = "Typescript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(875),
                            Description = "Java Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(876),
                            Name = "Java",
                            Note = "Java Blog Kategorisi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(878),
                            Description = "Python Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(879),
                            Name = "Python",
                            Note = "Python Blog Kategorisi"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(881),
                            Description = "Php Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(882),
                            Name = "Php",
                            Note = "Php Blog Kategorisi"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(884),
                            Description = "Kotlin Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(885),
                            Name = "Kotlin",
                            Note = "Kotlin Blog Kategorisi"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(887),
                            Description = "Swift Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(888),
                            Name = "Swift",
                            Note = "Swift Blog Kategorisi"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(890),
                            Description = "Ruby Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(891),
                            Name = "Ruby",
                            Note = "Ruby Blog Kategorisi"
                        });
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(8868),
                            Description = "Product Kategori 2 Açıkama",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(8869),
                            Name = "Product Kategori 1",
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(8872),
                            Description = "Product Kategori 2 Açıkama",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 7, 22, 17, 7, 24, 870, DateTimeKind.Local).AddTicks(8873),
                            Name = "Product Kategori 2",
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany("Appointments")
                        .HasForeignKey("UserId");

                    b.Navigation("AppointmentType");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.HasOne("MyBlog.Shared.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany("AssociatedInstitutions")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferance", "CustomerReferance")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerReferanceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Customers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferance");

                    b.Navigation("CustomerType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Notifications")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPaymentDetail", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("outPaymentDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.OutPayment", "OutPayment")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("OutPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("OutPayment");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", null)
                        .WithMany("Payments")
                        .HasForeignKey("AssociatedInstitutionId");

                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", "AssociatedInstitutions")
                        .WithMany()
                        .HasForeignKey("AssociatedInstitutionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", null)
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId1");

                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Shared.Entities.Concrete.ProductCategory", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("MyBlog.Entities.Concrete.ProductSubGroup", "ProductSubGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("ProductSubGroup");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.ProductGroup", "ProductGroup")
                        .WithMany("ProductSubGroups")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Module", "Module")
                        .WithMany("Programs")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Sales")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Sale")
                        .HasForeignKey("MyBlog.Entities.Concrete.Sale", "ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SaleStatus", "SaleStatus")
                        .WithMany("Sales")
                        .HasForeignKey("SaleStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SaleType", "SaleType")
                        .WithMany("Sales")
                        .HasForeignKey("SaleTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Product");

                    b.Navigation("SaleStatus");

                    b.Navigation("SaleType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("MyBlog.Entities.Concrete.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Program", "Program")
                        .WithMany("SubPrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Customers");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");

                    b.Navigation("outPaymentDetails");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPayment", b =>
                {
                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Navigation("ProductSubGroups");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Navigation("SubPrograms");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Articles");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
