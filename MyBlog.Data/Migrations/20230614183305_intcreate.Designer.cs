// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.Data.Concrete.EntityFramework.Context;

#nullable disable

namespace MyBlog.Data.Migrations
{
    [DbContext(typeof(MyBlogContext))]
    [Migration("20230614183305_intcreate")]
    partial class intcreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMade")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTypeId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(8577),
                            CustomerId = 1,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama2",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(8578),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentTypeId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(8583),
                            CustomerId = 2,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(8583),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentTypeId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(8586),
                            CustomerId = 3,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama3",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(8587),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(7072),
                            Description = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(7073),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Test"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(7076),
                            Description = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(7077),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CommentCount = 0,
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1836),
                            Date = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1834),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1837),
                            Note = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoTags = "C#, C# 9, .NET5, .NET Framework, .NET Core",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C# 9.0 ve .NET 5 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CommentCount = 0,
                            Content = "Yinelenen bir sayfa içeriğinin okuyucunun dikkatini dağıttığı bilinen bir gerçektir. Lorem Ipsum kullanmanın amacı, sürekli 'buraya metin gelecek, buraya metin gelecek' yazmaya kıyasla daha dengeli bir harf dağılımı sağlayarak okunurluğu artırmasıdır. Şu anda birçok masaüstü yayıncılık paketi ve web sayfa düzenleyicisi, varsayılan mıgır metinler olarak Lorem Ipsum kullanmaktadır. Ayrıca arama motorlarında 'lorem ipsum' anahtar sözcükleri ile arama yapıldığında henüz tasarım aşamasında olan çok sayıda site listelenir. Yıllar içinde, bazen kazara, bazen bilinçli olarak (örneğin mizah katılarak), çeşitli sürümleri geliştirilmiştir.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1841),
                            Date = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1840),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1841),
                            Note = "C++ 11 ve 19 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C++ 11 ve 19 Yenilikleri",
                            SeoTags = "C++ 11 ve 19 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C++ 11 ve 19 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 295
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1845),
                            Date = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1844),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1845),
                            Note = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoTags = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 12
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CommentCount = 0,
                            Content = "É um facto estabelecido de que um leitor é distraído pelo conteúdo legível de uma página quando analisa a sua mancha gráfica. Logo, o uso de Lorem Ipsum leva a uma distribuição mais ou menos normal de letras, ao contrário do uso de 'Conteúdo aqui,conteúdo aqui'', tornando-o texto legível. Muitas ferramentas de publicação electrónica e editores de páginas web usam actualmente o Lorem Ipsum como o modelo de texto usado por omissão, e uma pesquisa por 'lorem ipsum' irá encontrar muitos websites ainda na sua infância. Várias versões têm evoluído ao longo dos anos, por vezes por acidente, por vezes propositadamente (como no caso do humor).",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1849),
                            Date = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1848),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1850),
                            Note = "Typescript 4.1 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Typescript 4.1, Typescript, TYPESCRIPT 2021",
                            SeoTags = "Typescript 4.1 Güncellemeleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Typescript 4.1",
                            UserId = 1,
                            ViewsCount = 666
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1853),
                            Date = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1852),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1854),
                            Note = "JAVA",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Java, Android, Mobile, Kotlin, Uygulama Geliştirme",
                            SeoTags = "Java, Mobil, Kotlin, Android, IOS, SWIFT",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Java ve Android'in Geleceği | 2021",
                            UserId = 1,
                            ViewsCount = 3225
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            CommentCount = 0,
                            Content = "Le Lorem Ipsum est simplement du faux texte employé dans la composition et la mise en page avant impression. Le Lorem Ipsum est le faux texte standard de l'imprimerie depuis les années 1500, quand un imprimeur anonyme assembla ensemble des morceaux de texte pour réaliser un livre spécimen de polices de texte. Il n'a pas fait que survivre cinq siècles, mais s'est aussi adapté à la bureautique informatique, sans que son contenu n'en soit modifié. Il a été popularisé dans les années 1960 grâce à la vente de feuilles Letraset contenant des passages du Lorem Ipsum, et, plus récemment, par son inclusion dans des applications de mise en page de texte, comme Aldus PageMaker.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1857),
                            Date = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1856),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1858),
                            Note = "Python",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Python ile Veri Madenciliği",
                            SeoTags = "Python, Veri Madenciliği Nasıl Yapılır?",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Python ile Veri Madenciliği | 2021",
                            UserId = 1,
                            ViewsCount = 9999
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            CommentCount = 0,
                            Content = "Contrairement à une opinion répandue, le Lorem Ipsum n'est pas simplement du texte aléatoire. Il trouve ses racines dans une oeuvre de la littérature latine classique datant de 45 av. J.-C., le rendant vieux de 2000 ans. Un professeur du Hampden-Sydney College, en Virginie, s'est intéressé à un des mots latins les plus obscurs, consectetur, extrait d'un passage du Lorem Ipsum, et en étudiant tous les usages de ce mot dans la littérature classique, découvrit la source incontestable du Lorem Ipsum. Il provient en fait des sections 1.10.32 et 1.10.33 du 0De Finibus Bonorum et Malorum' (Des Suprêmes Biens et des Suprêmes Maux) de Cicéron. Cet ouvrage, très populaire pendant la Renaissance, est un traité sur la théorie de l'éthique. Les premières lignes du Lorem Ipsum, 'Lorem ipsum dolor sit amet...'', proviennent de la section 1.10.32",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1861),
                            Date = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1860),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1862),
                            Note = "PHP",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Php ile API Oluşturma Rehberi",
                            SeoTags = "php, laravel, api, oop",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Php Laravel Başlangıç Rehberi | API",
                            UserId = 1,
                            ViewsCount = 4818
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            CommentCount = 0,
                            Content = "Plusieurs variations de Lorem Ipsum peuvent être trouvées ici ou là, mais la majeure partie d'entre elles a été altérée par l'addition d'humour ou de mots aléatoires qui ne ressemblent pas une seconde à du texte standard. Si vous voulez utiliser un passage du Lorem Ipsum, vous devez être sûr qu'il n'y a rien d'embarrassant caché dans le texte. Tous les générateurs de Lorem Ipsum sur Internet tendent à reproduire le même extrait sans fin, ce qui fait de lipsum.com le seul vrai générateur de Lorem Ipsum. Iil utilise un dictionnaire de plus de 200 mots latins, en combinaison de plusieurs structures de phrases, pour générer un Lorem Ipsum irréprochable. Le Lorem Ipsum ainsi obtenu ne contient aucune répétition, ni ne contient des mots farfelus, ou des touches d'humour.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1866),
                            Date = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1865),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1867),
                            Note = "Kotlin",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Kotlin ile Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "kotlin, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Kotlin ile Mobil Programlama",
                            UserId = 1,
                            ViewsCount = 750
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            CommentCount = 0,
                            Content = "Al contrario di quanto si pensi, Lorem Ipsum non è semplicemente una sequenza casuale di caratteri. Risale ad un classico della letteratura latina del 45 AC, cosa che lo rende vecchio di 2000 anni. Richard McClintock, professore di latino al Hampden-Sydney College in Virginia, ha ricercato una delle più oscure parole latine, consectetur, da un passaggio del Lorem Ipsum e ha scoperto tra i vari testi in cui è citata, la fonte da cui è tratto il testo, le sezioni 1.10.32 and 1.10.33 del 'de Finibus Bonorum et Malorum' di Cicerone. Questo testo è un trattato su teorie di etica, molto popolare nel Rinascimento. La prima riga del Lorem Ipsum, 'Lorem ipsum dolor sit amet..'', è tratta da un passaggio della sezione 1.10.32.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1870),
                            Date = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1870),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1871),
                            Note = "Swift",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Swift ile IOS Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "IOS, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Swift ile IOS Programlama",
                            UserId = 1,
                            ViewsCount = 14900
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            CommentCount = 0,
                            Content = "Esistono innumerevoli variazioni dei passaggi del Lorem Ipsum, ma la maggior parte hanno subito delle variazioni del tempo, a causa dell’inserimento di passaggi ironici, o di sequenze casuali di caratteri palesemente poco verosimili. Se si decide di utilizzare un passaggio del Lorem Ipsum, è bene essere certi che non contenga nulla di imbarazzante. In genere, i generatori di testo segnaposto disponibili su internet tendono a ripetere paragrafi predefiniti, rendendo questo il primo vero generatore automatico su intenet. Infatti utilizza un dizionario di oltre 200 vocaboli latini, combinati con un insieme di modelli di strutture di periodi, per generare passaggi di testo verosimili. Il testo così generato è sempre privo di ripetizioni, parole imbarazzanti o fuori luogo ecc.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1874),
                            Date = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1874),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(1875),
                            Note = "Ruby",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Ruby, Ruby on Rails Web Programlama, AirBnb Klon",
                            SeoTags = "Ruby on Rails, Ruby, Web Programlama, AirBnb",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Ruby on Rails ile AirBnb Klon Kodlayalım",
                            UserId = 1,
                            ViewsCount = 26777
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("AssociatedInstitutions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2005),
                            Description = "İş Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2005),
                            PaymentTypeId = 1,
                            Title = "İş Bankası"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2007),
                            Description = "Garanti Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2008),
                            PaymentTypeId = 1,
                            Title = "Garanti Bankası"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2009),
                            Description = "Yapı Kredi Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2009),
                            PaymentTypeId = 1,
                            Title = "Yapı Kredi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2010),
                            Description = "Akbank Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2010),
                            PaymentTypeId = 1,
                            Title = "Akbank"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2011),
                            Description = "Avrupa Ses Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2012),
                            PaymentTypeId = 2,
                            Title = "Avrupa Ses"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2013),
                            Description = "Sivasot Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2013),
                            PaymentTypeId = 2,
                            Title = "Sivasot"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2014),
                            Description = "Timtoptan Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2015),
                            PaymentTypeId = 2,
                            Title = "Timtoptan"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(6289),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(6290),
                            Title = "Brand Title Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "act Manuel"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4709),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4710),
                            Note = "C# Makale Yorumu",
                            Text = "Lorem Ipsum pasajlarının birçok çeşitlemesi vardır. Ancak bunların büyük bir çoğunluğu mizah katılarak veya rastgele sözcükler eklenerek değiştirilmişlerdir. Eğer bir Lorem Ipsum pasajı kullanacaksanız, metin aralarına utandırıcı sözcükler gizlenmediğinden emin olmanız gerekir. İnternet'teki tüm Lorem Ipsum üreteçleri önceden belirlenmiş metin bloklarını yineler. Bu da, bu üreteci İnternet üzerindeki gerçek Lorem Ipsum üreteci yapar. Bu üreteç, 200'den fazla Latince sözcük ve onlara ait cümle yapılarını içeren bir sözlük kullanır. Bu nedenle, üretilen Lorem Ipsum metinleri yinelemelerden, mizahtan ve karakteristik olmayan sözcüklerden uzaktır."
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4713),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4713),
                            Note = "C++ Makale Yorumu",
                            Text = "Lorem Ipsum jest tekstem stosowanym jako przykładowy wypełniacz w przemyśle poligraficznym. Został po raz pierwszy użyty w XV w. przez nieznanego drukarza do wypełnienia tekstem próbnej książki. Pięć wieków później zaczął być używany przemyśle elektronicznym, pozostając praktycznie niezmienionym. Spopularyzował się w latach 60. XX w. wraz z publikacją arkuszy Letrasetu, zawierających fragmenty Lorem Ipsum, a ostatnio z zawierającym różne wersje Lorem Ipsum oprogramowaniem przeznaczonym do realizacji druków na komputerach osobistych, jak Aldus PageMaker"
                        },
                        new
                        {
                            Id = 3,
                            ArticleId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4716),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4716),
                            Note = "JavaScript Makale Yorumu",
                            Text = "Ang Lorem Ipsum ay ginagamit na modelo ng industriya ng pagpriprint at pagtytypeset. Ang Lorem Ipsum ang naging regular na modelo simula pa noong 1500s, noong may isang di kilalang manlilimbag and kumuha ng galley ng type at ginulo ang pagkaka-ayos nito upang makagawa ng libro ng mga type specimen. Nalagpasan nito hindi lang limang siglo, kundi nalagpasan din nito ang paglaganap ng electronic typesetting at nanatiling parehas. Sumikat ito noong 1960s kasabay ng pag labas ng Letraset sheets na mayroong mga talata ng Lorem Ipsum, at kamakailan lang sa mga desktop publishing software tulad ng Aldus Pagemaker ginamit ang mga bersyon ng Lorem Ipsum."
                        },
                        new
                        {
                            Id = 4,
                            ArticleId = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4719),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4719),
                            Note = "Typescript Makale Yorumu",
                            Text = "Lorem Ipsum er rett og slett dummytekst fra og for trykkeindustrien. Lorem Ipsum har vært bransjens standard for dummytekst helt siden 1500-tallet, da en ukjent boktrykker stokket en mengde bokstaver for å lage et prøveeksemplar av en bok. Lorem Ipsum har tålt tidens tann usedvanlig godt, og har i tillegg til å bestå gjennom fem århundrer også tålt spranget over til elektronisk typografi uten vesentlige endringer. Lorem Ipsum ble gjort allment kjent i 1960-årene ved lanseringen av Letraset-ark med avsnitt fra Lorem Ipsum, og senere med sideombrekkingsprogrammet Aldus PageMaker som tok i bruk nettopp Lorem Ipsum for dummytekst."
                        },
                        new
                        {
                            Id = 5,
                            ArticleId = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4722),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4723),
                            Note = "Java Makale Yorumu",
                            Text = "Lorem Ipsum este pur şi simplu o machetă pentru text a industriei tipografice. Lorem Ipsum a fost macheta standard a industriei încă din secolul al XVI-lea, când un tipograf anonim a luat o planşetă de litere şi le-a amestecat pentru a crea o carte demonstrativă pentru literele respective. Nu doar că a supravieţuit timp de cinci secole, dar şi a facut saltul în tipografia electronică practic neschimbată. A fost popularizată în anii '60 odată cu ieşirea colilor Letraset care conţineau pasaje Lorem Ipsum, iar mai recent, prin programele de publicare pentru calculator, ca Aldus PageMaker care includeau versiuni de Lorem Ipsum."
                        },
                        new
                        {
                            Id = 6,
                            ArticleId = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4725),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4726),
                            Note = "Python Makale Yorumu",
                            Text = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a."
                        },
                        new
                        {
                            Id = 7,
                            ArticleId = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4728),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4729),
                            Note = "Php Makale Yorumu",
                            Text = "Lorem Ipsum – tas ir teksta salikums, kuru izmanto poligrāfijā un maketēšanas darbos. Lorem Ipsum ir kļuvis par vispārpieņemtu teksta aizvietotāju kopš 16. gadsimta sākuma. Tajā laikā kāds nezināms iespiedējs izveidoja teksta fragmentu, lai nodrukātu grāmatu ar burtu paraugiem. Tas ir ne tikai pārdzīvojis piecus gadsimtus, bet bez ievērojamām izmaiņām saglabājies arī mūsdienās, pārejot uz datorizētu teksta apstrādi. Tā popularizēšanai 60-tajos gados kalpoja Letraset burtu paraugu publicēšana ar Lorem Ipsum teksta fragmentiem un, nesenā pagātnē, tādas maketēšanas programmas kā Aldus PageMaker, kuras šablonu paraugos ir izmantots Lorem Ipsum teksts."
                        },
                        new
                        {
                            Id = 8,
                            ArticleId = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4731),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4732),
                            Note = "Kotlin Makale Yorumu",
                            Text = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like)."
                        },
                        new
                        {
                            Id = 9,
                            ArticleId = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4734),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4735),
                            Note = "Swift Makale Yorumu",
                            Text = "هنالك العديد من الأنواع المتوفرة لنصوص لوريم إيبسوم، ولكن الغالبية تم تعديلها بشكل ما عبر إدخال بعض النوادر أو الكلمات العشوائية إلى النص. إن كنت تريد أن تستخدم نص لوريم إيبسوم ما، عليك أن تتحقق أولاً أن ليس هناك أي كلمات أو عبارات محرجة أو غير لائقة مخبأة في هذا النص. بينما تعمل جميع مولّدات نصوص لوريم إيبسوم على الإنترنت على إعادة تكرار مقاطع من نص لوريم إيبسوم نفسه عدة مرات بما تتطلبه الحاجة، يقوم مولّدنا هذا باستخدام كلمات من قاموس يحوي على أكثر من 200 كلمة لا تينية، مضاف إليها مجموعة من الجمل النموذجية، لتكوين نص لوريم إيبسوم ذو شكل منطقي قريب إلى النص الحقيقي. وبالتالي يكون النص الناتح خالي من التكرار، أو أي كلمات أو عبارات غير لائقة أو ما شابه. وهذا ما يجعله أول مولّد نص لوريم إيبسوم حقيقي على الإنترنت."
                        },
                        new
                        {
                            Id = 10,
                            ArticleId = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4737),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(4738),
                            Note = "Ruby Makale Yorumu",
                            Text = "Lorem Ipsum，也称乱数假文或者哑元文本， 是印刷及排版领域所常用的虚拟文字。由于曾经一台匿名的打印机刻意打乱了一盒印刷字体从而造出一本字体样品书，Lorem Ipsum从西元15世纪起就被作为此领域的标准文本使用。它不仅延续了五个世纪，还通过了电子排版的挑战，其雏形却依然保存至今。在1960年代，”Leatraset”公司发布了印刷着Lorem Ipsum段落的纸张，从而广泛普及了它的使用。最近，计算机桌面出版软件”Aldus PageMaker”也通过同样的方式使Lorem Ipsum落入大众的视野。"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HospitalOfReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 6, 18, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8140),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8135),
                            CustomerReferanceId = 1,
                            CustomerTypeId = 1,
                            Email = "hasta1@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8136),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 2,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 6, 19, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8150),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8148),
                            CustomerReferanceId = 1,
                            CustomerTypeId = 2,
                            Email = "hasta2@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8149),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 3,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 6, 20, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8155),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8153),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8153),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 4,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 6, 21, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8160),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8157),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8158),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 5,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 6, 22, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8164),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8162),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8163),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 6,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 6, 23, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8169),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8167),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8167),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 7,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 6, 24, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8173),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8171),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(8172),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("CustomerReferances", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(9191),
                            Description = "Description",
                            FirstName = "Sema",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(9191),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Phone = "+905050102249"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(9195),
                            Description = "Description",
                            FirstName = "Sema",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(9196),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Phone = "+905050102249"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(43),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(44),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(46),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(47),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(49),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(50),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 3"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(4565),
                            Email = "bedirhangn@gmail.com",
                            EmployeeTypeId = 1,
                            FirstName = "Personel 1",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(4566),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 2,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(4569),
                            EmployeeTypeId = 1,
                            FirstName = "Ikinci Personel",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(4569),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 3,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(4572),
                            EmployeeTypeId = 1,
                            FirstName = "Ucuncu perosnel",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(4573),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(4724),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(4725),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(4727),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(4728),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(4729),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(4729),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(4732),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(4733),
                            Note = "Not",
                            Title = "Title"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDaily")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncome")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Expenses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2122),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2123),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2125),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2126),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2128),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2129),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2131),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2132),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2134),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(2135),
                            Note = "TEST"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(104),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(105),
                            Name = "AgendaModule.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(108),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(108),
                            Name = "CustomerModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(111),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(111),
                            Name = "FinanceModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(113),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(114),
                            Name = "HomeModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(116),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(117),
                            Name = "InstitutionalModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(119),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(120),
                            Name = "MarketingModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(122),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(123),
                            Name = "StockModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(9788),
                            CustomerId = 1,
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(9789),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 6, 17, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(9792),
                            Title = "Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(9798),
                            CustomerId = 2,
                            Description = "Doğum günü yaklaşmakta.",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(9798),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 6, 16, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(9799),
                            Title = "Doğum Günü!",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(9802),
                            CustomerId = 3,
                            Description = "Aylık cihaz bakımı için konuşulacak",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(9802),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 6, 15, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(9804),
                            Title = "Cihaz Bakımı!",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AmountPaid")
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedInstitutionId")
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedInstitutionsId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId1")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTypeId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedInstitutionId");

                    b.HasIndex("AssociatedInstitutionsId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PaymentTypeId1");

                    b.ToTable("Payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1,
                            AssociatedInstitutionsId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3051),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3052),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            AmountPaid = 1,
                            AssociatedInstitutionsId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3057),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3057),
                            PaymentTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            AmountPaid = 1,
                            AssociatedInstitutionsId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3060),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3061),
                            PaymentTypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            AmountPaid = 1,
                            AssociatedInstitutionsId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3063),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3064),
                            PaymentTypeId = 4
                        },
                        new
                        {
                            Id = 5,
                            AmountPaid = 1,
                            AssociatedInstitutionsId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3066),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3067),
                            PaymentTypeId = 5
                        },
                        new
                        {
                            Id = 6,
                            AmountPaid = 1,
                            AssociatedInstitutionsId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3070),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3070),
                            PaymentTypeId = 6
                        },
                        new
                        {
                            Id = 7,
                            AmountPaid = 1,
                            AssociatedInstitutionsId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3073),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3074),
                            PaymentTypeId = 7
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3293),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3294),
                            Title = "KK | POS"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3295),
                            Description = "Mail Order Payment",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3296),
                            Title = "Mail Order"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3297),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 318, DateTimeKind.Local).AddTicks(3297),
                            Title = "Peşin"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("ProductSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductSubGroupId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(3701),
                            IsActive = true,
                            IsDeleted = false,
                            IsSold = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(3702),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Siemens Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT4"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(3706),
                            IsActive = true,
                            IsDeleted = false,
                            IsSold = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(3706),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Jabra Signia",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT3"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(3709),
                            IsActive = true,
                            IsDeleted = false,
                            IsSold = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(3710),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Apple Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT2"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(3712),
                            IsActive = true,
                            IsDeleted = false,
                            IsSold = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(3713),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Samsung Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(713),
                            Description = "Ürün Grubu Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(714),
                            Title = "Ürün Grubu 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductSubGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(2177),
                            Description = "Ürün Alt Grubu Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(2178),
                            ProductGroupId = 1,
                            Title = "Ürün Alt Grubu Başlığı"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Programs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(862),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(863),
                            ModuleId = 5,
                            Name = "EmployeeProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(866),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(866),
                            ModuleId = 5,
                            Name = "UserProgram.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(869),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(869),
                            ModuleId = 7,
                            Name = "StockProgram.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(872),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(872),
                            ModuleId = 6,
                            Name = "CustomerReferenceProgram.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(874),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(875),
                            ModuleId = 1,
                            Name = "AppointmentProgram.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(877),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(878),
                            ModuleId = 1,
                            Name = "NotificationProgram.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(880),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(881),
                            ModuleId = 3,
                            Name = "PaymentProgram.Read"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(883),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(884),
                            ModuleId = 2,
                            Name = "CustomerProgram.Read"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(886),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(887),
                            ModuleId = 7,
                            Name = "BrandProgram.Read"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(889),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(890),
                            ModuleId = 3,
                            Name = "SaleProgram.Read"
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(892),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(893),
                            ModuleId = 7,
                            Name = "ProductProgram.Read"
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(895),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(895),
                            ModuleId = 5,
                            Name = "RoleProgram.Create"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessLevel = 3,
                            ConcurrencyStamp = "04e6ffd5-6944-47bd-bfa2-9f4dcb3b8ab5",
                            Definition = "Kullanıcı Ekleme Yetkisi",
                            Name = "User.Create",
                            NormalizedName = "USER.CREATE"
                        },
                        new
                        {
                            Id = 2,
                            AccessLevel = 3,
                            ConcurrencyStamp = "98ea06b3-1024-471a-af86-375ba3891671",
                            Definition = "Kullanıcı Görüntüleme Yetkisi",
                            Name = "User.Read",
                            NormalizedName = "USER.READ"
                        },
                        new
                        {
                            Id = 3,
                            AccessLevel = 3,
                            ConcurrencyStamp = "17596ffa-d615-4f4e-af2e-1b4cf1e3328b",
                            Definition = "Kullanıcı Güncelleme Yetkisi",
                            Name = "User.Update",
                            NormalizedName = "USER.UPDATE"
                        },
                        new
                        {
                            Id = 4,
                            AccessLevel = 3,
                            ConcurrencyStamp = "17ea844e-30e7-43a2-92cb-9fb5b8ff282c",
                            Definition = "Kullanıcı Silme Yetkisi",
                            Name = "User.Delete",
                            NormalizedName = "USER.DELETE"
                        },
                        new
                        {
                            Id = 5,
                            AccessLevel = 3,
                            ConcurrencyStamp = "35bba43a-0308-4d2d-bb50-2495f38cef54",
                            Definition = "Rol Görüntüleme Yetkisi",
                            Name = "Role.Read",
                            NormalizedName = "ROLE.READ"
                        },
                        new
                        {
                            Id = 6,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c29d7651-28cf-440d-a197-789720db4f36",
                            Definition = "Rol Güncelleme Yetkisi",
                            Name = "Role.Update",
                            NormalizedName = "ROLE.UPDATE"
                        },
                        new
                        {
                            Id = 7,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c64c06aa-fcf4-4bc8-ad3c-e0520fb2a4c0",
                            Definition = "Rol Silme Yetkisi",
                            Name = "Role.Delete",
                            NormalizedName = "ROLE.DELETE"
                        },
                        new
                        {
                            Id = 8,
                            AccessLevel = 3,
                            ConcurrencyStamp = "445a1925-7f5d-42b0-a750-f6341134f9dd",
                            Definition = "Rol Ekleme Yetkisi",
                            Name = "Role.Create",
                            NormalizedName = "ROLE.CREATE"
                        },
                        new
                        {
                            Id = 9,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0707aa8a-efa5-40dd-8612-2a9ddbe7e69b",
                            Definition = "Ödeme Ekleme Yetkisi",
                            Name = "Payment.Create",
                            NormalizedName = "PAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 10,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f175dd48-a78b-48ce-b473-2d95717ad592",
                            Definition = "Ödeme Görüntüleme Yetkisi",
                            Name = "Payment.Read",
                            NormalizedName = "PAYMENT.READ"
                        },
                        new
                        {
                            Id = 11,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8ac89399-3e9e-4e56-9b36-9b189f5df2ea",
                            Definition = "Ödeme Güncelleme Yetkisi",
                            Name = "Payment.Update",
                            NormalizedName = "PAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 12,
                            AccessLevel = 3,
                            ConcurrencyStamp = "70c4b69b-0fcd-49ae-8638-a8391be683e1",
                            Definition = "Ödeme Silme Yetkisi",
                            Name = "Payment.Delete",
                            NormalizedName = "PAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 13,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2160731d-f83c-4744-a04f-4b2f3e23b610",
                            Definition = "Ödeme Türü Ekleme Yetkisi",
                            Name = "PaymentType.Create",
                            NormalizedName = "PAYMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 14,
                            AccessLevel = 3,
                            ConcurrencyStamp = "836713db-a6d0-4588-b031-c5795dde1e5d",
                            Definition = "Ödeme Türü Görüntüleme Yetkisi",
                            Name = "PaymentType.Read",
                            NormalizedName = "PAYMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 15,
                            AccessLevel = 3,
                            ConcurrencyStamp = "92a51c3e-69ed-4c6b-8507-16fccc2d5e94",
                            Definition = "Ödeme Türü Güncelleme Yetkisi",
                            Name = "PaymentType.Update",
                            NormalizedName = "PAYMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 16,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ede6a4de-77db-43d5-a1e9-1f823640ffe4",
                            Definition = "Ödeme Türü Silme Yetkisi",
                            Name = "PaymentType.Delete",
                            NormalizedName = "PAYMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 17,
                            AccessLevel = 3,
                            ConcurrencyStamp = "30fc9bd9-68c8-461d-9c5a-6aeebeb47b64",
                            Definition = "Çalışan Ekleme Yetkisi",
                            Name = "Employee.Create",
                            NormalizedName = "EMPLOYEE.CREATE"
                        },
                        new
                        {
                            Id = 18,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2c6a12e5-ab10-4b9c-acb8-95f2f0261b90",
                            Definition = "Çalışan Görüntüleme Yetkisi",
                            Name = "Employee.Read",
                            NormalizedName = "EMPLOYEE.READ"
                        },
                        new
                        {
                            Id = 19,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1b252a98-ac62-4862-9d1c-7d6f65a85c3f",
                            Definition = "Çalışan Güncelleme Yetkisi",
                            Name = "Employee.Update",
                            NormalizedName = "EMPLOYEE.UPDATE"
                        },
                        new
                        {
                            Id = 20,
                            AccessLevel = 3,
                            ConcurrencyStamp = "77da12e4-6b8e-46c3-bfeb-c537aa2781ad",
                            Definition = "Çalışan Silme Yetkisi",
                            Name = "Employee.Delete",
                            NormalizedName = "EMPLOYEE.DELETE"
                        },
                        new
                        {
                            Id = 21,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4ab72938-bea3-457f-8e2c-7d95463cd221",
                            Definition = "Çalışan Türü Ekleme Yetkisi",
                            Name = "EmployeeType.Create",
                            NormalizedName = "EMPLOYEETYPE.CREATE"
                        },
                        new
                        {
                            Id = 22,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0932e788-da92-4be7-aa95-405b222a8fbc",
                            Definition = "Çalışan Türü Görüntüleme Yetkisi",
                            Name = "EmployeeType.Read",
                            NormalizedName = "EMPLOYEETYPE.READ"
                        },
                        new
                        {
                            Id = 23,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b7302f61-f952-4902-b716-46c91fa40ee4",
                            Definition = "Çalışan Türü Güncelleme Yetkisi",
                            Name = "EmployeeType.Update",
                            NormalizedName = "EMPLOYEETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 24,
                            AccessLevel = 3,
                            ConcurrencyStamp = "63e958c8-9813-4db7-8765-cf31a51c37c1",
                            Definition = "Çalışan Türü Silme Yetkisi",
                            Name = "EmployeeType.Delete",
                            NormalizedName = "EMPLOYEETYPE.DELETE"
                        },
                        new
                        {
                            Id = 25,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c1f454cd-0d55-414d-a06d-7069660e7d67",
                            Definition = "Müşteri Ekleme Yetkisi",
                            Name = "Customer.Create",
                            NormalizedName = "CUSTOMER.CREATE"
                        },
                        new
                        {
                            Id = 26,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c2a2c887-185a-44fe-ad43-7c6f26ad9c12",
                            Definition = "Müşteri Görüntüleme Yetkisi",
                            Name = "Customer.Read",
                            NormalizedName = "CUSTOMER.READ"
                        },
                        new
                        {
                            Id = 27,
                            AccessLevel = 3,
                            ConcurrencyStamp = "777f6d38-5cf6-4cbf-b749-4ec690d9bac6",
                            Definition = "Müşteri Güncelleme Yetkisi",
                            Name = "Customer.Update",
                            NormalizedName = "CUSTOMER.UPDATE"
                        },
                        new
                        {
                            Id = 28,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f781c50c-cc72-47d8-b981-e3dc8b60216e",
                            Definition = "Müşteri Silme Yetkisi",
                            Name = "Customer.Delete",
                            NormalizedName = "CUSTOMER.DELETE"
                        },
                        new
                        {
                            Id = 29,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3edf85b9-c4b2-4e47-bb9f-3a1067231ec1",
                            Definition = "Müşteri Tipi Ekleme Yetkisi",
                            Name = "CustomerType.Create",
                            NormalizedName = "CUSTOMERTYPE.CREATE"
                        },
                        new
                        {
                            Id = 30,
                            AccessLevel = 3,
                            ConcurrencyStamp = "53b2b696-baf1-468a-afcd-d08beaf3ae69",
                            Definition = "Müşteri Tipi Görüntüleme Yetkisi",
                            Name = "CustomerType.Read",
                            NormalizedName = "CUSTOMERTYPE.READ"
                        },
                        new
                        {
                            Id = 31,
                            AccessLevel = 3,
                            ConcurrencyStamp = "34f191b6-e725-4f9e-b5b1-3d750efbc83d",
                            Definition = "Müşteri Tipi Güncelleme Yetkisi",
                            Name = "CustomerType.Update",
                            NormalizedName = "CUSTOMERTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 32,
                            AccessLevel = 3,
                            ConcurrencyStamp = "255369ae-0d09-431e-8bf3-ecfe7c06358c",
                            Definition = "Müşteri Tipi Silme Yetkisi",
                            Name = "CustomerType.Delete",
                            NormalizedName = "CUSTOMERTYPE.DELETE"
                        },
                        new
                        {
                            Id = 33,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7a250a29-43e2-4aab-a06d-15f8c3d94488",
                            Definition = "Bildirim Ekleme Yetkisi",
                            Name = "Notification.Create",
                            NormalizedName = "NOTİFİCATİON.CREATE"
                        },
                        new
                        {
                            Id = 34,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b1673358-36c8-46a8-8d06-e410bf718eb9",
                            Definition = "Bildirim Görüntüleme Yetkisi",
                            Name = "Notification.Read",
                            NormalizedName = "NOTİFİCATİON.READ"
                        },
                        new
                        {
                            Id = 35,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a8ac98db-72f4-4d01-aa00-64adbae11b39",
                            Definition = "Bildirim Güncelleme Yetkisi",
                            Name = "Notification.Update",
                            NormalizedName = "NOTİFİCATİON.UPDATE"
                        },
                        new
                        {
                            Id = 36,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3a607632-d904-4f3f-a546-05fd51e63485",
                            Definition = "Bildirim Silme Yetkisi",
                            Name = "Notification.Delete",
                            NormalizedName = "NOTİFİCATİON.DELETE"
                        },
                        new
                        {
                            Id = 37,
                            AccessLevel = 3,
                            ConcurrencyStamp = "619768a4-0bb7-448f-9362-ca61a6e60061",
                            Definition = "Marka Ekleme Yetkisi",
                            Name = "Brand.Create",
                            NormalizedName = "BRAND.CREATE"
                        },
                        new
                        {
                            Id = 38,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0de41fb6-da7b-4c55-a6d6-53d1b82633a0",
                            Definition = "Marka Görüntüleme Yetkisi",
                            Name = "Brand.Read",
                            NormalizedName = "BRAND.READ"
                        },
                        new
                        {
                            Id = 39,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c4cf58a1-e55d-4117-905d-8b4442b56690",
                            Definition = "Marka Güncelleme Yetkisi",
                            Name = "Brand.Update",
                            NormalizedName = "BRAND.UPDATE"
                        },
                        new
                        {
                            Id = 40,
                            AccessLevel = 3,
                            ConcurrencyStamp = "dfbf7db0-47cb-4228-af77-c0b08e66f775",
                            Definition = "Marka Silme Yetkisi",
                            Name = "Brand.Delete",
                            NormalizedName = "BRAND.DELETE"
                        },
                        new
                        {
                            Id = 41,
                            AccessLevel = 3,
                            ConcurrencyStamp = "07898486-8ba8-49c6-b51f-1ca18408785e",
                            Definition = "Satış Durumu Ekleme Yetkisi",
                            Name = "SaleStatus.Create",
                            NormalizedName = "SALESTATUS.CREATE"
                        },
                        new
                        {
                            Id = 42,
                            AccessLevel = 3,
                            ConcurrencyStamp = "eae58d21-4037-478a-bf48-4092074ccb04",
                            Definition = "Satış Durumu Görüntüleme Yetkisi",
                            Name = "SaleStatus.Read",
                            NormalizedName = "SALESTATUS.READ"
                        },
                        new
                        {
                            Id = 43,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1c8e6184-246b-40cf-8b78-734d19a2df3d",
                            Definition = "Satış Durumu Güncelleme Yetkisi",
                            Name = "SaleStatus.Update",
                            NormalizedName = "SALESTATUS.UPDATE"
                        },
                        new
                        {
                            Id = 44,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d04376db-0777-4533-a2dd-c9e1ce20df5c",
                            Definition = "Satış Durumu Silme Yetkisi",
                            Name = "SaleStatus.Delete",
                            NormalizedName = "SALESTATUS.DELETE"
                        },
                        new
                        {
                            Id = 45,
                            AccessLevel = 3,
                            ConcurrencyStamp = "48666629-5007-4e30-8c8f-2c169a4031b7",
                            Definition = "Satış Türü Ekleme Yetkisi",
                            Name = "SaleType.Create",
                            NormalizedName = "SALETYPE.CREATE"
                        },
                        new
                        {
                            Id = 46,
                            AccessLevel = 3,
                            ConcurrencyStamp = "38aac2cc-6232-495a-a187-f30737e00c2a",
                            Definition = "Satış Türü Görüntüleme Yetkisi",
                            Name = "SaleType.Read",
                            NormalizedName = "SALETYPE.READ"
                        },
                        new
                        {
                            Id = 47,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a82b5443-f225-4c58-accb-b62641e91cae",
                            Definition = "Satış Türü Güncelleme Yetkisi",
                            Name = "SaleType.Update",
                            NormalizedName = "SALETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 48,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9e7b9f42-2ac2-483e-9ff0-eaf40029c1e4",
                            Definition = "Satış Türü Silme Yetkisi",
                            Name = "SaleType.Delete",
                            NormalizedName = "SALETYPE.DELETE"
                        },
                        new
                        {
                            Id = 49,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6f03d4ad-6ae5-4f1a-a8a9-d3156e25f4e5",
                            Definition = "Ürün Grubu Ekleme Yetkisi",
                            Name = "ProductGroup.Create",
                            NormalizedName = "PRODUCTGROUP.CREATE"
                        },
                        new
                        {
                            Id = 50,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bef28c67-4865-4199-ad08-100fd30632c9",
                            Definition = "Ürün Grubu Görüntüleme Yetkisi",
                            Name = "ProductGroup.Read",
                            NormalizedName = "PRODUCTGROUP.READ"
                        },
                        new
                        {
                            Id = 51,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5891a83e-2a4a-4f50-92fd-b986de44eaf3",
                            Definition = "Ürün Grubu Güncelleme Yetkisi",
                            Name = "ProductGroup.Update",
                            NormalizedName = "PRODUCTGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 52,
                            AccessLevel = 3,
                            ConcurrencyStamp = "af6570d7-bcca-4099-acd3-e6eb3774d701",
                            Definition = "Ürün Grubu Silme Yetkisi",
                            Name = "ProductGroup.Delete",
                            NormalizedName = "PRODUCTGROUP.DELETE"
                        },
                        new
                        {
                            Id = 53,
                            AccessLevel = 3,
                            ConcurrencyStamp = "35e8630e-04eb-40f8-ba11-55cf118687f3",
                            Definition = "Ürün Alt Grubu Ekleme Yetkisi",
                            Name = "ProductSubGroup.Create",
                            NormalizedName = "PRODUCTSUBGROUP.CREATE"
                        },
                        new
                        {
                            Id = 54,
                            AccessLevel = 3,
                            ConcurrencyStamp = "57f547af-662d-4505-b121-f626cf3c10c8",
                            Definition = "Ürün Alt Grubu Görüntüleme Yetkisi",
                            Name = "ProductSubGroup.Read",
                            NormalizedName = "PRODUCTSUBGROUP.READ"
                        },
                        new
                        {
                            Id = 55,
                            AccessLevel = 3,
                            ConcurrencyStamp = "01b06186-57ae-4871-9923-2700502d3912",
                            Definition = "Ürün Alt Grubu Güncelleme Yetkisi",
                            Name = "ProductSubGroup.Update",
                            NormalizedName = "PRODUCTSUBGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 56,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3196112c-c613-4745-94b2-85cfd3d6c847",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "ProductSubGroup.Delete",
                            NormalizedName = "PRODUCTSUBGROUP.DELETE"
                        },
                        new
                        {
                            Id = 57,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e9ccedcc-0b90-4c3d-8ea7-1530e723c0d4",
                            Definition = "Randevu Türü Ekleme Yetkisi",
                            Name = "AppointmentType.Create",
                            NormalizedName = "APPOİNTMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 58,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9408bac9-25ae-4772-94c2-686a00882ca4",
                            Definition = "Randevu Türü Görüntüleme Yetkisi",
                            Name = "AppointmentType.Read",
                            NormalizedName = "APPOİNTMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 59,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6fdeaf96-ac25-4058-92d8-b94ace87fbce",
                            Definition = "Randevu Türü Güncelleme Yetkisi",
                            Name = "AppointmentType.Update",
                            NormalizedName = "APPOİNTMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 60,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b7dff5bb-16f7-46f4-abcc-7c90f7e4f442",
                            Definition = "Randevu Türü Silme Yetkisi",
                            Name = "AppointmentType.Delete",
                            NormalizedName = "APPOİNTMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 61,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a449fe30-4ecf-4e36-b689-6681570f8ad6",
                            Definition = "Satış Oluşturma Yetkisi",
                            Name = "Sale.Create",
                            NormalizedName = "SALE.CREATE"
                        },
                        new
                        {
                            Id = 62,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d62ac05b-b98b-4f1e-9ac8-500621e221ee",
                            Definition = "Satış Görüntüleme Yetkisi",
                            Name = "Sale.Read",
                            NormalizedName = "SALE.READ"
                        },
                        new
                        {
                            Id = 63,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5d3d1def-8d9e-44c4-9242-54991baee011",
                            Definition = "Satış Güncelleme Yetkisi",
                            Name = "Sale.Update",
                            NormalizedName = "SALE.UPDATE"
                        },
                        new
                        {
                            Id = 64,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c91d7a4c-02ea-4f23-a89a-9ad64359747e",
                            Definition = "Satış Silme Yetkisi",
                            Name = "Sale.Delete",
                            NormalizedName = "SALE.DELETE"
                        },
                        new
                        {
                            Id = 65,
                            AccessLevel = 3,
                            ConcurrencyStamp = "78569e82-681d-46ff-9cd1-f94513880915",
                            Definition = "Ürün Ekleme Yetkisi",
                            Name = "Product.Create",
                            NormalizedName = "PRODUCT.CREATE"
                        },
                        new
                        {
                            Id = 66,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2fde359a-f73f-4aed-9074-a1d4651701d9",
                            Definition = "Ürün Görüntüleme Yetkisi",
                            Name = "Product.Read",
                            NormalizedName = "PRODUCT.READ"
                        },
                        new
                        {
                            Id = 67,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8713a440-80bb-4161-aa1a-7e106529bd1c",
                            Definition = "Ürün Güncelleme Yetkisi",
                            Name = "Product.Update",
                            NormalizedName = "PRODUCT.UPDATE"
                        },
                        new
                        {
                            Id = 68,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2f77598a-9501-400f-b0f1-b1416514175a",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "Product.Delete",
                            NormalizedName = "PRODUCT.DELETE"
                        },
                        new
                        {
                            Id = 69,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c1ba2cf0-4b02-4b28-a5d9-5f37ebd71e10",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "Appointment.Create",
                            NormalizedName = "APPOİNTMENT.CREATE"
                        },
                        new
                        {
                            Id = 70,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ea4e423f-4583-438d-9fdf-a798e848eab5",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "Appointment.Read",
                            NormalizedName = "APPOİNTMENT.READ"
                        },
                        new
                        {
                            Id = 71,
                            AccessLevel = 3,
                            ConcurrencyStamp = "60c96008-82cf-4250-a797-15c71fba970f",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "Appointment.Update",
                            NormalizedName = "APPOİNTMENT.UPDATE"
                        },
                        new
                        {
                            Id = 72,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b2669f16-797e-4654-9c83-43b35c774f20",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "Appointment.Delete",
                            NormalizedName = "APPOİNTMENT.DELETE"
                        },
                        new
                        {
                            Id = 73,
                            AccessLevel = 2,
                            ConcurrencyStamp = "d032bea8-b761-46e4-8738-efdc3f88736d",
                            Definition = "Markalar Programı Görüntüleme",
                            Name = "BrandProgram.Read",
                            NormalizedName = "BRANDPROGRAM.READ"
                        },
                        new
                        {
                            Id = 74,
                            AccessLevel = 2,
                            ConcurrencyStamp = "7ef7f21a-0ba1-40a6-bcbb-7de970912af2",
                            Definition = "Randevular Programı Görüntüleme",
                            Name = "AppointmentProgram.Read",
                            NormalizedName = "APPOİNTMENTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 75,
                            AccessLevel = 2,
                            ConcurrencyStamp = "9975ce64-57cd-429f-96ac-8b0bf471407d",
                            Definition = "Hastalar Programı Görüntüleme",
                            Name = "CustomerProgram.Read",
                            NormalizedName = "CUSTOMERPROGRAM.READ"
                        },
                        new
                        {
                            Id = 76,
                            AccessLevel = 2,
                            ConcurrencyStamp = "5c182c8d-2b48-4a33-8d02-36b9f9df7a1a",
                            Definition = "Referanslar Programı Görüntüleme",
                            Name = "CustomerReferenceProgram.Read",
                            NormalizedName = "CUSTOMERREFERENCEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 77,
                            AccessLevel = 2,
                            ConcurrencyStamp = "172ae70e-bf7a-45cc-93f9-1d6f9c626b25",
                            Definition = "Personeller Programı Görüntüleme",
                            Name = "EmployeeProgram.Read",
                            NormalizedName = "EMPLOYEEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 78,
                            AccessLevel = 2,
                            ConcurrencyStamp = "46e6baef-0c56-48df-8235-d086cca23284",
                            Definition = "Bildirimler Programı Görüntüleme",
                            Name = "NotificationProgram.Read",
                            NormalizedName = "NOTİFİCATİONPROGRAM.READ"
                        },
                        new
                        {
                            Id = 79,
                            AccessLevel = 2,
                            ConcurrencyStamp = "b1b6df20-8e97-422c-867d-4d72741265d9",
                            Definition = "Ödemeler Programı Görüntüleme",
                            Name = "PaymentProgram.Read",
                            NormalizedName = "PAYMENTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 80,
                            AccessLevel = 2,
                            ConcurrencyStamp = "040efa43-df90-4384-a0d7-90552025848d",
                            Definition = "Ürünler Programı Görüntüleme",
                            Name = "ProductProgram.Read",
                            NormalizedName = "PRODUCTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 81,
                            AccessLevel = 2,
                            ConcurrencyStamp = "b444b250-b2bc-4d5f-95ad-59bf2bec574d",
                            Definition = "Roller Programı Görüntüleme",
                            Name = "RoleProgram.Create",
                            NormalizedName = "ROLEPROGRAM.CREATE"
                        },
                        new
                        {
                            Id = 82,
                            AccessLevel = 2,
                            ConcurrencyStamp = "e7ea9e81-0046-4484-ad90-0a6e2895d264",
                            Definition = "Satışlar Programı Görüntüleme",
                            Name = "SaleProgram.Read",
                            NormalizedName = "SALEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 83,
                            AccessLevel = 2,
                            ConcurrencyStamp = "cae4f84d-10fb-438a-893e-788068ec369c",
                            Definition = "Stok Programı Görüntüleme",
                            Name = "StockProgram.Read",
                            NormalizedName = "STOCKPROGRAM.READ"
                        },
                        new
                        {
                            Id = 84,
                            AccessLevel = 2,
                            ConcurrencyStamp = "970c9b6b-db47-480b-85ac-57ea1e09ef3d",
                            Definition = "Kullanıcılar Programı Görüntüleme",
                            Name = "UserProgram.Read",
                            NormalizedName = "USERPROGRAM.READ"
                        },
                        new
                        {
                            Id = 85,
                            AccessLevel = 1,
                            ConcurrencyStamp = "3d2b30e5-08c0-44db-b71c-52c8475942e9",
                            Definition = "Stok Modülü Görüntüleme",
                            Name = "StockModule.Read",
                            NormalizedName = "StockModule.Read"
                        },
                        new
                        {
                            Id = 86,
                            AccessLevel = 1,
                            ConcurrencyStamp = "f8d2d8a1-2c61-4206-b75e-251f60e4b77d",
                            Definition = "MArketing Modülü Görüntüleme",
                            Name = "MarketingModule.Read",
                            NormalizedName = "MARKETİNGMODULE.READ"
                        },
                        new
                        {
                            Id = 87,
                            AccessLevel = 1,
                            ConcurrencyStamp = "fb9e2bd5-34ac-439f-935b-46cfecf2be1d",
                            Definition = "Ajanda Modülü Görüntüleme",
                            Name = "AgendaModule.Read",
                            NormalizedName = "AGENDAMODULE.READ"
                        },
                        new
                        {
                            Id = 88,
                            AccessLevel = 1,
                            ConcurrencyStamp = "b5e8d09d-7137-45a4-b0a8-b2f8f09cddce",
                            Definition = "Kurumsal Modülü Görüntüleme",
                            Name = "InstitutionalModule.Read",
                            NormalizedName = "INSTİTUTİONALMODULE.READ"
                        },
                        new
                        {
                            Id = 89,
                            AccessLevel = 1,
                            ConcurrencyStamp = "17e32d5d-82ed-4185-ada5-eaa695ea36a7",
                            Definition = "Müşteri Modülü Görüntüleme",
                            Name = "CustomerModule.Read",
                            NormalizedName = "CUSTOMERMODULE.READ"
                        },
                        new
                        {
                            Id = 90,
                            AccessLevel = 1,
                            ConcurrencyStamp = "98c4ebee-a76e-4496-bb61-616a470c98d5",
                            Definition = "Finans Modülü Görüntüleme",
                            Name = "FinanceModule.Read",
                            NormalizedName = "FİNANCEMODULE.READ"
                        },
                        new
                        {
                            Id = 91,
                            AccessLevel = 1,
                            ConcurrencyStamp = "9178d122-5c29-4668-bf04-59dbe7f974c1",
                            Definition = "Anasayfa Görüntüleme Yetkisi",
                            Name = "HomeModule.Read",
                            NormalizedName = "HOMEMODULE.READ"
                        },
                        new
                        {
                            Id = 92,
                            AccessLevel = 1,
                            ConcurrencyStamp = "27c27b0f-e365-492a-a683-0167eba5a63e",
                            Definition = "SüperAdmin Yetkisi",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMİN"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfSgk")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvoiceDue")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.HasIndex("SaleStatusId");

                    b.HasIndex("SaleTypeId");

                    b.ToTable("Sales", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 500,
                            AmountOfSgk = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(8189),
                            CustomerId = 1,
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsInvoiceDue = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(8190),
                            ProductId = 1,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 200,
                            AmountOfSgk = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(8195),
                            CustomerId = 1,
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsInvoiceDue = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(8195),
                            ProductId = 2,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 500,
                            AmountOfSgk = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(8198),
                            CustomerId = 1,
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsInvoiceDue = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(8199),
                            ProductId = 3,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SaleStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(3062),
                            Description = "açıklama deneme status sale 1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(3063),
                            Title = "Satış Aşamasında"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(3066),
                            Description = "açıklama deneme status sale 1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(3067),
                            Title = "Satıldı"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SaleTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(9065),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(9065),
                            Title = "Nakit"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(9068),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(9069),
                            Title = "Kart"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(9071),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(9072),
                            Title = "Çek"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(9074),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 319, DateTimeKind.Local).AddTicks(9075),
                            Title = "Senet"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("Stocks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(5187),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(5188),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 1,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(5191),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(5191),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 2,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(5194),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(5194),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 3,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(5197),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(5197),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 4,
                            Quantity = 20
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("SubPrograms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1625),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1626),
                            Name = "User.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1629),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1629),
                            Name = "User.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1631),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1632),
                            Name = "User.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1634),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1635),
                            Name = "User.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 14,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1637),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1638),
                            Name = "Role.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1640),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1641),
                            Name = "Role.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1643),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1644),
                            Name = "Role.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1646),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1647),
                            Name = "Role.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 37,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1649),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1650),
                            Name = "Payment.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 38,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1652),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1653),
                            Name = "Payment.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 39,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1655),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1656),
                            Name = "Payment.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 40,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1658),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1658),
                            Name = "Payment.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 41,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1661),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1661),
                            Name = "PaymentType.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 42,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1663),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1664),
                            Name = "PaymentType.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 43,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1666),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1667),
                            Name = "PaymentType.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 44,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1669),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1670),
                            Name = "PaymentType.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 45,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1672),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1673),
                            Name = "Employee.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 46,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1675),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1676),
                            Name = "Employee.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 47,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1678),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1679),
                            Name = "Employee.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 48,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1681),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1682),
                            Name = "Employee.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 49,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1684),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1684),
                            Name = "EmployeeType.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 50,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1687),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1687),
                            Name = "EmployeeType.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 51,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1689),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1690),
                            Name = "EmployeeType.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 52,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1692),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1693),
                            Name = "EmployeeType.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 53,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1695),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1696),
                            Name = "Customer.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 54,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1698),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1699),
                            Name = "Customer.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 55,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1701),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1702),
                            Name = "Customer.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 56,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1704),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1705),
                            Name = "Customer.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 57,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1707),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1708),
                            Name = "CustomerType.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 58,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1710),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1710),
                            Name = "CustomerType.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 59,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1713),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1713),
                            Name = "CustomerType.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 60,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1716),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1716),
                            Name = "CustomerType.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 61,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1718),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1719),
                            Name = "Notification.Create",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 62,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1721),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1722),
                            Name = "Notification.Read",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 63,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1724),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1725),
                            Name = "Notification.Update",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 64,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1727),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1728),
                            Name = "Notification.Delete",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 65,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1730),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1731),
                            Name = "Brand.Create",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 66,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1733),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1733),
                            Name = "Brand.Update",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 67,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1735),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1736),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 85,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1738),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1739),
                            Name = "Brand.Read",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 68,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1741),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1742),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 69,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1744),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1745),
                            Name = "SaleStatus.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 70,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1747),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1748),
                            Name = "SaleStatus.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 71,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1750),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1750),
                            Name = "SaleStatus.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 72,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1753),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1753),
                            Name = "SaleStatus.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 73,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1756),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1756),
                            Name = "SaleType.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 74,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1759),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1759),
                            Name = "SaleType.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 75,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1762),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1762),
                            Name = "SaleType.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 76,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1765),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1765),
                            Name = "SaleType.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 77,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1767),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1768),
                            Name = "ProductGroup.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 78,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1770),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1771),
                            Name = "ProductGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 79,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1773),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1774),
                            Name = "ProductGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 80,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1776),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1777),
                            Name = "ProductGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 81,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1779),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1780),
                            Name = "ProductSubGroup.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 82,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1782),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1782),
                            Name = "ProductSubGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 83,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1785),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1785),
                            Name = "ProductSubGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 84,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1787),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1788),
                            Name = "ProductSubGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 89,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1790),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1791),
                            Name = "AppointmentType.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 90,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1793),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1794),
                            Name = "AppointmentType.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 91,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1796),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1797),
                            Name = "AppointmentType.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 92,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1799),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1800),
                            Name = "AppointmentType.Delete",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 93,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1802),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1802),
                            Name = "Sale.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 94,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1805),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1806),
                            Name = "Sale.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 95,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1808),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1809),
                            Name = "Sale.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 96,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1836),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1836),
                            Name = "Sale.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 97,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1839),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1839),
                            Name = "Product.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 98,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1841),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1842),
                            Name = "Product.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 99,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1844),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1845),
                            Name = "Product.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 100,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1847),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1848),
                            Name = "Product.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 101,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1850),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1851),
                            Name = "Appointment.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 102,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1853),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1854),
                            Name = "Appointment.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 103,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1856),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1856),
                            Name = "Appointment.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 104,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1859),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 320, DateTimeKind.Local).AddTicks(1859),
                            Name = "Appointment.Delete",
                            ProgramId = 5
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Link")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Admin User of MyBlog",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "103d7dc2-cd13-4a67-81c2-bd372a4f7fe4",
                            Email = "adminuser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINUSER@GMAIL.COM",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEKj2CY9JJCylVXgcZymjF5eZpBDQLubCHmk8DqbNNX99XqCjelchffL4tAczT3pa+A==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "b2be25db-747e-4831-8d56-2203232f34dc",
                            TwoFactorEnabled = false,
                            UserName = "adminuser"
                        },
                        new
                        {
                            Id = 2,
                            About = "Editor User of MyBlog",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c30bab9a-19cd-4425-8ade-5caf67c94d2a",
                            Email = "editoruser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITORUSER@GMAIL.COM",
                            NormalizedUserName = "EDITORUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEN81WsfzYosanqoOmWbqCVf0yoWg2uTSVv/McegkKyQqI2JmYVPgiLqwx5Bn5Iz/ZQ==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "2a0505ef-37b0-4013-a230-f069c048578f",
                            TwoFactorEnabled = false,
                            UserName = "editoruser"
                        },
                        new
                        {
                            Id = 3,
                            About = "Editor User 2 of MyBlog",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "882b091d-439a-462b-8990-e7d2e9df95ae",
                            Email = "editoruser2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITORUSER2@GMAIL.COM",
                            NormalizedUserName = "EDITORUSER2",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "83b0cadb-f091-4436-bbf8-1f272b855525",
                            TwoFactorEnabled = false,
                            UserName = "editoruser2"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 92
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2935),
                            Description = "C# Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2936),
                            Name = "C#",
                            Note = "C# Blog Kategorisi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2938),
                            Description = "C++ Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2939),
                            Name = "C++",
                            Note = "C++ Blog Kategorisi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2941),
                            Description = "JavaScript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2942),
                            Name = "JavaScript",
                            Note = "JavaScript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2944),
                            Description = "Typescript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2945),
                            Name = "Typescript",
                            Note = "Typescript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2947),
                            Description = "Java Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2948),
                            Name = "Java",
                            Note = "Java Blog Kategorisi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2950),
                            Description = "Python Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2951),
                            Name = "Python",
                            Note = "Python Blog Kategorisi"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2953),
                            Description = "Php Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2954),
                            Name = "Php",
                            Note = "Php Blog Kategorisi"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2956),
                            Description = "Kotlin Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2957),
                            Name = "Kotlin",
                            Note = "Kotlin Blog Kategorisi"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2959),
                            Description = "Swift Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2960),
                            Name = "Swift",
                            Note = "Swift Blog Kategorisi"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2962),
                            Description = "Ruby Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 308, DateTimeKind.Local).AddTicks(2963),
                            Name = "Ruby",
                            Note = "Ruby Blog Kategorisi"
                        });
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(984),
                            Description = "Product Kategori 2 Açıkama",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(985),
                            Name = "Product Kategori 1",
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(988),
                            Description = "Product Kategori 2 Açıkama",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 6, 14, 21, 33, 4, 309, DateTimeKind.Local).AddTicks(989),
                            Name = "Product Kategori 2",
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany("Appointments")
                        .HasForeignKey("UserId");

                    b.Navigation("AppointmentType");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.HasOne("MyBlog.Shared.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany("AssociatedInstitutions")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferance", "CustomerReferance")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerReferanceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Customers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferance");

                    b.Navigation("CustomerType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Notifications")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", null)
                        .WithMany("Payments")
                        .HasForeignKey("AssociatedInstitutionId");

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("AssociatedInstitutionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", null)
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", "AssociatedInstitutions")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId1");

                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Shared.Entities.Concrete.ProductCategory", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("MyBlog.Entities.Concrete.ProductSubGroup", "ProductSubGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("ProductSubGroup");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.ProductGroup", "ProductGroup")
                        .WithMany("ProductSubGroups")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Module", "Module")
                        .WithMany("Programs")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Sales")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Sale")
                        .HasForeignKey("MyBlog.Entities.Concrete.Sale", "ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SaleStatus", "SaleStatus")
                        .WithMany("Sales")
                        .HasForeignKey("SaleStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SaleType", "SaleType")
                        .WithMany("Sales")
                        .HasForeignKey("SaleTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Product");

                    b.Navigation("SaleStatus");

                    b.Navigation("SaleType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("MyBlog.Entities.Concrete.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Program", "Program")
                        .WithMany("SubPrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Customers");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Navigation("ProductSubGroups");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Navigation("SubPrograms");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Articles");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
