// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.Data.Concrete.EntityFramework.Context;

#nullable disable

namespace MyBlog.Data.Migrations
{
    [DbContext(typeof(MyBlogContext))]
    [Migration("20240204135311_AddSaleEntitySgkIdColumn")]
    partial class AddSaleEntitySgkIdColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMade")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewCustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTypeId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 486, DateTimeKind.Local).AddTicks(3310),
                            CustomerId = 1,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama2",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 486, DateTimeKind.Local).AddTicks(3311),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(2109),
                            Description = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(2110),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CommentCount = 0,
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6087),
                            Date = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6085),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6088),
                            Note = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoTags = "C#, C# 9, .NET5, .NET Framework, .NET Core",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C# 9.0 ve .NET 5 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CommentCount = 0,
                            Content = "Yinelenen bir sayfa içeriğinin okuyucunun dikkatini dağıttığı bilinen bir gerçektir. Lorem Ipsum kullanmanın amacı, sürekli 'buraya metin gelecek, buraya metin gelecek' yazmaya kıyasla daha dengeli bir harf dağılımı sağlayarak okunurluğu artırmasıdır. Şu anda birçok masaüstü yayıncılık paketi ve web sayfa düzenleyicisi, varsayılan mıgır metinler olarak Lorem Ipsum kullanmaktadır. Ayrıca arama motorlarında 'lorem ipsum' anahtar sözcükleri ile arama yapıldığında henüz tasarım aşamasında olan çok sayıda site listelenir. Yıllar içinde, bazen kazara, bazen bilinçli olarak (örneğin mizah katılarak), çeşitli sürümleri geliştirilmiştir.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6094),
                            Date = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6093),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6095),
                            Note = "C++ 11 ve 19 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C++ 11 ve 19 Yenilikleri",
                            SeoTags = "C++ 11 ve 19 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C++ 11 ve 19 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 295
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6099),
                            Date = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6098),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6099),
                            Note = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoTags = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 12
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CommentCount = 0,
                            Content = "É um facto estabelecido de que um leitor é distraído pelo conteúdo legível de uma página quando analisa a sua mancha gráfica. Logo, o uso de Lorem Ipsum leva a uma distribuição mais ou menos normal de letras, ao contrário do uso de 'Conteúdo aqui,conteúdo aqui'', tornando-o texto legível. Muitas ferramentas de publicação electrónica e editores de páginas web usam actualmente o Lorem Ipsum como o modelo de texto usado por omissão, e uma pesquisa por 'lorem ipsum' irá encontrar muitos websites ainda na sua infância. Várias versões têm evoluído ao longo dos anos, por vezes por acidente, por vezes propositadamente (como no caso do humor).",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6103),
                            Date = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6102),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6104),
                            Note = "Typescript 4.1 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Typescript 4.1, Typescript, TYPESCRIPT 2021",
                            SeoTags = "Typescript 4.1 Güncellemeleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Typescript 4.1",
                            UserId = 1,
                            ViewsCount = 666
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6107),
                            Date = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6106),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6107),
                            Note = "JAVA",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Java, Android, Mobile, Kotlin, Uygulama Geliştirme",
                            SeoTags = "Java, Mobil, Kotlin, Android, IOS, SWIFT",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Java ve Android'in Geleceği | 2021",
                            UserId = 1,
                            ViewsCount = 3225
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            CommentCount = 0,
                            Content = "Le Lorem Ipsum est simplement du faux texte employé dans la composition et la mise en page avant impression. Le Lorem Ipsum est le faux texte standard de l'imprimerie depuis les années 1500, quand un imprimeur anonyme assembla ensemble des morceaux de texte pour réaliser un livre spécimen de polices de texte. Il n'a pas fait que survivre cinq siècles, mais s'est aussi adapté à la bureautique informatique, sans que son contenu n'en soit modifié. Il a été popularisé dans les années 1960 grâce à la vente de feuilles Letraset contenant des passages du Lorem Ipsum, et, plus récemment, par son inclusion dans des applications de mise en page de texte, comme Aldus PageMaker.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6110),
                            Date = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6110),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6111),
                            Note = "Python",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Python ile Veri Madenciliği",
                            SeoTags = "Python, Veri Madenciliği Nasıl Yapılır?",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Python ile Veri Madenciliği | 2021",
                            UserId = 1,
                            ViewsCount = 9999
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            CommentCount = 0,
                            Content = "Contrairement à une opinion répandue, le Lorem Ipsum n'est pas simplement du texte aléatoire. Il trouve ses racines dans une oeuvre de la littérature latine classique datant de 45 av. J.-C., le rendant vieux de 2000 ans. Un professeur du Hampden-Sydney College, en Virginie, s'est intéressé à un des mots latins les plus obscurs, consectetur, extrait d'un passage du Lorem Ipsum, et en étudiant tous les usages de ce mot dans la littérature classique, découvrit la source incontestable du Lorem Ipsum. Il provient en fait des sections 1.10.32 et 1.10.33 du 0De Finibus Bonorum et Malorum' (Des Suprêmes Biens et des Suprêmes Maux) de Cicéron. Cet ouvrage, très populaire pendant la Renaissance, est un traité sur la théorie de l'éthique. Les premières lignes du Lorem Ipsum, 'Lorem ipsum dolor sit amet...'', proviennent de la section 1.10.32",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6114),
                            Date = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6114),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6115),
                            Note = "PHP",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Php ile API Oluşturma Rehberi",
                            SeoTags = "php, laravel, api, oop",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Php Laravel Başlangıç Rehberi | API",
                            UserId = 1,
                            ViewsCount = 4818
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            CommentCount = 0,
                            Content = "Plusieurs variations de Lorem Ipsum peuvent être trouvées ici ou là, mais la majeure partie d'entre elles a été altérée par l'addition d'humour ou de mots aléatoires qui ne ressemblent pas une seconde à du texte standard. Si vous voulez utiliser un passage du Lorem Ipsum, vous devez être sûr qu'il n'y a rien d'embarrassant caché dans le texte. Tous les générateurs de Lorem Ipsum sur Internet tendent à reproduire le même extrait sans fin, ce qui fait de lipsum.com le seul vrai générateur de Lorem Ipsum. Iil utilise un dictionnaire de plus de 200 mots latins, en combinaison de plusieurs structures de phrases, pour générer un Lorem Ipsum irréprochable. Le Lorem Ipsum ainsi obtenu ne contient aucune répétition, ni ne contient des mots farfelus, ou des touches d'humour.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6118),
                            Date = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6118),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6119),
                            Note = "Kotlin",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Kotlin ile Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "kotlin, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Kotlin ile Mobil Programlama",
                            UserId = 1,
                            ViewsCount = 750
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            CommentCount = 0,
                            Content = "Al contrario di quanto si pensi, Lorem Ipsum non è semplicemente una sequenza casuale di caratteri. Risale ad un classico della letteratura latina del 45 AC, cosa che lo rende vecchio di 2000 anni. Richard McClintock, professore di latino al Hampden-Sydney College in Virginia, ha ricercato una delle più oscure parole latine, consectetur, da un passaggio del Lorem Ipsum e ha scoperto tra i vari testi in cui è citata, la fonte da cui è tratto il testo, le sezioni 1.10.32 and 1.10.33 del 'de Finibus Bonorum et Malorum' di Cicerone. Questo testo è un trattato su teorie di etica, molto popolare nel Rinascimento. La prima riga del Lorem Ipsum, 'Lorem ipsum dolor sit amet..'', è tratta da un passaggio della sezione 1.10.32.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6122),
                            Date = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6121),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6123),
                            Note = "Swift",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Swift ile IOS Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "IOS, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Swift ile IOS Programlama",
                            UserId = 1,
                            ViewsCount = 14900
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            CommentCount = 0,
                            Content = "Esistono innumerevoli variazioni dei passaggi del Lorem Ipsum, ma la maggior parte hanno subito delle variazioni del tempo, a causa dell’inserimento di passaggi ironici, o di sequenze casuali di caratteri palesemente poco verosimili. Se si decide di utilizzare un passaggio del Lorem Ipsum, è bene essere certi che non contenga nulla di imbarazzante. In genere, i generatori di testo segnaposto disponibili su internet tendono a ripetere paragrafi predefiniti, rendendo questo il primo vero generatore automatico su intenet. Infatti utilizza un dizionario di oltre 200 vocaboli latini, combinati con un insieme di modelli di strutture di periodi, per generare passaggi di testo verosimili. Il testo così generato è sempre privo di ripetizioni, parole imbarazzanti o fuori luogo ecc.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6126),
                            Date = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6125),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(6127),
                            Note = "Ruby",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Ruby, Ruby on Rails Web Programlama, AirBnb Klon",
                            SeoTags = "Ruby on Rails, Ruby, Web Programlama, AirBnb",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Ruby on Rails ile AirBnb Klon Kodlayalım",
                            UserId = 1,
                            ViewsCount = 26777
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("AssociatedInstitutions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6620),
                            Description = "İş Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6621),
                            PaymentTypeId = 1,
                            Title = "İş Bankası"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6624),
                            Description = "Garanti Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6625),
                            PaymentTypeId = 1,
                            Title = "Garanti Bankası"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6627),
                            Description = "Yapı Kredi Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6627),
                            PaymentTypeId = 1,
                            Title = "Yapı Kredi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6628),
                            Description = "Akbank Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6628),
                            PaymentTypeId = 1,
                            Title = "Akbank"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6629),
                            Description = "Avrupa Ses Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6630),
                            PaymentTypeId = 2,
                            Title = "Avrupa Ses"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6631),
                            Description = "Sivasot Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6631),
                            PaymentTypeId = 2,
                            Title = "Sivasot"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6632),
                            Description = "Timtoptan Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6632),
                            PaymentTypeId = 2,
                            Title = "Timtoptan"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "act Manuel"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8765),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8766),
                            Note = "C# Makale Yorumu",
                            Text = "Lorem Ipsum pasajlarının birçok çeşitlemesi vardır. Ancak bunların büyük bir çoğunluğu mizah katılarak veya rastgele sözcükler eklenerek değiştirilmişlerdir. Eğer bir Lorem Ipsum pasajı kullanacaksanız, metin aralarına utandırıcı sözcükler gizlenmediğinden emin olmanız gerekir. İnternet'teki tüm Lorem Ipsum üreteçleri önceden belirlenmiş metin bloklarını yineler. Bu da, bu üreteci İnternet üzerindeki gerçek Lorem Ipsum üreteci yapar. Bu üreteç, 200'den fazla Latince sözcük ve onlara ait cümle yapılarını içeren bir sözlük kullanır. Bu nedenle, üretilen Lorem Ipsum metinleri yinelemelerden, mizahtan ve karakteristik olmayan sözcüklerden uzaktır."
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8769),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8770),
                            Note = "C++ Makale Yorumu",
                            Text = "Lorem Ipsum jest tekstem stosowanym jako przykładowy wypełniacz w przemyśle poligraficznym. Został po raz pierwszy użyty w XV w. przez nieznanego drukarza do wypełnienia tekstem próbnej książki. Pięć wieków później zaczął być używany przemyśle elektronicznym, pozostając praktycznie niezmienionym. Spopularyzował się w latach 60. XX w. wraz z publikacją arkuszy Letrasetu, zawierających fragmenty Lorem Ipsum, a ostatnio z zawierającym różne wersje Lorem Ipsum oprogramowaniem przeznaczonym do realizacji druków na komputerach osobistych, jak Aldus PageMaker"
                        },
                        new
                        {
                            Id = 3,
                            ArticleId = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8772),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8773),
                            Note = "JavaScript Makale Yorumu",
                            Text = "Ang Lorem Ipsum ay ginagamit na modelo ng industriya ng pagpriprint at pagtytypeset. Ang Lorem Ipsum ang naging regular na modelo simula pa noong 1500s, noong may isang di kilalang manlilimbag and kumuha ng galley ng type at ginulo ang pagkaka-ayos nito upang makagawa ng libro ng mga type specimen. Nalagpasan nito hindi lang limang siglo, kundi nalagpasan din nito ang paglaganap ng electronic typesetting at nanatiling parehas. Sumikat ito noong 1960s kasabay ng pag labas ng Letraset sheets na mayroong mga talata ng Lorem Ipsum, at kamakailan lang sa mga desktop publishing software tulad ng Aldus Pagemaker ginamit ang mga bersyon ng Lorem Ipsum."
                        },
                        new
                        {
                            Id = 4,
                            ArticleId = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8775),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8776),
                            Note = "Typescript Makale Yorumu",
                            Text = "Lorem Ipsum er rett og slett dummytekst fra og for trykkeindustrien. Lorem Ipsum har vært bransjens standard for dummytekst helt siden 1500-tallet, da en ukjent boktrykker stokket en mengde bokstaver for å lage et prøveeksemplar av en bok. Lorem Ipsum har tålt tidens tann usedvanlig godt, og har i tillegg til å bestå gjennom fem århundrer også tålt spranget over til elektronisk typografi uten vesentlige endringer. Lorem Ipsum ble gjort allment kjent i 1960-årene ved lanseringen av Letraset-ark med avsnitt fra Lorem Ipsum, og senere med sideombrekkingsprogrammet Aldus PageMaker som tok i bruk nettopp Lorem Ipsum for dummytekst."
                        },
                        new
                        {
                            Id = 5,
                            ArticleId = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8778),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8779),
                            Note = "Java Makale Yorumu",
                            Text = "Lorem Ipsum este pur şi simplu o machetă pentru text a industriei tipografice. Lorem Ipsum a fost macheta standard a industriei încă din secolul al XVI-lea, când un tipograf anonim a luat o planşetă de litere şi le-a amestecat pentru a crea o carte demonstrativă pentru literele respective. Nu doar că a supravieţuit timp de cinci secole, dar şi a facut saltul în tipografia electronică practic neschimbată. A fost popularizată în anii '60 odată cu ieşirea colilor Letraset care conţineau pasaje Lorem Ipsum, iar mai recent, prin programele de publicare pentru calculator, ca Aldus PageMaker care includeau versiuni de Lorem Ipsum."
                        },
                        new
                        {
                            Id = 6,
                            ArticleId = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8782),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8782),
                            Note = "Python Makale Yorumu",
                            Text = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a."
                        },
                        new
                        {
                            Id = 7,
                            ArticleId = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8785),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8785),
                            Note = "Php Makale Yorumu",
                            Text = "Lorem Ipsum – tas ir teksta salikums, kuru izmanto poligrāfijā un maketēšanas darbos. Lorem Ipsum ir kļuvis par vispārpieņemtu teksta aizvietotāju kopš 16. gadsimta sākuma. Tajā laikā kāds nezināms iespiedējs izveidoja teksta fragmentu, lai nodrukātu grāmatu ar burtu paraugiem. Tas ir ne tikai pārdzīvojis piecus gadsimtus, bet bez ievērojamām izmaiņām saglabājies arī mūsdienās, pārejot uz datorizētu teksta apstrādi. Tā popularizēšanai 60-tajos gados kalpoja Letraset burtu paraugu publicēšana ar Lorem Ipsum teksta fragmentiem un, nesenā pagātnē, tādas maketēšanas programmas kā Aldus PageMaker, kuras šablonu paraugos ir izmantots Lorem Ipsum teksts."
                        },
                        new
                        {
                            Id = 8,
                            ArticleId = 8,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8787),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8788),
                            Note = "Kotlin Makale Yorumu",
                            Text = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like)."
                        },
                        new
                        {
                            Id = 9,
                            ArticleId = 9,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8790),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8791),
                            Note = "Swift Makale Yorumu",
                            Text = "هنالك العديد من الأنواع المتوفرة لنصوص لوريم إيبسوم، ولكن الغالبية تم تعديلها بشكل ما عبر إدخال بعض النوادر أو الكلمات العشوائية إلى النص. إن كنت تريد أن تستخدم نص لوريم إيبسوم ما، عليك أن تتحقق أولاً أن ليس هناك أي كلمات أو عبارات محرجة أو غير لائقة مخبأة في هذا النص. بينما تعمل جميع مولّدات نصوص لوريم إيبسوم على الإنترنت على إعادة تكرار مقاطع من نص لوريم إيبسوم نفسه عدة مرات بما تتطلبه الحاجة، يقوم مولّدنا هذا باستخدام كلمات من قاموس يحوي على أكثر من 200 كلمة لا تينية، مضاف إليها مجموعة من الجمل النموذجية، لتكوين نص لوريم إيبسوم ذو شكل منطقي قريب إلى النص الحقيقي. وبالتالي يكون النص الناتح خالي من التكرار، أو أي كلمات أو عبارات غير لائقة أو ما شابه. وهذا ما يجعله أول مولّد نص لوريم إيبسوم حقيقي على الإنترنت."
                        },
                        new
                        {
                            Id = 10,
                            ArticleId = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8793),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(8794),
                            Note = "Ruby Makale Yorumu",
                            Text = "Lorem Ipsum，也称乱数假文或者哑元文本， 是印刷及排版领域所常用的虚拟文字。由于曾经一台匿名的打印机刻意打乱了一盒印刷字体从而造出一本字体样品书，Lorem Ipsum从西元15世纪起就被作为此领域的标准文本使用。它不仅延续了五个世纪，还通过了电子排版的挑战，其雏形却依然保存至今。在1960年代，”Leatraset”公司发布了印刷着Lorem Ipsum段落的纸张，从而广泛普及了它的使用。最近，计算机桌面出版软件”Aldus PageMaker”也通过同样的方式使Lorem Ipsum落入大众的视野。"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HospitalOfReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2024, 2, 8, 16, 53, 9, 485, DateTimeKind.Local).AddTicks(1604),
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 485, DateTimeKind.Local).AddTicks(1599),
                            CustomerReferanceId = 1,
                            CustomerTypeId = 1,
                            Email = "hasta1@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 485, DateTimeKind.Local).AddTicks(1600),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceTitleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FromWhere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TC")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceTitleId");

                    b.ToTable("CustomerReferances", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 485, DateTimeKind.Local).AddTicks(5172),
                            CustomerReferanceTitleId = 1,
                            Description = "Description",
                            FirstName = "Sema",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 485, DateTimeKind.Local).AddTicks(5174),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Phone = "+905050102249"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferanceTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("CustomerReferanceTitles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 485, DateTimeKind.Local).AddTicks(3608),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 485, DateTimeKind.Local).AddTicks(3610),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Referans Unvan 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 485, DateTimeKind.Local).AddTicks(6268),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 485, DateTimeKind.Local).AddTicks(6269),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(9470),
                            Email = "bedirhangn@gmail.com",
                            EmployeeTypeId = 1,
                            FirstName = "Personel 1",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(9471),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(9798),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(9800),
                            Note = "Not",
                            Title = "Title"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDaily")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncome")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Expenses", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.MessageToDeveloper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EstimatedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MessageToDevelopers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(7469),
                            EstimatedCompletionDate = new DateTime(2024, 2, 9, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(7472),
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "TEST",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(7470),
                            Progress = 3,
                            Title = "MessageToDeveloper Title Test"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(7478),
                            EstimatedCompletionDate = new DateTime(2024, 2, 9, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(7479),
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "TEST 2222222222222222",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(7478),
                            Progress = 1,
                            Title = "MessageToDeveloper Title Test"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(7482),
                            EstimatedCompletionDate = new DateTime(2024, 2, 7, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(7483),
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "TEST 2222222222222222",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(7482),
                            Progress = 4,
                            Title = "MessageToDeveloper Title Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(4008),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(4009),
                            Name = "AgendaProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(4012),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(4012),
                            Name = "CustomerModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(4015),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(4015),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(4018),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(4019),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(4021),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(4022),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(4023),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(4024),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(4026),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(4027),
                            Name = "StockModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(4891),
                            CustomerId = 1,
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(4893),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2024, 2, 7, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(4897),
                            Title = "Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(4906),
                            CustomerId = 1,
                            Description = "Doğum günü yaklaşmakta.",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(4907),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2024, 2, 6, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(4909),
                            Title = "Doğum Günü!",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(4911),
                            CustomerId = 1,
                            Description = "Aylık cihaz bakımı için konuşulacak",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(4912),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2024, 2, 5, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(4913),
                            Title = "Cihaz Bakımı!",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DebtAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PaidPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutPayments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 0m,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(7018),
                            DebtAmount = 15000m,
                            Description = "TEST desc 1 ",
                            DueDate = new DateTime(2024, 2, 8, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(7028),
                            IsActive = true,
                            IsDeleted = false,
                            IsPaid = true,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(7019),
                            PaidPlace = "Ödemenin Yapılacağı yer"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OutPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OutPaymentId");

                    b.ToTable("OutPaymentDetails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1000m,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(8009),
                            Description = "TEST desc 1 ",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(8010),
                            OutPaymentId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ParamCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamValue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue5")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue6")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Parameter", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 485, DateTimeKind.Local).AddTicks(2841),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 485, DateTimeKind.Local).AddTicks(2842),
                            ParamCode = "SGKTutari",
                            ParamType = "Tutar Tipi 1",
                            ParamValue = "1000"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("AssociatedInstitutionId")
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedInstitutionsId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId1")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PaymentTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTypeId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedInstitutionId");

                    b.HasIndex("AssociatedInstitutionsId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PaymentTypeId1");

                    b.ToTable("Payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(5814),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(5814),
                            PaymentTypeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(8153),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(8154),
                            Title = "KK | POS"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(8156),
                            Description = "Mail Order Payment",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(8157),
                            Title = "Mail Order"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(8158),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 500, DateTimeKind.Local).AddTicks(8159),
                            Title = "Peşin"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsProduct")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("ProductSubGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("SubModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductSubGroupId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.HasIndex("SubModelId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(5817),
                            Description = "Ürün Grubu Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(5818),
                            Title = "Ürün Grubu 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductSubGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(7218),
                            Description = "Model Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(7223),
                            ProductGroupId = 1,
                            Title = "Model Başlığı"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Programs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5452),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5453),
                            ModuleId = 5,
                            Name = "EmployeeProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5456),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5457),
                            ModuleId = 5,
                            Name = "UserModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5459),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5463),
                            ModuleId = 7,
                            Name = "StockModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5466),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5467),
                            ModuleId = 6,
                            Name = "CustomerReferanceModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5470),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5470),
                            ModuleId = 1,
                            Name = "AppointmentModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5472),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5473),
                            ModuleId = 1,
                            Name = "NotificationModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5475),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5476),
                            ModuleId = 3,
                            Name = "PaymentProgram.Read"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5478),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5478),
                            ModuleId = 2,
                            Name = "CustomerProgram.Read"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5480),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5481),
                            ModuleId = 7,
                            Name = "BrandModule.Read"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5483),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5484),
                            ModuleId = 3,
                            Name = "SaleModule.Read"
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5486),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5486),
                            ModuleId = 7,
                            Name = "ProductProgram.Read"
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5488),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(5489),
                            ModuleId = 5,
                            Name = "RoleModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessLevel = 1,
                            ConcurrencyStamp = "a93ac3b5-2805-4b7a-8821-1e844ee2ff74",
                            Definition = "SüperAdmin Yetkisi",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2,
                            AccessLevel = 1,
                            ConcurrencyStamp = "a3c7b421-937b-4280-ad29-1b4949c4cc9b",
                            Definition = "Standart Kullanıcı Yetkisi",
                            Name = "DefaultUser",
                            NormalizedName = "DEFAULTUSER"
                        },
                        new
                        {
                            Id = 3,
                            AccessLevel = 1,
                            ConcurrencyStamp = "2779376e-e4a7-447d-89a0-d1c8c27fa448",
                            Definition = "Developer Yetkisi",
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = 4,
                            AccessLevel = 3,
                            ConcurrencyStamp = "099f1151-6f70-4e27-9510-8b460d54f39b",
                            Definition = "Kullanıcı Ekleme Yetkisi",
                            Name = "User.Create",
                            NormalizedName = "USER.CREATE"
                        },
                        new
                        {
                            Id = 5,
                            AccessLevel = 3,
                            ConcurrencyStamp = "28c0927f-0628-4996-8beb-589da55f2c84",
                            Definition = "Kullanıcı Görüntüleme Yetkisi",
                            Name = "User.Read",
                            NormalizedName = "USER.READ"
                        },
                        new
                        {
                            Id = 6,
                            AccessLevel = 3,
                            ConcurrencyStamp = "66e66227-3442-4a42-abe8-9664d0c5f5a6",
                            Definition = "Kullanıcı Güncelleme Yetkisi",
                            Name = "User.Update",
                            NormalizedName = "USER.UPDATE"
                        },
                        new
                        {
                            Id = 7,
                            AccessLevel = 3,
                            ConcurrencyStamp = "47e268d8-aa50-432c-b3b1-a05bea81db15",
                            Definition = "Kullanıcı Silme Yetkisi",
                            Name = "User.Delete",
                            NormalizedName = "USER.DELETE"
                        },
                        new
                        {
                            Id = 8,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7dab3828-f4be-4e1b-a131-0820368822cd",
                            Definition = "Rol Görüntüleme Yetkisi",
                            Name = "Role.Read",
                            NormalizedName = "ROLE.READ"
                        },
                        new
                        {
                            Id = 9,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3c9a7fa1-60f8-4df9-9251-bd17a309b66a",
                            Definition = "Rol Güncelleme Yetkisi",
                            Name = "Role.Update",
                            NormalizedName = "ROLE.UPDATE"
                        },
                        new
                        {
                            Id = 10,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7957e0c0-8970-4ce3-9fae-b76e44ae8196",
                            Definition = "Rol Silme Yetkisi",
                            Name = "Role.Delete",
                            NormalizedName = "ROLE.DELETE"
                        },
                        new
                        {
                            Id = 11,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bb006eb6-05b7-47bc-bbeb-15cf96695300",
                            Definition = "Rol Ekleme Yetkisi",
                            Name = "Role.Create",
                            NormalizedName = "ROLE.CREATE"
                        },
                        new
                        {
                            Id = 12,
                            AccessLevel = 3,
                            ConcurrencyStamp = "04eb7fb8-9ee8-4693-9b61-80facdf9182e",
                            Definition = "Ödeme Ekleme Yetkisi",
                            Name = "Payment.Create",
                            NormalizedName = "PAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 13,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5d4e0478-0217-440a-ae61-2c01e6d5595b",
                            Definition = "Ödeme Görüntüleme Yetkisi",
                            Name = "Payment.Read",
                            NormalizedName = "PAYMENT.READ"
                        },
                        new
                        {
                            Id = 14,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ea930fee-ec6f-473e-b4ed-77e9daa51d0f",
                            Definition = "Ödeme Güncelleme Yetkisi",
                            Name = "Payment.Update",
                            NormalizedName = "PAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 15,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4b17a9dd-9cbe-4818-a217-b1e68ea5ba38",
                            Definition = "Ödeme Silme Yetkisi",
                            Name = "Payment.Delete",
                            NormalizedName = "PAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 16,
                            AccessLevel = 3,
                            ConcurrencyStamp = "523bf9a9-3b83-4845-9828-ebf14c22faa2",
                            Definition = "Ödeme Türü Ekleme Yetkisi",
                            Name = "PaymentType.Create",
                            NormalizedName = "PAYMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 17,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e6f0fb72-1bec-4bbb-960e-f51789de29e2",
                            Definition = "Ödeme Türü Görüntüleme Yetkisi",
                            Name = "PaymentType.Read",
                            NormalizedName = "PAYMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 18,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7bdb382d-759b-4759-acbd-2308656e5ff8",
                            Definition = "Ödeme Türü Güncelleme Yetkisi",
                            Name = "PaymentType.Update",
                            NormalizedName = "PAYMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 19,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d6dad511-127a-4829-adbc-b732e20eb913",
                            Definition = "Ödeme Türü Silme Yetkisi",
                            Name = "PaymentType.Delete",
                            NormalizedName = "PAYMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 20,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5223cec1-4db4-4811-a3c0-afd029cf3bd7",
                            Definition = "Personel Ekleme Yetkisi",
                            Name = "Employee.Create",
                            NormalizedName = "EMPLOYEE.CREATE"
                        },
                        new
                        {
                            Id = 21,
                            AccessLevel = 3,
                            ConcurrencyStamp = "243f3976-d549-437d-9d9a-ec8cc3d252d0",
                            Definition = "Personel Görüntüleme Yetkisi",
                            Name = "Employee.Read",
                            NormalizedName = "EMPLOYEE.READ"
                        },
                        new
                        {
                            Id = 22,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7eb5fa4b-e9b2-4a03-a091-55f9728730f6",
                            Definition = "Personel Güncelleme Yetkisi",
                            Name = "Employee.Update",
                            NormalizedName = "EMPLOYEE.UPDATE"
                        },
                        new
                        {
                            Id = 23,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5d4cc0fd-fd6e-4228-8b8a-e3226f61534f",
                            Definition = "Personel Silme Yetkisi",
                            Name = "Employee.Delete",
                            NormalizedName = "EMPLOYEE.DELETE"
                        },
                        new
                        {
                            Id = 24,
                            AccessLevel = 3,
                            ConcurrencyStamp = "50876e97-4127-46d6-b2b3-9c80ed5e4bbf",
                            Definition = "Personel Türü Ekleme Yetkisi",
                            Name = "EmployeeType.Create",
                            NormalizedName = "EMPLOYEETYPE.CREATE"
                        },
                        new
                        {
                            Id = 25,
                            AccessLevel = 3,
                            ConcurrencyStamp = "024bb59d-1d18-4acf-8d6d-dc08f4394c37",
                            Definition = "Personel Türü Görüntüleme Yetkisi",
                            Name = "EmployeeType.Read",
                            NormalizedName = "EMPLOYEETYPE.READ"
                        },
                        new
                        {
                            Id = 26,
                            AccessLevel = 3,
                            ConcurrencyStamp = "12116d17-97d2-4f47-922c-6c183c9ed647",
                            Definition = "Personel Türü Güncelleme Yetkisi",
                            Name = "EmployeeType.Update",
                            NormalizedName = "EMPLOYEETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 27,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bc649466-5bac-4cc8-b807-0160cc1f27b0",
                            Definition = "Personel Türü Silme Yetkisi",
                            Name = "EmployeeType.Delete",
                            NormalizedName = "EMPLOYEETYPE.DELETE"
                        },
                        new
                        {
                            Id = 28,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9a38913a-0702-4a2e-b64f-b58b40804d3f",
                            Definition = "Müşteri Ekleme Yetkisi",
                            Name = "Customer.Create",
                            NormalizedName = "CUSTOMER.CREATE"
                        },
                        new
                        {
                            Id = 29,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f9c8619a-1c5d-4e14-bfb6-26217a5fbfdf",
                            Definition = "Müşteri Görüntüleme Yetkisi",
                            Name = "Customer.Read",
                            NormalizedName = "CUSTOMER.READ"
                        },
                        new
                        {
                            Id = 30,
                            AccessLevel = 3,
                            ConcurrencyStamp = "41486c20-d916-4578-8a91-e4c1ac12840e",
                            Definition = "Müşteri Güncelleme Yetkisi",
                            Name = "Customer.Update",
                            NormalizedName = "CUSTOMER.UPDATE"
                        },
                        new
                        {
                            Id = 31,
                            AccessLevel = 3,
                            ConcurrencyStamp = "644f3705-3ad0-4642-b036-a367cc8ce5c4",
                            Definition = "Müşteri Silme Yetkisi",
                            Name = "Customer.Delete",
                            NormalizedName = "CUSTOMER.DELETE"
                        },
                        new
                        {
                            Id = 32,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4f374585-2ab8-4ade-8bbe-71967e34c280",
                            Definition = "Müşteri Tipi Ekleme Yetkisi",
                            Name = "CustomerType.Create",
                            NormalizedName = "CUSTOMERTYPE.CREATE"
                        },
                        new
                        {
                            Id = 33,
                            AccessLevel = 3,
                            ConcurrencyStamp = "28733bcd-2a50-4c2a-acb3-7939a96c5b88",
                            Definition = "Müşteri Tipi Görüntüleme Yetkisi",
                            Name = "CustomerType.Read",
                            NormalizedName = "CUSTOMERTYPE.READ"
                        },
                        new
                        {
                            Id = 34,
                            AccessLevel = 3,
                            ConcurrencyStamp = "15b9e1c2-53c6-4949-9ce1-05610ed584c7",
                            Definition = "Müşteri Tipi Güncelleme Yetkisi",
                            Name = "CustomerType.Update",
                            NormalizedName = "CUSTOMERTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 35,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3a42144c-48fb-4daa-b46a-70539251be22",
                            Definition = "Müşteri Tipi Silme Yetkisi",
                            Name = "CustomerType.Delete",
                            NormalizedName = "CUSTOMERTYPE.DELETE"
                        },
                        new
                        {
                            Id = 36,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3b6940d0-74a8-460e-8e99-fde5352f18f4",
                            Definition = "Bildirim Ekleme Yetkisi",
                            Name = "Notification.Create",
                            NormalizedName = "NOTIFICATION.CREATE"
                        },
                        new
                        {
                            Id = 37,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e4a3981d-9f4e-4192-9218-2e9b57c96217",
                            Definition = "Bildirim Görüntüleme Yetkisi",
                            Name = "Notification.Read",
                            NormalizedName = "NOTIFICATION.READ"
                        },
                        new
                        {
                            Id = 38,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0fc914ec-f1f3-4e41-bf00-fd98f272c8a0",
                            Definition = "Bildirim Güncelleme Yetkisi",
                            Name = "Notification.Update",
                            NormalizedName = "NOTIFICATION.UPDATE"
                        },
                        new
                        {
                            Id = 39,
                            AccessLevel = 3,
                            ConcurrencyStamp = "cb14eb62-6a6e-4688-bc83-680b90414a75",
                            Definition = "Bildirim Silme Yetkisi",
                            Name = "Notification.Delete",
                            NormalizedName = "NOTIFICATION.DELETE"
                        },
                        new
                        {
                            Id = 40,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ca3f24b7-c7dc-40d7-9cff-9bad8a9302b0",
                            Definition = "Brand Ekleme Yetkisi",
                            Name = "Brand.Create",
                            NormalizedName = "BRAND.CREATE"
                        },
                        new
                        {
                            Id = 41,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8d27b414-1146-49e0-9b59-a24d33c4c4f2",
                            Definition = "Brand Görüntüleme Yetkisi",
                            Name = "Brand.Read",
                            NormalizedName = "BRAND.READ"
                        },
                        new
                        {
                            Id = 42,
                            AccessLevel = 3,
                            ConcurrencyStamp = "58aee083-7647-4856-a046-76a34d8a730d",
                            Definition = "Brand Güncelleme Yetkisi",
                            Name = "Brand.Update",
                            NormalizedName = "BRAND.UPDATE"
                        },
                        new
                        {
                            Id = 43,
                            AccessLevel = 3,
                            ConcurrencyStamp = "cad06d2a-066b-4f99-9e9e-0fd6417bb65a",
                            Definition = "Brand Silme Yetkisi",
                            Name = "Brand.Delete",
                            NormalizedName = "BRAND.DELETE"
                        },
                        new
                        {
                            Id = 44,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8ebac9a3-6393-4d1b-a8d2-b4bf558ff695",
                            Definition = "Brand Ekleme Yetkisi",
                            Name = "MessageToDeveloper.Create",
                            NormalizedName = "MESSAGETODEVELOPER.CREATE"
                        },
                        new
                        {
                            Id = 45,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f7e03234-00cc-4e83-b7e5-dd090448ffc2",
                            Definition = "Brand  Yetkisi",
                            Name = "MessageToDeveloper.Read",
                            NormalizedName = "MESSAGETODEVELOPER.READ"
                        },
                        new
                        {
                            Id = 46,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4f5416dc-0dd2-4c5d-bc53-4d4f413c5b52",
                            Definition = "Brand  Yetkisi",
                            Name = "MessageToDeveloper.Update",
                            NormalizedName = "MESSAGETODEVELOPER.UPDATE"
                        },
                        new
                        {
                            Id = 47,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3d7fa2e0-faea-4f4d-9cca-c2d45fa26e75",
                            Definition = "Brand  Yetkisi",
                            Name = "MessageToDeveloper.Delete",
                            NormalizedName = "MESSAGETODEVELOPER.DELETE"
                        },
                        new
                        {
                            Id = 48,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3e43d5a5-68f7-4746-a35b-533b10ec9cd3",
                            Definition = "Satış Durumu Ekleme Yetkisi",
                            Name = "SaleStatus.Create",
                            NormalizedName = "SALESTATUS.CREATE"
                        },
                        new
                        {
                            Id = 49,
                            AccessLevel = 3,
                            ConcurrencyStamp = "83118283-732d-45bb-9387-414eaa6d8227",
                            Definition = "Satış Durumu Görüntüleme Yetkisi",
                            Name = "SaleStatus.Read",
                            NormalizedName = "SALESTATUS.READ"
                        },
                        new
                        {
                            Id = 50,
                            AccessLevel = 3,
                            ConcurrencyStamp = "defe22ab-28ca-429e-913b-239a7ace5cd5",
                            Definition = "Satış Durumu Güncelleme Yetkisi",
                            Name = "SaleStatus.Update",
                            NormalizedName = "SALESTATUS.UPDATE"
                        },
                        new
                        {
                            Id = 51,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8ee451e6-0888-48a5-8993-cd592e50a2a2",
                            Definition = "Satış Durumu Silme Yetkisi",
                            Name = "SaleStatus.Delete",
                            NormalizedName = "SALESTATUS.DELETE"
                        },
                        new
                        {
                            Id = 52,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6b039aef-b929-40db-8726-0d4cd5dfe97a",
                            Definition = "Satış Türü Ekleme Yetkisi",
                            Name = "SaleType.Create",
                            NormalizedName = "SALETYPE.CREATE"
                        },
                        new
                        {
                            Id = 53,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bcbd73c0-695c-440b-a343-d213d9353a2c",
                            Definition = "Satış Türü Görüntüleme Yetkisi",
                            Name = "SaleType.Read",
                            NormalizedName = "SALETYPE.READ"
                        },
                        new
                        {
                            Id = 54,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f444caa5-0449-44b5-9380-1efbc53cfb3a",
                            Definition = "Satış Türü Güncelleme Yetkisi",
                            Name = "SaleType.Update",
                            NormalizedName = "SALETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 55,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2c54b4aa-5760-488a-9828-36c0762648dc",
                            Definition = "Satış Türü Silme Yetkisi",
                            Name = "SaleType.Delete",
                            NormalizedName = "SALETYPE.DELETE"
                        },
                        new
                        {
                            Id = 56,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e3df0ac8-ea5b-4c55-9ffb-ffd1da5ccc26",
                            Definition = "Ürün Grubu Ekleme Yetkisi",
                            Name = "ProductGroup.Create",
                            NormalizedName = "PRODUCTGROUP.CREATE"
                        },
                        new
                        {
                            Id = 57,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a3835896-7b5a-49be-8dde-275f6fc7e3cc",
                            Definition = "Ürün Grubu Görüntüleme Yetkisi",
                            Name = "ProductGroup.Read",
                            NormalizedName = "PRODUCTGROUP.READ"
                        },
                        new
                        {
                            Id = 58,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a98fece0-5a63-498f-b74d-8cbe7959cd84",
                            Definition = "Ürün Grubu Güncelleme Yetkisi",
                            Name = "ProductGroup.Update",
                            NormalizedName = "PRODUCTGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 59,
                            AccessLevel = 3,
                            ConcurrencyStamp = "720ee1b1-910f-4f78-b561-a405437a04ac",
                            Definition = "Ürün Grubu Silme Yetkisi",
                            Name = "ProductGroup.Delete",
                            NormalizedName = "PRODUCTGROUP.DELETE"
                        },
                        new
                        {
                            Id = 60,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a7a0cf9c-4ed7-473c-842c-144f8aba68e1",
                            Definition = "Model Ekleme Yetkisi",
                            Name = "ProductSubGroup.Create",
                            NormalizedName = "PRODUCTSUBGROUP.CREATE"
                        },
                        new
                        {
                            Id = 61,
                            AccessLevel = 3,
                            ConcurrencyStamp = "516e5b0c-204a-4c54-be72-f3d08ebc0614",
                            Definition = "Model Görüntüleme Yetkisi",
                            Name = "ProductSubGroup.Read",
                            NormalizedName = "PRODUCTSUBGROUP.READ"
                        },
                        new
                        {
                            Id = 62,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4fbcfef9-0cf4-407e-8a69-8b43b77c700b",
                            Definition = "Model Güncelleme Yetkisi",
                            Name = "ProductSubGroup.Update",
                            NormalizedName = "PRODUCTSUBGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 63,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9856e4ae-e53d-4bd2-8f35-460226e0fd92",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "ProductSubGroup.Delete",
                            NormalizedName = "PRODUCTSUBGROUP.DELETE"
                        },
                        new
                        {
                            Id = 64,
                            AccessLevel = 3,
                            ConcurrencyStamp = "cf96562e-40dd-4776-8709-322a9631971a",
                            Definition = "Randevu Türü Ekleme Yetkisi",
                            Name = "AppointmentType.Create",
                            NormalizedName = "APPOINTMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 65,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c3e5519c-deee-4486-821c-4aa2c1eac7bb",
                            Definition = "Randevu Türü Görüntüleme Yetkisi",
                            Name = "AppointmentType.Read",
                            NormalizedName = "APPOINTMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 66,
                            AccessLevel = 3,
                            ConcurrencyStamp = "17b6560d-1bb5-41fd-a248-3130ceac96ea",
                            Definition = "Randevu Türü Güncelleme Yetkisi",
                            Name = "AppointmentType.Update",
                            NormalizedName = "APPOINTMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 67,
                            AccessLevel = 3,
                            ConcurrencyStamp = "77461bcb-7ca4-414c-b1c5-ad2174b92e02",
                            Definition = "Randevu Türü Silme Yetkisi",
                            Name = "AppointmentType.Delete",
                            NormalizedName = "APPOINTMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 68,
                            AccessLevel = 3,
                            ConcurrencyStamp = "f9345c86-84a9-4d88-96c5-b9b251705ce3",
                            Definition = "Satış Oluşturma Yetkisi",
                            Name = "Sale.Create",
                            NormalizedName = "SALE.CREATE"
                        },
                        new
                        {
                            Id = 69,
                            AccessLevel = 3,
                            ConcurrencyStamp = "474dd833-7b70-4a5c-9039-0b25b515adc7",
                            Definition = "Satış Görüntüleme Yetkisi",
                            Name = "Sale.Read",
                            NormalizedName = "SALE.READ"
                        },
                        new
                        {
                            Id = 70,
                            AccessLevel = 3,
                            ConcurrencyStamp = "39f7c961-c699-488d-b585-38807a069fe1",
                            Definition = "Satış Güncelleme Yetkisi",
                            Name = "Sale.Update",
                            NormalizedName = "SALE.UPDATE"
                        },
                        new
                        {
                            Id = 71,
                            AccessLevel = 3,
                            ConcurrencyStamp = "371c74a3-aea3-4595-bc60-56d3ab0b8cad",
                            Definition = "Satış Silme Yetkisi",
                            Name = "Sale.Delete",
                            NormalizedName = "SALE.DELETE"
                        },
                        new
                        {
                            Id = 72,
                            AccessLevel = 3,
                            ConcurrencyStamp = "fa3f600d-8e6a-4f37-821d-85ef9b4bda68",
                            Definition = "Ürün Ekleme Yetkisi",
                            Name = "Product.Create",
                            NormalizedName = "PRODUCT.CREATE"
                        },
                        new
                        {
                            Id = 73,
                            AccessLevel = 3,
                            ConcurrencyStamp = "adda0493-8ed9-4a81-b206-604ef3ae3a9d",
                            Definition = "Ürün Görüntüleme Yetkisi",
                            Name = "Product.Read",
                            NormalizedName = "PRODUCT.READ"
                        },
                        new
                        {
                            Id = 74,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0c94e75b-4bbc-4450-bb51-125db2c95e74",
                            Definition = "Ürün Güncelleme Yetkisi",
                            Name = "Product.Update",
                            NormalizedName = "PRODUCT.UPDATE"
                        },
                        new
                        {
                            Id = 75,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9d9e3aa1-1472-4950-a7b4-5d3eb75dc1a0",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "Product.Delete",
                            NormalizedName = "PRODUCT.DELETE"
                        },
                        new
                        {
                            Id = 76,
                            AccessLevel = 3,
                            ConcurrencyStamp = "61ceab3e-94e1-4f68-8c8d-b2facd5d9db0",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "Appointment.Create",
                            NormalizedName = "APPOINTMENT.CREATE"
                        },
                        new
                        {
                            Id = 77,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e6d2f2d7-464d-47f5-a819-3dc25260f997",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "Appointment.Read",
                            NormalizedName = "APPOINTMENT.READ"
                        },
                        new
                        {
                            Id = 78,
                            AccessLevel = 3,
                            ConcurrencyStamp = "68b8800f-ea6b-4fe2-8b78-a095994df0c9",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "Appointment.Update",
                            NormalizedName = "APPOINTMENT.UPDATE"
                        },
                        new
                        {
                            Id = 79,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8fb63298-b497-4205-9212-ec5fad5aad74",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "Appointment.Delete",
                            NormalizedName = "APPOINTMENT.DELETE"
                        },
                        new
                        {
                            Id = 80,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d1d47233-3a4b-434e-8e37-b30579a3c610",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "OutPayment.Create",
                            NormalizedName = "OUTPAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 81,
                            AccessLevel = 3,
                            ConcurrencyStamp = "833ed15b-2e4d-41e9-8f5a-2a3cf6e77c64",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "OutPayment.Read",
                            NormalizedName = "OUTPAYMENT.READ"
                        },
                        new
                        {
                            Id = 82,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d68be94f-d4ee-45f9-9a86-6e27f1e46dd3",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "OutPayment.Update",
                            NormalizedName = "OUTPAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 83,
                            AccessLevel = 3,
                            ConcurrencyStamp = "27a07b5b-fce9-4dbc-a37a-c739ce858d5d",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "OutPayment.Delete",
                            NormalizedName = "OUTPAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 84,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5b49b34f-dd88-42d0-afa9-c5f94e73e3d3",
                            Definition = "Dış Ödeme Detayı Oluşturma Yetkisi",
                            Name = "OutPaymentDetail.Create",
                            NormalizedName = "OUTPAYMENTDETAIL.CREATE"
                        },
                        new
                        {
                            Id = 85,
                            AccessLevel = 3,
                            ConcurrencyStamp = "cd0372c2-1d70-4734-a769-6abf70f8b185",
                            Definition = "Dış Ödeme Detayı Görüntüleme Yetkisi",
                            Name = "OutPaymentDetail.Read",
                            NormalizedName = "OUTPAYMENTDETAIL.READ"
                        },
                        new
                        {
                            Id = 86,
                            AccessLevel = 3,
                            ConcurrencyStamp = "95c1d37e-b832-44ce-aaa4-f5d9c4fdd0ca",
                            Definition = "Dış Ödeme Detayı Güncelleme Yetkisi",
                            Name = "OutPaymentDetail.Update",
                            NormalizedName = "OUTPAYMENTDETAIL.UPDATE"
                        },
                        new
                        {
                            Id = 87,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e8f05220-e453-4917-80d8-df475180de0c",
                            Definition = "Dış Ödeme Detayı Silme Yetkisi",
                            Name = "OutPaymentDetail.Delete",
                            NormalizedName = "OUTPAYMENTDETAIL.DELETE"
                        },
                        new
                        {
                            Id = 88,
                            AccessLevel = 2,
                            ConcurrencyStamp = "331abdc7-54e7-4867-89a9-968ffb567ccc",
                            Definition = "Markalar Programı Görüntüleme",
                            Name = "EmployeeProgram.Read",
                            NormalizedName = "EMPLOYEEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 89,
                            AccessLevel = 2,
                            ConcurrencyStamp = "15029a12-6834-48ef-a097-2761e8e83731",
                            Definition = "Randevular Programı Görüntüleme",
                            Name = "InstitutionalProgram.Read",
                            NormalizedName = "INSTITUTIONALPROGRAM.READ"
                        },
                        new
                        {
                            Id = 90,
                            AccessLevel = 2,
                            ConcurrencyStamp = "6c49986e-53ab-4c8e-b3ed-f942ebd3addd",
                            Definition = "Hastalar Programı Görüntüleme",
                            Name = "CustomerProgram.Read",
                            NormalizedName = "CUSTOMERPROGRAM.READ"
                        },
                        new
                        {
                            Id = 91,
                            AccessLevel = 2,
                            ConcurrencyStamp = "6c160c85-3729-4185-94cb-31361b334a48",
                            Definition = "Referanslar Programı Görüntüleme",
                            Name = "PaymentProgram.Read",
                            NormalizedName = "PAYMENTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 92,
                            AccessLevel = 2,
                            ConcurrencyStamp = "0f1ffba0-f093-484c-8716-c8238ce0d6b7",
                            Definition = "Ürünler Programı Görüntüleme",
                            Name = "ProductProgram.Read",
                            NormalizedName = "PRODUCTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 93,
                            AccessLevel = 2,
                            ConcurrencyStamp = "eb38776d-103d-4113-bda3-4264bc5efbf2",
                            Definition = "Roller Programı Görüntüleme",
                            Name = "MarketingProgram.Read",
                            NormalizedName = "MARKETINGPROGRAM.READ"
                        },
                        new
                        {
                            Id = 94,
                            AccessLevel = 2,
                            ConcurrencyStamp = "c107d8b5-650c-46fb-9560-a081892c9f03",
                            Definition = "Satışlar Programı Görüntüleme",
                            Name = "AgendaProgram.Read",
                            NormalizedName = "AGENDAPROGRAM.READ"
                        },
                        new
                        {
                            Id = 95,
                            AccessLevel = 2,
                            ConcurrencyStamp = "b9cce637-e66d-4470-ab68-5383ed166753",
                            Definition = "Stok Programı Görüntüleme",
                            Name = "FinanceProgram.Read",
                            NormalizedName = "FINANCEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 96,
                            AccessLevel = 1,
                            ConcurrencyStamp = "55664a19-91c1-4430-b86f-a437150942ef",
                            Definition = "Anasayfa Görüntüleme Yetkisi",
                            Name = "HomeProgram.Read",
                            NormalizedName = "HOMEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 97,
                            AccessLevel = 1,
                            ConcurrencyStamp = "9e1c3c1b-6786-46dd-9a3a-9e22d20edaa3",
                            Definition = "Stok Modülü Görüntüleme",
                            Name = "StockModule.Read",
                            NormalizedName = "StockModule.Read"
                        },
                        new
                        {
                            Id = 98,
                            AccessLevel = 1,
                            ConcurrencyStamp = "174346b2-72a6-49fc-a124-3858fa7c5926",
                            Definition = "Personel Tipleri Modülü Görüntüleme",
                            Name = "EmployeeTypeModule.Read",
                            NormalizedName = "EMPLOYEETYPEMODULE.READ"
                        },
                        new
                        {
                            Id = 99,
                            AccessLevel = 1,
                            ConcurrencyStamp = "a6b4f606-df1b-4bbe-9c03-37218eb42024",
                            Definition = "Personeller Modülü Görüntüleme",
                            Name = "EmployeeModule.Read",
                            NormalizedName = "EMPLOYEEMODULE.READ"
                        },
                        new
                        {
                            Id = 100,
                            AccessLevel = 1,
                            ConcurrencyStamp = "9254863a-18b4-4445-beec-7a299a78221c",
                            Definition = "Kullanıcılar Modülü Görüntüleme",
                            Name = "UserModule.Read",
                            NormalizedName = "USERMODULE.READ"
                        },
                        new
                        {
                            Id = 101,
                            AccessLevel = 1,
                            ConcurrencyStamp = "aa277737-3798-45d7-bda2-9a9c288f3686",
                            Definition = "Hastalar Modülü Görüntüleme",
                            Name = "CustomerModule.Read",
                            NormalizedName = "CUSTOMERMODULE.READ"
                        },
                        new
                        {
                            Id = 102,
                            AccessLevel = 1,
                            ConcurrencyStamp = "9d7476c6-1941-4245-a7ec-42ed2605d15d",
                            Definition = "HAsta Tipleri Modülü Görüntüleme",
                            Name = "CustomerTypeModule.Read",
                            NormalizedName = "CUSTOMERTYPEMODULE.READ"
                        },
                        new
                        {
                            Id = 103,
                            AccessLevel = 1,
                            ConcurrencyStamp = "b7da2718-0c0e-47b8-9a6d-8f03fed01d44",
                            Definition = "Ürünler Modülü Yetkisi",
                            Name = "ProductModule.Read",
                            NormalizedName = "PRODUCTMODULE.READ"
                        },
                        new
                        {
                            Id = 104,
                            AccessLevel = 1,
                            ConcurrencyStamp = "580cc20a-d71b-4f73-802d-6b14941e6a39",
                            Definition = "Ürün Grupları Modülü Yetkisi",
                            Name = "ProductGroupModule.Read",
                            NormalizedName = "PRODUCTGROUPMODULE.READ"
                        },
                        new
                        {
                            Id = 105,
                            AccessLevel = 1,
                            ConcurrencyStamp = "a8494258-323d-4c70-aaf9-0e1242221e42",
                            Definition = "Ürün Alt Grupları Modülü Yetkisi",
                            Name = "ProductSubGroupModule.Read",
                            NormalizedName = "PRODUCTSUBGROUPMODULE.READ"
                        },
                        new
                        {
                            Id = 106,
                            AccessLevel = 1,
                            ConcurrencyStamp = "1687db5b-0f5d-4793-84ad-efbe2df24ee2",
                            Definition = "Markalar Modülü Yetkisi",
                            Name = "BrandModule.Read",
                            NormalizedName = "BRANDMODULE.READ"
                        },
                        new
                        {
                            Id = 107,
                            AccessLevel = 1,
                            ConcurrencyStamp = "a80d8689-84b5-41eb-922c-9a9e9ff8b013",
                            Definition = "Hasta Referanları Modülü Yetkisi",
                            Name = "CustomerReferanceModule.Read",
                            NormalizedName = "CUSTOMERREFERANCEMODULE.READ"
                        },
                        new
                        {
                            Id = 108,
                            AccessLevel = 1,
                            ConcurrencyStamp = "64b77761-e4ba-4500-ac9d-600fa5a2694d",
                            Definition = "Randevular Modülü Yetkisi",
                            Name = "AppointmentModule.Read",
                            NormalizedName = "APPOINTMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 109,
                            AccessLevel = 1,
                            ConcurrencyStamp = "8cc98ff6-5643-4e66-a60b-531df7940846",
                            Definition = "Bildirimler Modülü Yetkisi",
                            Name = "NotificationModule.Read",
                            NormalizedName = "NOTIFICATIONMODULE.READ"
                        },
                        new
                        {
                            Id = 110,
                            AccessLevel = 1,
                            ConcurrencyStamp = "84b5d2ce-b962-41fc-937f-2eb6585167d3",
                            Definition = "Dış Ödemeler Modülü Yetkisi",
                            Name = "OutPaymentModule.Read",
                            NormalizedName = "OUTPAYMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 111,
                            AccessLevel = 1,
                            ConcurrencyStamp = "a54df619-c1b6-46ee-bbea-d15844694831",
                            Definition = "Satışlar Modülü Yetkisi",
                            Name = "SaleModule.Read",
                            NormalizedName = "SALEMODULE.READ"
                        },
                        new
                        {
                            Id = 112,
                            AccessLevel = 1,
                            ConcurrencyStamp = "a7ee31a6-3cbf-4040-8c94-81210656d5c4",
                            Definition = "Gelen Ödemeler Modülü Yetkisi",
                            Name = "PaymentModule.Read",
                            NormalizedName = "PAYMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 113,
                            AccessLevel = 1,
                            ConcurrencyStamp = "937aca5b-2cb4-4c3d-b150-a63a5a164212",
                            Definition = "Gelir Giderler Modülü Yetkisi",
                            Name = "ExpenseModule.Read",
                            NormalizedName = "EXPENSEMODULE.READ"
                        },
                        new
                        {
                            Id = 114,
                            AccessLevel = 1,
                            ConcurrencyStamp = "74e5649a-e8fc-4062-b4b9-6a2766b66bec",
                            Definition = "Roller Modülü Yetkisi",
                            Name = "RoleModule.Read",
                            NormalizedName = "ROLEMODULE.READ"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountOfSgk")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DownPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvoiceDue")
                        .HasColumnType("bit");

                    b.Property<int>("IsProduct")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SgkId")
                        .HasColumnType("int");

                    b.Property<string>("SgkTypeTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("SaleStatusId");

                    b.HasIndex("SaleTypeId");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SaleStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(8050),
                            Description = "açıklama deneme status sale 1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 501, DateTimeKind.Local).AddTicks(8051),
                            Title = "Satış Aşamasında"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SaleTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(3032),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(3033),
                            Title = "Nakit"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("Stocks", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortBy")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("SubModels", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("SubPrograms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6203),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6204),
                            Name = "User.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6207),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6207),
                            Name = "User.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6210),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6210),
                            Name = "User.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6213),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6213),
                            Name = "User.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 14,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6215),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6216),
                            Name = "Role.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6218),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6219),
                            Name = "Role.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6221),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6221),
                            Name = "Role.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6224),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6224),
                            Name = "Role.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 37,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6226),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6227),
                            Name = "Payment.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 38,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6228),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6232),
                            Name = "Payment.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 39,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6234),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6235),
                            Name = "Payment.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 40,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6237),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6238),
                            Name = "Payment.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 41,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6239),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6240),
                            Name = "PaymentType.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 42,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6242),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6243),
                            Name = "PaymentType.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 43,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6245),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6246),
                            Name = "PaymentType.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 44,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6248),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6248),
                            Name = "PaymentType.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 45,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6250),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6251),
                            Name = "Employee.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 46,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6253),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6254),
                            Name = "Employee.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 47,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6255),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6256),
                            Name = "Employee.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 48,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6258),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6259),
                            Name = "Employee.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 49,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6261),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6262),
                            Name = "EmployeeType.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 50,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6263),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6269),
                            Name = "EmployeeType.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 51,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6272),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6272),
                            Name = "EmployeeType.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 52,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6274),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6275),
                            Name = "EmployeeType.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 53,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6277),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6278),
                            Name = "Customer.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 54,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6279),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6280),
                            Name = "Customer.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 55,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6282),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6283),
                            Name = "Customer.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 56,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6285),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6285),
                            Name = "Customer.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 57,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6287),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6288),
                            Name = "CustomerType.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 58,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6289),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6290),
                            Name = "CustomerType.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 59,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6292),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6293),
                            Name = "CustomerType.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 60,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6296),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6297),
                            Name = "CustomerType.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 61,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6299),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6300),
                            Name = "Notification.Create",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 62,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6303),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6304),
                            Name = "Notification.Read",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 63,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6309),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6310),
                            Name = "Notification.Update",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 64,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6312),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6313),
                            Name = "Notification.Delete",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 65,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6315),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6316),
                            Name = "Brand.Create",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 66,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6318),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6318),
                            Name = "Brand.Update",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 67,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6321),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6321),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 85,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6323),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6324),
                            Name = "Brand.Read",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 68,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6326),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6327),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 69,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6329),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6329),
                            Name = "SaleStatus.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 70,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6331),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6332),
                            Name = "SaleStatus.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 71,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6334),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6335),
                            Name = "SaleStatus.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 72,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6337),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6337),
                            Name = "SaleStatus.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 73,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6339),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6340),
                            Name = "SaleType.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 74,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6346),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6346),
                            Name = "SaleType.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 75,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6348),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6349),
                            Name = "SaleType.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 76,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6351),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6352),
                            Name = "SaleType.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 77,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6354),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6355),
                            Name = "ProductGroup.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 78,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6356),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6357),
                            Name = "ProductGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 79,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6359),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6360),
                            Name = "ProductGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 80,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6362),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6362),
                            Name = "ProductGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 81,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6364),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6365),
                            Name = "ProductSubGroup.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 82,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6368),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6369),
                            Name = "ProductSubGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 83,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6370),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6371),
                            Name = "ProductSubGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 84,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6373),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6374),
                            Name = "ProductSubGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 89,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6376),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6377),
                            Name = "AppointmentType.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 90,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6383),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6384),
                            Name = "AppointmentType.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 91,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6386),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6387),
                            Name = "AppointmentType.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 92,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6389),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6389),
                            Name = "AppointmentType.Delete",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 93,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6391),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6392),
                            Name = "Sale.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 94,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6394),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6395),
                            Name = "Sale.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 95,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6397),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6397),
                            Name = "Sale.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 96,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6400),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6400),
                            Name = "Sale.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 97,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6402),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6403),
                            Name = "Product.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 98,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6405),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6406),
                            Name = "Product.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 99,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6408),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6408),
                            Name = "Product.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 100,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6410),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6411),
                            Name = "Product.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 101,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6413),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6414),
                            Name = "Appointment.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 102,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6416),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6417),
                            Name = "Appointment.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 103,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6418),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6419),
                            Name = "Appointment.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 104,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6421),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 502, DateTimeKind.Local).AddTicks(6422),
                            Name = "Appointment.Delete",
                            ProgramId = 5
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Link")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Admin | Bilal",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5bb0dbf-3825-4302-a70b-eb767b993ad6",
                            Email = "bilalAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bilal",
                            Institution = "Fokus",
                            LastName = "Meto",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "BILALADMIN@GMAIL.COM",
                            NormalizedUserName = "BILALADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEATDLQdN83U4deINMxSi3EVViTRsiajWLPJ+u9OH5N1woZZzYGWtJm0gXVnns1cBhg==",
                            PhoneNumber = "+905537314131",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "78fe7645-3212-4b92-9ae8-c0011926dd53",
                            TwoFactorEnabled = false,
                            UserName = "bilalAdmin"
                        },
                        new
                        {
                            Id = 2,
                            About = "Admin | Nazlı",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e17ab58e-df03-4892-a86d-67d9d86cb036",
                            Email = "nazliAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nazlı",
                            Institution = "Fokus",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "NAZLIADMIN@GMAIL.COM",
                            NormalizedUserName = "NAZLIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBMe8XRDrPwvuUF89j4MvuiFLo/x9CBTxWFAeowKBE0ysooU0v3FImk7LGW1gq6ncQ==",
                            PhoneNumber = "+905398815246",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "738571d0-afca-40fe-b42b-94f4574178d7",
                            TwoFactorEnabled = false,
                            UserName = "nazliAdmin"
                        },
                        new
                        {
                            Id = 3,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fec3a5e6-be65-46a9-ad43-8da49bc1b36a",
                            Email = "sema@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sema",
                            Institution = "Fokus",
                            LastName = "-",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEMA@GMAIL.COM",
                            NormalizedUserName = "SEMA",
                            PasswordHash = "AQAAAAEAACcQAAAAEGrhnZ3nov5srcmouH8VF6ClAHVVe0I0CapsYdYQcBzVhSOskionxP5vw07LWicfXg==",
                            PhoneNumber = "+905071273567",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "fe24dfed-80b6-4074-a50c-7c94acdff13e",
                            TwoFactorEnabled = false,
                            UserName = "sema"
                        },
                        new
                        {
                            Id = 4,
                            About = "Geliştirici",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2044ab80-9c56-4dfe-a311-7666b2e8f902",
                            Email = "x@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bedirhan",
                            Institution = "Dev",
                            LastName = "Gündöner",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "X@GMAIL.COM",
                            NormalizedUserName = "DEV",
                            PasswordHash = "AQAAAAEAACcQAAAAED38A8f2SIpyADpIzkumbu8RfYEO8+vDhH/az2zLaVRlQF4JvOGbh+n3qTDz5ViODg==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "a5ffcedd-ec93-4ef0-aa72-5279c2aa8bfe",
                            TwoFactorEnabled = false,
                            UserName = "dev"
                        },
                        new
                        {
                            Id = 5,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b163112-418a-46e9-ba8a-7e6e628af113",
                            Email = "berra@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Berra",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERRA@GMAIL.COM",
                            NormalizedUserName = "BERRA",
                            PasswordHash = "AQAAAAEAACcQAAAAECfki7l9MKuH8tRV1V9rVaTezAb8kaB20jWlBDzw+tTUFRTm6y/hfnWzcloToW6fEw==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "d0fe9603-6398-44ca-b906-3063493651bc",
                            TwoFactorEnabled = false,
                            UserName = "berra"
                        },
                        new
                        {
                            Id = 6,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ee33dcf-a7a0-4dc0-bcb6-13e57ddc4822",
                            Email = "Elif@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elif",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF@GMAIL.COM",
                            NormalizedUserName = "ELIF",
                            PasswordHash = "AQAAAAEAACcQAAAAEKmZvD/4vv60gsQ/Bs9Ct+r2W2mjd7w+KiK6iW8Huo2F4dGBtDSSsEchEhGJSPfb1w==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "4d2282f1-e4b1-4306-b799-8d4f24ddd9c3",
                            TwoFactorEnabled = false,
                            UserName = "Elif"
                        },
                        new
                        {
                            Id = 7,
                            About = "Admin | Bilal",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0fdf9499-c7f5-481b-bd8b-1bc919f585f5",
                            Email = "esmaAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esma",
                            Institution = "Ases",
                            LastName = "Meto",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESMAADMIN@GMAIL.COM",
                            NormalizedUserName = "ESMAADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDZZA+tr95vcSgzPZ+HtUsqMcLh0MJSKw7M99NK2fOHHB45NBSe5bB4HoJ17LjbTXQ==",
                            PhoneNumber = "+905537314131",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "a30512c9-9100-41f5-a13c-57b0c36be0de",
                            TwoFactorEnabled = false,
                            UserName = "esmaAdmin"
                        },
                        new
                        {
                            Id = 8,
                            About = "Admin | Nazlı",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9907061-43f1-425e-a120-b32742dc612b",
                            Email = "asiyeAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Asiye",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASIYEADMIN@GMAIL.COM",
                            NormalizedUserName = "ASIYEADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBDR5juG7+w3MMyFnjDNl1BBjEA1uG9ANGLtT0Xf7x6DKhAGTLzYvM5wYO0k6vgMnA==",
                            PhoneNumber = "+905398815246",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "ca29c71a-1325-4de5-bc96-3a827d0b300d",
                            TwoFactorEnabled = false,
                            UserName = "asiyeAdmin"
                        },
                        new
                        {
                            Id = 10,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26ee8451-6da1-4605-8d24-430ceeb17eae",
                            Email = "yeliz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Yeliz",
                            Institution = "Ases",
                            LastName = "Kılıç",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "YELIZ@GMAIL.COM",
                            NormalizedUserName = "YELIZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEBPXzpblD+9nFK9umMtdJpTUc/0PwcpDhBJKyUrxEz06h9In9FQu9XfvEZ6PMfralA==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "73ef0270-72a5-4e42-924c-e3e9285fd9f2",
                            TwoFactorEnabled = false,
                            UserName = "yeliz"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7296),
                            Description = "C# Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7296),
                            Name = "C#",
                            Note = "C# Blog Kategorisi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7300),
                            Description = "C++ Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7301),
                            Name = "C++",
                            Note = "C++ Blog Kategorisi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7303),
                            Description = "JavaScript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7304),
                            Name = "JavaScript",
                            Note = "JavaScript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7306),
                            Description = "Typescript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7307),
                            Name = "Typescript",
                            Note = "Typescript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7309),
                            Description = "Java Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7310),
                            Name = "Java",
                            Note = "Java Blog Kategorisi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7312),
                            Description = "Python Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7313),
                            Name = "Python",
                            Note = "Python Blog Kategorisi"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7315),
                            Description = "Php Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7316),
                            Name = "Php",
                            Note = "Php Blog Kategorisi"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7318),
                            Description = "Kotlin Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7318),
                            Name = "Kotlin",
                            Note = "Kotlin Blog Kategorisi"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7320),
                            Description = "Swift Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7321),
                            Name = "Swift",
                            Note = "Swift Blog Kategorisi"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7324),
                            Description = "Ruby Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 484, DateTimeKind.Local).AddTicks(7324),
                            Name = "Ruby",
                            Note = "Ruby Blog Kategorisi"
                        });
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 2, 4, 16, 53, 9, 485, DateTimeKind.Local).AddTicks(7370),
                            Description = "Product Kategori 2 Açıkama",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 2, 4, 16, 53, 9, 485, DateTimeKind.Local).AddTicks(7371),
                            Name = "Product Kategori 1",
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany("Appointments")
                        .HasForeignKey("UserId");

                    b.Navigation("AppointmentType");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.HasOne("MyBlog.Shared.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany("AssociatedInstitutions")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferance", "CustomerReferance")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerReferanceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Customers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferance");

                    b.Navigation("CustomerType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferanceTitle", "CustomerReferanceTitle")
                        .WithMany("CustomersReferances")
                        .HasForeignKey("CustomerReferanceTitleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferanceTitle");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Model", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Notifications")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPaymentDetail", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("outPaymentDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.OutPayment", "OutPayment")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("OutPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("OutPayment");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", null)
                        .WithMany("Payments")
                        .HasForeignKey("AssociatedInstitutionId");

                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", "AssociatedInstitutions")
                        .WithMany()
                        .HasForeignKey("AssociatedInstitutionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", null)
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId1");

                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Brand", null)
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("MyBlog.Entities.Concrete.Model", "Model")
                        .WithMany("Products")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Shared.Entities.Concrete.ProductCategory", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("MyBlog.Entities.Concrete.ProductSubGroup", "ProductSubGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SubModel", "SubModel")
                        .WithMany("Products")
                        .HasForeignKey("SubModelId");

                    b.Navigation("Model");

                    b.Navigation("ProductSubGroup");

                    b.Navigation("SubModel");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.ProductGroup", "ProductGroup")
                        .WithMany("ProductSubGroups")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Module", "Module")
                        .WithMany("Programs")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId");

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Sales")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Sale")
                        .HasForeignKey("MyBlog.Entities.Concrete.Sale", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.SaleStatus", "SaleStatus")
                        .WithMany("Sales")
                        .HasForeignKey("SaleStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SaleType", "SaleType")
                        .WithMany("Sales")
                        .HasForeignKey("SaleTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Product");

                    b.Navigation("SaleStatus");

                    b.Navigation("SaleType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("MyBlog.Entities.Concrete.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubModel", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Program", "Program")
                        .WithMany("SubPrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Navigation("Models");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferanceTitle", b =>
                {
                    b.Navigation("CustomersReferances");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Customers");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");

                    b.Navigation("outPaymentDetails");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Model", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPayment", b =>
                {
                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Navigation("ProductSubGroups");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Navigation("SubPrograms");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubModel", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Articles");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
