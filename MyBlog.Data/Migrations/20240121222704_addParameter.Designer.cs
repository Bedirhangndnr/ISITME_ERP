// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.Data.Concrete.EntityFramework.Context;

#nullable disable

namespace MyBlog.Data.Migrations
{
    [DbContext(typeof(MyBlogContext))]
    [Migration("20240121222704_addParameter")]
    partial class addParameter
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMade")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewCustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTypeId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 56, DateTimeKind.Local).AddTicks(3900),
                            CustomerId = 1,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama2",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 56, DateTimeKind.Local).AddTicks(3901),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(1979),
                            Description = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(1980),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CommentCount = 0,
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local),
                            Date = new DateTime(2024, 1, 22, 1, 27, 2, 54, DateTimeKind.Local).AddTicks(9996),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1),
                            Note = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoTags = "C#, C# 9, .NET5, .NET Framework, .NET Core",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C# 9.0 ve .NET 5 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CommentCount = 0,
                            Content = "Yinelenen bir sayfa içeriğinin okuyucunun dikkatini dağıttığı bilinen bir gerçektir. Lorem Ipsum kullanmanın amacı, sürekli 'buraya metin gelecek, buraya metin gelecek' yazmaya kıyasla daha dengeli bir harf dağılımı sağlayarak okunurluğu artırmasıdır. Şu anda birçok masaüstü yayıncılık paketi ve web sayfa düzenleyicisi, varsayılan mıgır metinler olarak Lorem Ipsum kullanmaktadır. Ayrıca arama motorlarında 'lorem ipsum' anahtar sözcükleri ile arama yapıldığında henüz tasarım aşamasında olan çok sayıda site listelenir. Yıllar içinde, bazen kazara, bazen bilinçli olarak (örneğin mizah katılarak), çeşitli sürümleri geliştirilmiştir.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(6),
                            Date = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(5),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(7),
                            Note = "C++ 11 ve 19 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C++ 11 ve 19 Yenilikleri",
                            SeoTags = "C++ 11 ve 19 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C++ 11 ve 19 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 295
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(10),
                            Date = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(10),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(11),
                            Note = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoTags = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 12
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CommentCount = 0,
                            Content = "É um facto estabelecido de que um leitor é distraído pelo conteúdo legível de uma página quando analisa a sua mancha gráfica. Logo, o uso de Lorem Ipsum leva a uma distribuição mais ou menos normal de letras, ao contrário do uso de 'Conteúdo aqui,conteúdo aqui'', tornando-o texto legível. Muitas ferramentas de publicação electrónica e editores de páginas web usam actualmente o Lorem Ipsum como o modelo de texto usado por omissão, e uma pesquisa por 'lorem ipsum' irá encontrar muitos websites ainda na sua infância. Várias versões têm evoluído ao longo dos anos, por vezes por acidente, por vezes propositadamente (como no caso do humor).",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(14),
                            Date = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(13),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(14),
                            Note = "Typescript 4.1 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Typescript 4.1, Typescript, TYPESCRIPT 2021",
                            SeoTags = "Typescript 4.1 Güncellemeleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Typescript 4.1",
                            UserId = 1,
                            ViewsCount = 666
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(17),
                            Date = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(16),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(17),
                            Note = "JAVA",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Java, Android, Mobile, Kotlin, Uygulama Geliştirme",
                            SeoTags = "Java, Mobil, Kotlin, Android, IOS, SWIFT",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Java ve Android'in Geleceği | 2021",
                            UserId = 1,
                            ViewsCount = 3225
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            CommentCount = 0,
                            Content = "Le Lorem Ipsum est simplement du faux texte employé dans la composition et la mise en page avant impression. Le Lorem Ipsum est le faux texte standard de l'imprimerie depuis les années 1500, quand un imprimeur anonyme assembla ensemble des morceaux de texte pour réaliser un livre spécimen de polices de texte. Il n'a pas fait que survivre cinq siècles, mais s'est aussi adapté à la bureautique informatique, sans que son contenu n'en soit modifié. Il a été popularisé dans les années 1960 grâce à la vente de feuilles Letraset contenant des passages du Lorem Ipsum, et, plus récemment, par son inclusion dans des applications de mise en page de texte, comme Aldus PageMaker.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(20),
                            Date = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(19),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(20),
                            Note = "Python",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Python ile Veri Madenciliği",
                            SeoTags = "Python, Veri Madenciliği Nasıl Yapılır?",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Python ile Veri Madenciliği | 2021",
                            UserId = 1,
                            ViewsCount = 9999
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            CommentCount = 0,
                            Content = "Contrairement à une opinion répandue, le Lorem Ipsum n'est pas simplement du texte aléatoire. Il trouve ses racines dans une oeuvre de la littérature latine classique datant de 45 av. J.-C., le rendant vieux de 2000 ans. Un professeur du Hampden-Sydney College, en Virginie, s'est intéressé à un des mots latins les plus obscurs, consectetur, extrait d'un passage du Lorem Ipsum, et en étudiant tous les usages de ce mot dans la littérature classique, découvrit la source incontestable du Lorem Ipsum. Il provient en fait des sections 1.10.32 et 1.10.33 du 0De Finibus Bonorum et Malorum' (Des Suprêmes Biens et des Suprêmes Maux) de Cicéron. Cet ouvrage, très populaire pendant la Renaissance, est un traité sur la théorie de l'éthique. Les premières lignes du Lorem Ipsum, 'Lorem ipsum dolor sit amet...'', proviennent de la section 1.10.32",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(23),
                            Date = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(22),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(23),
                            Note = "PHP",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Php ile API Oluşturma Rehberi",
                            SeoTags = "php, laravel, api, oop",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Php Laravel Başlangıç Rehberi | API",
                            UserId = 1,
                            ViewsCount = 4818
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            CommentCount = 0,
                            Content = "Plusieurs variations de Lorem Ipsum peuvent être trouvées ici ou là, mais la majeure partie d'entre elles a été altérée par l'addition d'humour ou de mots aléatoires qui ne ressemblent pas une seconde à du texte standard. Si vous voulez utiliser un passage du Lorem Ipsum, vous devez être sûr qu'il n'y a rien d'embarrassant caché dans le texte. Tous les générateurs de Lorem Ipsum sur Internet tendent à reproduire le même extrait sans fin, ce qui fait de lipsum.com le seul vrai générateur de Lorem Ipsum. Iil utilise un dictionnaire de plus de 200 mots latins, en combinaison de plusieurs structures de phrases, pour générer un Lorem Ipsum irréprochable. Le Lorem Ipsum ainsi obtenu ne contient aucune répétition, ni ne contient des mots farfelus, ou des touches d'humour.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(26),
                            Date = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(25),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(26),
                            Note = "Kotlin",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Kotlin ile Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "kotlin, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Kotlin ile Mobil Programlama",
                            UserId = 1,
                            ViewsCount = 750
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            CommentCount = 0,
                            Content = "Al contrario di quanto si pensi, Lorem Ipsum non è semplicemente una sequenza casuale di caratteri. Risale ad un classico della letteratura latina del 45 AC, cosa che lo rende vecchio di 2000 anni. Richard McClintock, professore di latino al Hampden-Sydney College in Virginia, ha ricercato una delle più oscure parole latine, consectetur, da un passaggio del Lorem Ipsum e ha scoperto tra i vari testi in cui è citata, la fonte da cui è tratto il testo, le sezioni 1.10.32 and 1.10.33 del 'de Finibus Bonorum et Malorum' di Cicerone. Questo testo è un trattato su teorie di etica, molto popolare nel Rinascimento. La prima riga del Lorem Ipsum, 'Lorem ipsum dolor sit amet..'', è tratta da un passaggio della sezione 1.10.32.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(29),
                            Date = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(28),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(29),
                            Note = "Swift",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Swift ile IOS Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "IOS, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Swift ile IOS Programlama",
                            UserId = 1,
                            ViewsCount = 14900
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            CommentCount = 0,
                            Content = "Esistono innumerevoli variazioni dei passaggi del Lorem Ipsum, ma la maggior parte hanno subito delle variazioni del tempo, a causa dell’inserimento di passaggi ironici, o di sequenze casuali di caratteri palesemente poco verosimili. Se si decide di utilizzare un passaggio del Lorem Ipsum, è bene essere certi che non contenga nulla di imbarazzante. In genere, i generatori di testo segnaposto disponibili su internet tendono a ripetere paragrafi predefiniti, rendendo questo il primo vero generatore automatico su intenet. Infatti utilizza un dizionario di oltre 200 vocaboli latini, combinati con un insieme di modelli di strutture di periodi, per generare passaggi di testo verosimili. Il testo così generato è sempre privo di ripetizioni, parole imbarazzanti o fuori luogo ecc.",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(32),
                            Date = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(31),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(32),
                            Note = "Ruby",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Ruby, Ruby on Rails Web Programlama, AirBnb Klon",
                            SeoTags = "Ruby on Rails, Ruby, Web Programlama, AirBnb",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Ruby on Rails ile AirBnb Klon Kodlayalım",
                            UserId = 1,
                            ViewsCount = 26777
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("AssociatedInstitutions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4939),
                            Description = "İş Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4940),
                            PaymentTypeId = 1,
                            Title = "İş Bankası"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4941),
                            Description = "Garanti Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4942),
                            PaymentTypeId = 1,
                            Title = "Garanti Bankası"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4943),
                            Description = "Yapı Kredi Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4943),
                            PaymentTypeId = 1,
                            Title = "Yapı Kredi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4944),
                            Description = "Akbank Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4944),
                            PaymentTypeId = 1,
                            Title = "Akbank"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4945),
                            Description = "Avrupa Ses Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4945),
                            PaymentTypeId = 2,
                            Title = "Avrupa Ses"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4946),
                            Description = "Sivasot Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4946),
                            PaymentTypeId = 2,
                            Title = "Sivasot"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4948),
                            Description = "Timtoptan Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4948),
                            PaymentTypeId = 2,
                            Title = "Timtoptan"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "act Manuel"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1611),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1614),
                            Note = "C# Makale Yorumu",
                            Text = "Lorem Ipsum pasajlarının birçok çeşitlemesi vardır. Ancak bunların büyük bir çoğunluğu mizah katılarak veya rastgele sözcükler eklenerek değiştirilmişlerdir. Eğer bir Lorem Ipsum pasajı kullanacaksanız, metin aralarına utandırıcı sözcükler gizlenmediğinden emin olmanız gerekir. İnternet'teki tüm Lorem Ipsum üreteçleri önceden belirlenmiş metin bloklarını yineler. Bu da, bu üreteci İnternet üzerindeki gerçek Lorem Ipsum üreteci yapar. Bu üreteç, 200'den fazla Latince sözcük ve onlara ait cümle yapılarını içeren bir sözlük kullanır. Bu nedenle, üretilen Lorem Ipsum metinleri yinelemelerden, mizahtan ve karakteristik olmayan sözcüklerden uzaktır."
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1617),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1617),
                            Note = "C++ Makale Yorumu",
                            Text = "Lorem Ipsum jest tekstem stosowanym jako przykładowy wypełniacz w przemyśle poligraficznym. Został po raz pierwszy użyty w XV w. przez nieznanego drukarza do wypełnienia tekstem próbnej książki. Pięć wieków później zaczął być używany przemyśle elektronicznym, pozostając praktycznie niezmienionym. Spopularyzował się w latach 60. XX w. wraz z publikacją arkuszy Letrasetu, zawierających fragmenty Lorem Ipsum, a ostatnio z zawierającym różne wersje Lorem Ipsum oprogramowaniem przeznaczonym do realizacji druków na komputerach osobistych, jak Aldus PageMaker"
                        },
                        new
                        {
                            Id = 3,
                            ArticleId = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1619),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1620),
                            Note = "JavaScript Makale Yorumu",
                            Text = "Ang Lorem Ipsum ay ginagamit na modelo ng industriya ng pagpriprint at pagtytypeset. Ang Lorem Ipsum ang naging regular na modelo simula pa noong 1500s, noong may isang di kilalang manlilimbag and kumuha ng galley ng type at ginulo ang pagkaka-ayos nito upang makagawa ng libro ng mga type specimen. Nalagpasan nito hindi lang limang siglo, kundi nalagpasan din nito ang paglaganap ng electronic typesetting at nanatiling parehas. Sumikat ito noong 1960s kasabay ng pag labas ng Letraset sheets na mayroong mga talata ng Lorem Ipsum, at kamakailan lang sa mga desktop publishing software tulad ng Aldus Pagemaker ginamit ang mga bersyon ng Lorem Ipsum."
                        },
                        new
                        {
                            Id = 4,
                            ArticleId = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1622),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1622),
                            Note = "Typescript Makale Yorumu",
                            Text = "Lorem Ipsum er rett og slett dummytekst fra og for trykkeindustrien. Lorem Ipsum har vært bransjens standard for dummytekst helt siden 1500-tallet, da en ukjent boktrykker stokket en mengde bokstaver for å lage et prøveeksemplar av en bok. Lorem Ipsum har tålt tidens tann usedvanlig godt, og har i tillegg til å bestå gjennom fem århundrer også tålt spranget over til elektronisk typografi uten vesentlige endringer. Lorem Ipsum ble gjort allment kjent i 1960-årene ved lanseringen av Letraset-ark med avsnitt fra Lorem Ipsum, og senere med sideombrekkingsprogrammet Aldus PageMaker som tok i bruk nettopp Lorem Ipsum for dummytekst."
                        },
                        new
                        {
                            Id = 5,
                            ArticleId = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1624),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1624),
                            Note = "Java Makale Yorumu",
                            Text = "Lorem Ipsum este pur şi simplu o machetă pentru text a industriei tipografice. Lorem Ipsum a fost macheta standard a industriei încă din secolul al XVI-lea, când un tipograf anonim a luat o planşetă de litere şi le-a amestecat pentru a crea o carte demonstrativă pentru literele respective. Nu doar că a supravieţuit timp de cinci secole, dar şi a facut saltul în tipografia electronică practic neschimbată. A fost popularizată în anii '60 odată cu ieşirea colilor Letraset care conţineau pasaje Lorem Ipsum, iar mai recent, prin programele de publicare pentru calculator, ca Aldus PageMaker care includeau versiuni de Lorem Ipsum."
                        },
                        new
                        {
                            Id = 6,
                            ArticleId = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1626),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1627),
                            Note = "Python Makale Yorumu",
                            Text = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a."
                        },
                        new
                        {
                            Id = 7,
                            ArticleId = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1628),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1629),
                            Note = "Php Makale Yorumu",
                            Text = "Lorem Ipsum – tas ir teksta salikums, kuru izmanto poligrāfijā un maketēšanas darbos. Lorem Ipsum ir kļuvis par vispārpieņemtu teksta aizvietotāju kopš 16. gadsimta sākuma. Tajā laikā kāds nezināms iespiedējs izveidoja teksta fragmentu, lai nodrukātu grāmatu ar burtu paraugiem. Tas ir ne tikai pārdzīvojis piecus gadsimtus, bet bez ievērojamām izmaiņām saglabājies arī mūsdienās, pārejot uz datorizētu teksta apstrādi. Tā popularizēšanai 60-tajos gados kalpoja Letraset burtu paraugu publicēšana ar Lorem Ipsum teksta fragmentiem un, nesenā pagātnē, tādas maketēšanas programmas kā Aldus PageMaker, kuras šablonu paraugos ir izmantots Lorem Ipsum teksts."
                        },
                        new
                        {
                            Id = 8,
                            ArticleId = 8,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1631),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1631),
                            Note = "Kotlin Makale Yorumu",
                            Text = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like)."
                        },
                        new
                        {
                            Id = 9,
                            ArticleId = 9,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1633),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1634),
                            Note = "Swift Makale Yorumu",
                            Text = "هنالك العديد من الأنواع المتوفرة لنصوص لوريم إيبسوم، ولكن الغالبية تم تعديلها بشكل ما عبر إدخال بعض النوادر أو الكلمات العشوائية إلى النص. إن كنت تريد أن تستخدم نص لوريم إيبسوم ما، عليك أن تتحقق أولاً أن ليس هناك أي كلمات أو عبارات محرجة أو غير لائقة مخبأة في هذا النص. بينما تعمل جميع مولّدات نصوص لوريم إيبسوم على الإنترنت على إعادة تكرار مقاطع من نص لوريم إيبسوم نفسه عدة مرات بما تتطلبه الحاجة، يقوم مولّدنا هذا باستخدام كلمات من قاموس يحوي على أكثر من 200 كلمة لا تينية، مضاف إليها مجموعة من الجمل النموذجية، لتكوين نص لوريم إيبسوم ذو شكل منطقي قريب إلى النص الحقيقي. وبالتالي يكون النص الناتح خالي من التكرار، أو أي كلمات أو عبارات غير لائقة أو ما شابه. وهذا ما يجعله أول مولّد نص لوريم إيبسوم حقيقي على الإنترنت."
                        },
                        new
                        {
                            Id = 10,
                            ArticleId = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1635),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(1636),
                            Note = "Ruby Makale Yorumu",
                            Text = "Lorem Ipsum，也称乱数假文或者哑元文本， 是印刷及排版领域所常用的虚拟文字。由于曾经一台匿名的打印机刻意打乱了一盒印刷字体从而造出一本字体样品书，Lorem Ipsum从西元15世纪起就被作为此领域的标准文本使用。它不仅延续了五个世纪，还通过了电子排版的挑战，其雏形却依然保存至今。在1960年代，”Leatraset”公司发布了印刷着Lorem Ipsum段落的纸张，从而广泛普及了它的使用。最近，计算机桌面出版软件”Aldus PageMaker”也通过同样的方式使Lorem Ipsum落入大众的视野。"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HospitalOfReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2024, 1, 26, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(3398),
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(3395),
                            CustomerReferanceId = 1,
                            CustomerTypeId = 1,
                            Email = "hasta1@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(3396),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceTitleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FromWhere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TC")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceTitleId");

                    b.ToTable("CustomerReferances", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(6053),
                            CustomerReferanceTitleId = 1,
                            Description = "Description",
                            FirstName = "Sema",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(6053),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Phone = "+905050102249"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferanceTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("CustomerReferanceTitles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(4841),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(4842),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Referans Unvan 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(6574),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(6575),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(289),
                            Email = "bedirhangn@gmail.com",
                            EmployeeTypeId = 1,
                            FirstName = "Personel 1",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(290),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(469),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(470),
                            Note = "Not",
                            Title = "Title"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDaily")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncome")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Expenses", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.MessageToDeveloper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EstimatedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MessageToDevelopers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(5593),
                            EstimatedCompletionDate = new DateTime(2024, 1, 27, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(5595),
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "TEST",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(5594),
                            Progress = 3,
                            Title = "MessageToDeveloper Title Test"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(5599),
                            EstimatedCompletionDate = new DateTime(2024, 1, 27, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(5601),
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "TEST 2222222222222222",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(5600),
                            Progress = 1,
                            Title = "MessageToDeveloper Title Test"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(5603),
                            EstimatedCompletionDate = new DateTime(2024, 1, 25, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(5604),
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Message = "TEST 2222222222222222",
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(5603),
                            Progress = 4,
                            Title = "MessageToDeveloper Title Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(9776),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(9777),
                            Name = "AgendaProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(9779),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(9780),
                            Name = "CustomerModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(9782),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(9782),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(9785),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(9786),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(9788),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(9788),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(9790),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(9790),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(9792),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(9793),
                            Name = "StockModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(3624),
                            CustomerId = 1,
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(3625),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2024, 1, 25, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(3628),
                            Title = "Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(3634),
                            CustomerId = 1,
                            Description = "Doğum günü yaklaşmakta.",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(3634),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2024, 1, 24, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(3636),
                            Title = "Doğum Günü!",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(3638),
                            CustomerId = 1,
                            Description = "Aylık cihaz bakımı için konuşulacak",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(3638),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2024, 1, 23, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(3639),
                            Title = "Cihaz Bakımı!",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DebtAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PaidPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutPayments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 0m,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 69, DateTimeKind.Local).AddTicks(8794),
                            DebtAmount = 15000m,
                            Description = "TEST desc 1 ",
                            DueDate = new DateTime(2024, 1, 26, 1, 27, 2, 69, DateTimeKind.Local).AddTicks(8801),
                            IsActive = true,
                            IsDeleted = false,
                            IsPaid = true,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 69, DateTimeKind.Local).AddTicks(8795),
                            PaidPlace = "Ödemenin Yapılacağı yer"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OutPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OutPaymentId");

                    b.ToTable("OutPaymentDetails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1000m,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 69, DateTimeKind.Local).AddTicks(9401),
                            Description = "TEST desc 1 ",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 69, DateTimeKind.Local).AddTicks(9401),
                            OutPaymentId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ParamCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParamValue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue5")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParamValue6")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Parameter", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(4164),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(4166),
                            ParamCode = "SGKTutari",
                            ParamType = "Tutar Tipi 1",
                            ParamValue = "1000"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("AssociatedInstitutionId")
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedInstitutionsId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId1")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PaymentTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTypeId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedInstitutionId");

                    b.HasIndex("AssociatedInstitutionsId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PaymentTypeId1");

                    b.ToTable("Payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 69, DateTimeKind.Local).AddTicks(7975),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 69, DateTimeKind.Local).AddTicks(7975),
                            PaymentTypeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 69, DateTimeKind.Local).AddTicks(9472),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 69, DateTimeKind.Local).AddTicks(9473),
                            Title = "KK | POS"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 69, DateTimeKind.Local).AddTicks(9476),
                            Description = "Mail Order Payment",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 69, DateTimeKind.Local).AddTicks(9476),
                            Title = "Mail Order"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 69, DateTimeKind.Local).AddTicks(9477),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 69, DateTimeKind.Local).AddTicks(9477),
                            Title = "Peşin"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsProduct")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("ProductSubGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("SubModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductSubGroupId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.HasIndex("SubModelId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(4166),
                            Description = "Ürün Grubu Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(4167),
                            Title = "Ürün Grubu 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductSubGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(5004),
                            Description = "Model Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(5006),
                            ProductGroupId = 1,
                            Title = "Model Başlığı"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Programs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3888),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3889),
                            ModuleId = 5,
                            Name = "EmployeeProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3896),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3900),
                            ModuleId = 5,
                            Name = "UserModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3902),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3903),
                            ModuleId = 7,
                            Name = "StockModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3905),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3905),
                            ModuleId = 6,
                            Name = "CustomerReferanceModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3907),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3907),
                            ModuleId = 1,
                            Name = "AppointmentModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3909),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3909),
                            ModuleId = 1,
                            Name = "NotificationModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3917),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3918),
                            ModuleId = 3,
                            Name = "PaymentProgram.Read"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3924),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3924),
                            ModuleId = 2,
                            Name = "CustomerProgram.Read"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3926),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3927),
                            ModuleId = 7,
                            Name = "BrandModule.Read"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3928),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3929),
                            ModuleId = 3,
                            Name = "SaleModule.Read"
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3930),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3931),
                            ModuleId = 7,
                            Name = "ProductProgram.Read"
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3933),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(3933),
                            ModuleId = 5,
                            Name = "RoleModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessLevel = 1,
                            ConcurrencyStamp = "20dcd987-9185-4e2a-94fc-c198d4e9a566",
                            Definition = "SüperAdmin Yetkisi",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2,
                            AccessLevel = 1,
                            ConcurrencyStamp = "7549b87d-0f7e-4c74-a123-ce753b1858f5",
                            Definition = "Standart Kullanıcı Yetkisi",
                            Name = "DefaultUser",
                            NormalizedName = "DEFAULTUSER"
                        },
                        new
                        {
                            Id = 3,
                            AccessLevel = 1,
                            ConcurrencyStamp = "e0143873-452f-4a8d-bd74-2165a377fa37",
                            Definition = "Developer Yetkisi",
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = 4,
                            AccessLevel = 3,
                            ConcurrencyStamp = "edb6a821-71ad-4d8b-8c0a-1159d6ec68ae",
                            Definition = "Kullanıcı Ekleme Yetkisi",
                            Name = "User.Create",
                            NormalizedName = "USER.CREATE"
                        },
                        new
                        {
                            Id = 5,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a5605ea6-3399-478d-8c28-bdc5c8ddafdb",
                            Definition = "Kullanıcı Görüntüleme Yetkisi",
                            Name = "User.Read",
                            NormalizedName = "USER.READ"
                        },
                        new
                        {
                            Id = 6,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9134d43a-4cb2-494f-ae86-385b5beadf6a",
                            Definition = "Kullanıcı Güncelleme Yetkisi",
                            Name = "User.Update",
                            NormalizedName = "USER.UPDATE"
                        },
                        new
                        {
                            Id = 7,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e0bc050f-75be-4c07-a917-95faa1089bd3",
                            Definition = "Kullanıcı Silme Yetkisi",
                            Name = "User.Delete",
                            NormalizedName = "USER.DELETE"
                        },
                        new
                        {
                            Id = 8,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ce303e85-3cb9-4826-a564-cc7e41712ea7",
                            Definition = "Rol Görüntüleme Yetkisi",
                            Name = "Role.Read",
                            NormalizedName = "ROLE.READ"
                        },
                        new
                        {
                            Id = 9,
                            AccessLevel = 3,
                            ConcurrencyStamp = "403f837c-df0d-43bb-aad0-038beff01591",
                            Definition = "Rol Güncelleme Yetkisi",
                            Name = "Role.Update",
                            NormalizedName = "ROLE.UPDATE"
                        },
                        new
                        {
                            Id = 10,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4b3c904e-840d-4ab1-8673-f3eac2a864d3",
                            Definition = "Rol Silme Yetkisi",
                            Name = "Role.Delete",
                            NormalizedName = "ROLE.DELETE"
                        },
                        new
                        {
                            Id = 11,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9a2a2fde-dfba-4caa-b58e-4e9a5e365be1",
                            Definition = "Rol Ekleme Yetkisi",
                            Name = "Role.Create",
                            NormalizedName = "ROLE.CREATE"
                        },
                        new
                        {
                            Id = 12,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4a869f14-f77e-4d3b-b113-7b95bcd90bda",
                            Definition = "Ödeme Ekleme Yetkisi",
                            Name = "Payment.Create",
                            NormalizedName = "PAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 13,
                            AccessLevel = 3,
                            ConcurrencyStamp = "50f77cff-d8a4-400b-ac7e-84c117139852",
                            Definition = "Ödeme Görüntüleme Yetkisi",
                            Name = "Payment.Read",
                            NormalizedName = "PAYMENT.READ"
                        },
                        new
                        {
                            Id = 14,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1eb1b60f-6c71-4495-ac5e-a242ceaf6ed8",
                            Definition = "Ödeme Güncelleme Yetkisi",
                            Name = "Payment.Update",
                            NormalizedName = "PAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 15,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b6d7dd7a-4583-4c5f-ac11-3e6a2e87de6d",
                            Definition = "Ödeme Silme Yetkisi",
                            Name = "Payment.Delete",
                            NormalizedName = "PAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 16,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9f07857f-630e-443c-8b39-4d1f766ca48c",
                            Definition = "Ödeme Türü Ekleme Yetkisi",
                            Name = "PaymentType.Create",
                            NormalizedName = "PAYMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 17,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8563b671-a2e9-49e6-9e79-03476228a630",
                            Definition = "Ödeme Türü Görüntüleme Yetkisi",
                            Name = "PaymentType.Read",
                            NormalizedName = "PAYMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 18,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d3145b3c-857f-4d94-ac57-2ceb50a9fd98",
                            Definition = "Ödeme Türü Güncelleme Yetkisi",
                            Name = "PaymentType.Update",
                            NormalizedName = "PAYMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 19,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4567a30d-7c69-42d3-a186-079805d73a3d",
                            Definition = "Ödeme Türü Silme Yetkisi",
                            Name = "PaymentType.Delete",
                            NormalizedName = "PAYMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 20,
                            AccessLevel = 3,
                            ConcurrencyStamp = "42cf68fb-f115-49c2-88f6-23f0b7eac19a",
                            Definition = "Personel Ekleme Yetkisi",
                            Name = "Employee.Create",
                            NormalizedName = "EMPLOYEE.CREATE"
                        },
                        new
                        {
                            Id = 21,
                            AccessLevel = 3,
                            ConcurrencyStamp = "22a1308d-d870-4122-bdee-36e90157aacc",
                            Definition = "Personel Görüntüleme Yetkisi",
                            Name = "Employee.Read",
                            NormalizedName = "EMPLOYEE.READ"
                        },
                        new
                        {
                            Id = 22,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ba468d5b-6d23-4536-9cbe-499a78f91016",
                            Definition = "Personel Güncelleme Yetkisi",
                            Name = "Employee.Update",
                            NormalizedName = "EMPLOYEE.UPDATE"
                        },
                        new
                        {
                            Id = 23,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7f977a71-3640-46df-8652-12d7fe328392",
                            Definition = "Personel Silme Yetkisi",
                            Name = "Employee.Delete",
                            NormalizedName = "EMPLOYEE.DELETE"
                        },
                        new
                        {
                            Id = 24,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a4bf0492-45fc-4e5c-ae7c-67313166e509",
                            Definition = "Personel Türü Ekleme Yetkisi",
                            Name = "EmployeeType.Create",
                            NormalizedName = "EMPLOYEETYPE.CREATE"
                        },
                        new
                        {
                            Id = 25,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4ee3375b-82f0-4035-bef5-1135d2ae4ac1",
                            Definition = "Personel Türü Görüntüleme Yetkisi",
                            Name = "EmployeeType.Read",
                            NormalizedName = "EMPLOYEETYPE.READ"
                        },
                        new
                        {
                            Id = 26,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0c8b9ff7-be92-4db2-a233-cf6e42163f55",
                            Definition = "Personel Türü Güncelleme Yetkisi",
                            Name = "EmployeeType.Update",
                            NormalizedName = "EMPLOYEETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 27,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0a0ed6e6-4a7c-4c65-8bd9-c3492b4437b2",
                            Definition = "Personel Türü Silme Yetkisi",
                            Name = "EmployeeType.Delete",
                            NormalizedName = "EMPLOYEETYPE.DELETE"
                        },
                        new
                        {
                            Id = 28,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b00573b1-c1ec-4e03-860a-b34b579a3cf3",
                            Definition = "Müşteri Ekleme Yetkisi",
                            Name = "Customer.Create",
                            NormalizedName = "CUSTOMER.CREATE"
                        },
                        new
                        {
                            Id = 29,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ec1ced1d-cc6c-471c-9c85-b30ac54edb84",
                            Definition = "Müşteri Görüntüleme Yetkisi",
                            Name = "Customer.Read",
                            NormalizedName = "CUSTOMER.READ"
                        },
                        new
                        {
                            Id = 30,
                            AccessLevel = 3,
                            ConcurrencyStamp = "cdb28a4d-2240-4996-b276-5fe098f3d554",
                            Definition = "Müşteri Güncelleme Yetkisi",
                            Name = "Customer.Update",
                            NormalizedName = "CUSTOMER.UPDATE"
                        },
                        new
                        {
                            Id = 31,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0850558a-0ad4-4a7c-80d4-ff0e89486acd",
                            Definition = "Müşteri Silme Yetkisi",
                            Name = "Customer.Delete",
                            NormalizedName = "CUSTOMER.DELETE"
                        },
                        new
                        {
                            Id = 32,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a994afb7-6ecd-47f2-abd8-ed3a5e11b99b",
                            Definition = "Müşteri Tipi Ekleme Yetkisi",
                            Name = "CustomerType.Create",
                            NormalizedName = "CUSTOMERTYPE.CREATE"
                        },
                        new
                        {
                            Id = 33,
                            AccessLevel = 3,
                            ConcurrencyStamp = "48cf0082-8b90-49e3-92a5-e21f0e3290ca",
                            Definition = "Müşteri Tipi Görüntüleme Yetkisi",
                            Name = "CustomerType.Read",
                            NormalizedName = "CUSTOMERTYPE.READ"
                        },
                        new
                        {
                            Id = 34,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b2ada370-f310-4ee4-844b-707c3dc01b0b",
                            Definition = "Müşteri Tipi Güncelleme Yetkisi",
                            Name = "CustomerType.Update",
                            NormalizedName = "CUSTOMERTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 35,
                            AccessLevel = 3,
                            ConcurrencyStamp = "cab30588-2f8d-4cb4-8cfe-0b3aa0f10bc7",
                            Definition = "Müşteri Tipi Silme Yetkisi",
                            Name = "CustomerType.Delete",
                            NormalizedName = "CUSTOMERTYPE.DELETE"
                        },
                        new
                        {
                            Id = 36,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b18e97f4-591b-4ce4-836c-1596174350dc",
                            Definition = "Bildirim Ekleme Yetkisi",
                            Name = "Notification.Create",
                            NormalizedName = "NOTIFICATION.CREATE"
                        },
                        new
                        {
                            Id = 37,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5ba6bc7e-d4d9-48e3-984a-e92b07ba5761",
                            Definition = "Bildirim Görüntüleme Yetkisi",
                            Name = "Notification.Read",
                            NormalizedName = "NOTIFICATION.READ"
                        },
                        new
                        {
                            Id = 38,
                            AccessLevel = 3,
                            ConcurrencyStamp = "43d01da7-251c-4ace-8dfa-ae0e160cdc76",
                            Definition = "Bildirim Güncelleme Yetkisi",
                            Name = "Notification.Update",
                            NormalizedName = "NOTIFICATION.UPDATE"
                        },
                        new
                        {
                            Id = 39,
                            AccessLevel = 3,
                            ConcurrencyStamp = "564955ca-e606-43e9-9c02-3f0ecab45e5e",
                            Definition = "Bildirim Silme Yetkisi",
                            Name = "Notification.Delete",
                            NormalizedName = "NOTIFICATION.DELETE"
                        },
                        new
                        {
                            Id = 40,
                            AccessLevel = 3,
                            ConcurrencyStamp = "fcdd499d-d959-4920-9a40-32fefa10c4ca",
                            Definition = "Brand Ekleme Yetkisi",
                            Name = "Brand.Create",
                            NormalizedName = "BRAND.CREATE"
                        },
                        new
                        {
                            Id = 41,
                            AccessLevel = 3,
                            ConcurrencyStamp = "eba4d359-9fa4-4947-8a0e-f968ebe143f3",
                            Definition = "Brand Görüntüleme Yetkisi",
                            Name = "Brand.Read",
                            NormalizedName = "BRAND.READ"
                        },
                        new
                        {
                            Id = 42,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b8cafe63-2815-4096-8342-df2fcb5389b2",
                            Definition = "Brand Güncelleme Yetkisi",
                            Name = "Brand.Update",
                            NormalizedName = "BRAND.UPDATE"
                        },
                        new
                        {
                            Id = 43,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6dd131b7-b862-4f6b-93dc-9ea0433a38e0",
                            Definition = "Brand Silme Yetkisi",
                            Name = "Brand.Delete",
                            NormalizedName = "BRAND.DELETE"
                        },
                        new
                        {
                            Id = 44,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9b7de024-b1e1-4816-a29a-94630ce954ae",
                            Definition = "Brand Ekleme Yetkisi",
                            Name = "MessageToDeveloper.Create",
                            NormalizedName = "MESSAGETODEVELOPER.CREATE"
                        },
                        new
                        {
                            Id = 45,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5aaafc88-1a61-4267-b05d-d45c1efb4ea7",
                            Definition = "Brand  Yetkisi",
                            Name = "MessageToDeveloper.Read",
                            NormalizedName = "MESSAGETODEVELOPER.READ"
                        },
                        new
                        {
                            Id = 46,
                            AccessLevel = 3,
                            ConcurrencyStamp = "15555e56-aa45-4a54-8d29-6ca71b66df42",
                            Definition = "Brand  Yetkisi",
                            Name = "MessageToDeveloper.Update",
                            NormalizedName = "MESSAGETODEVELOPER.UPDATE"
                        },
                        new
                        {
                            Id = 47,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3102bb8d-b563-4419-88dc-9883783661f9",
                            Definition = "Brand  Yetkisi",
                            Name = "MessageToDeveloper.Delete",
                            NormalizedName = "MESSAGETODEVELOPER.DELETE"
                        },
                        new
                        {
                            Id = 48,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5231f234-650c-4541-a2b7-3a77579a9518",
                            Definition = "Satış Durumu Ekleme Yetkisi",
                            Name = "SaleStatus.Create",
                            NormalizedName = "SALESTATUS.CREATE"
                        },
                        new
                        {
                            Id = 49,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1ca45ecd-64f3-4156-88e4-92456d7ef284",
                            Definition = "Satış Durumu Görüntüleme Yetkisi",
                            Name = "SaleStatus.Read",
                            NormalizedName = "SALESTATUS.READ"
                        },
                        new
                        {
                            Id = 50,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1fed942d-2aeb-4531-80b9-23990f3a5e4c",
                            Definition = "Satış Durumu Güncelleme Yetkisi",
                            Name = "SaleStatus.Update",
                            NormalizedName = "SALESTATUS.UPDATE"
                        },
                        new
                        {
                            Id = 51,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1f870f58-4931-4983-b3bd-bdadf7edabe7",
                            Definition = "Satış Durumu Silme Yetkisi",
                            Name = "SaleStatus.Delete",
                            NormalizedName = "SALESTATUS.DELETE"
                        },
                        new
                        {
                            Id = 52,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e0e8dedb-ebbc-4645-baca-b7073a56dcc2",
                            Definition = "Satış Türü Ekleme Yetkisi",
                            Name = "SaleType.Create",
                            NormalizedName = "SALETYPE.CREATE"
                        },
                        new
                        {
                            Id = 53,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3f93153a-9990-46d2-8e78-deef7fafccd7",
                            Definition = "Satış Türü Görüntüleme Yetkisi",
                            Name = "SaleType.Read",
                            NormalizedName = "SALETYPE.READ"
                        },
                        new
                        {
                            Id = 54,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b61bcc25-3ae8-44eb-9258-835af94dd844",
                            Definition = "Satış Türü Güncelleme Yetkisi",
                            Name = "SaleType.Update",
                            NormalizedName = "SALETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 55,
                            AccessLevel = 3,
                            ConcurrencyStamp = "368dbb3d-c37f-4705-b78e-de84f7029832",
                            Definition = "Satış Türü Silme Yetkisi",
                            Name = "SaleType.Delete",
                            NormalizedName = "SALETYPE.DELETE"
                        },
                        new
                        {
                            Id = 56,
                            AccessLevel = 3,
                            ConcurrencyStamp = "11dae935-5fc5-474d-86f8-a4334f2f18a4",
                            Definition = "Ürün Grubu Ekleme Yetkisi",
                            Name = "ProductGroup.Create",
                            NormalizedName = "PRODUCTGROUP.CREATE"
                        },
                        new
                        {
                            Id = 57,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e0ef4fa7-9230-43aa-90b9-abbe1df3d36e",
                            Definition = "Ürün Grubu Görüntüleme Yetkisi",
                            Name = "ProductGroup.Read",
                            NormalizedName = "PRODUCTGROUP.READ"
                        },
                        new
                        {
                            Id = 58,
                            AccessLevel = 3,
                            ConcurrencyStamp = "68b18ad8-1d79-4f54-8439-44470842d168",
                            Definition = "Ürün Grubu Güncelleme Yetkisi",
                            Name = "ProductGroup.Update",
                            NormalizedName = "PRODUCTGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 59,
                            AccessLevel = 3,
                            ConcurrencyStamp = "dddef4b7-fe7e-455f-8c63-0365cf8dc8cc",
                            Definition = "Ürün Grubu Silme Yetkisi",
                            Name = "ProductGroup.Delete",
                            NormalizedName = "PRODUCTGROUP.DELETE"
                        },
                        new
                        {
                            Id = 60,
                            AccessLevel = 3,
                            ConcurrencyStamp = "fc3a8eb6-ac14-44e5-875a-e339a48bf547",
                            Definition = "Model Ekleme Yetkisi",
                            Name = "ProductSubGroup.Create",
                            NormalizedName = "PRODUCTSUBGROUP.CREATE"
                        },
                        new
                        {
                            Id = 61,
                            AccessLevel = 3,
                            ConcurrencyStamp = "ab313ffa-3be2-46fd-b38e-ee9915b4ba0f",
                            Definition = "Model Görüntüleme Yetkisi",
                            Name = "ProductSubGroup.Read",
                            NormalizedName = "PRODUCTSUBGROUP.READ"
                        },
                        new
                        {
                            Id = 62,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4e6188ac-f2d7-4289-883a-dc5d057ee62f",
                            Definition = "Model Güncelleme Yetkisi",
                            Name = "ProductSubGroup.Update",
                            NormalizedName = "PRODUCTSUBGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 63,
                            AccessLevel = 3,
                            ConcurrencyStamp = "32a9c41c-991d-4f7b-8941-b9a942226c8f",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "ProductSubGroup.Delete",
                            NormalizedName = "PRODUCTSUBGROUP.DELETE"
                        },
                        new
                        {
                            Id = 64,
                            AccessLevel = 3,
                            ConcurrencyStamp = "08fd4e62-12d5-4555-a43e-ad1fa59205b4",
                            Definition = "Randevu Türü Ekleme Yetkisi",
                            Name = "AppointmentType.Create",
                            NormalizedName = "APPOINTMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 65,
                            AccessLevel = 3,
                            ConcurrencyStamp = "fbacfb8b-eac3-4fe4-8184-095365272cc1",
                            Definition = "Randevu Türü Görüntüleme Yetkisi",
                            Name = "AppointmentType.Read",
                            NormalizedName = "APPOINTMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 66,
                            AccessLevel = 3,
                            ConcurrencyStamp = "661b2319-225f-4402-a6be-6c3e9613b2e0",
                            Definition = "Randevu Türü Güncelleme Yetkisi",
                            Name = "AppointmentType.Update",
                            NormalizedName = "APPOINTMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 67,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8dbfb6bc-ab7a-4326-b5ac-2460d06b0fec",
                            Definition = "Randevu Türü Silme Yetkisi",
                            Name = "AppointmentType.Delete",
                            NormalizedName = "APPOINTMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 68,
                            AccessLevel = 3,
                            ConcurrencyStamp = "eb3bafaa-f7eb-4f10-b5f7-ee676192bca7",
                            Definition = "Satış Oluşturma Yetkisi",
                            Name = "Sale.Create",
                            NormalizedName = "SALE.CREATE"
                        },
                        new
                        {
                            Id = 69,
                            AccessLevel = 3,
                            ConcurrencyStamp = "78e8323a-4c42-4b45-b7a7-f9a7a04ace25",
                            Definition = "Satış Görüntüleme Yetkisi",
                            Name = "Sale.Read",
                            NormalizedName = "SALE.READ"
                        },
                        new
                        {
                            Id = 70,
                            AccessLevel = 3,
                            ConcurrencyStamp = "cbf868c7-5c42-43a2-b0d2-1b9661a7738e",
                            Definition = "Satış Güncelleme Yetkisi",
                            Name = "Sale.Update",
                            NormalizedName = "SALE.UPDATE"
                        },
                        new
                        {
                            Id = 71,
                            AccessLevel = 3,
                            ConcurrencyStamp = "30487af8-e3fb-4f38-9761-9de732f61017",
                            Definition = "Satış Silme Yetkisi",
                            Name = "Sale.Delete",
                            NormalizedName = "SALE.DELETE"
                        },
                        new
                        {
                            Id = 72,
                            AccessLevel = 3,
                            ConcurrencyStamp = "07c492e8-88ce-486e-af17-39c1a280ddb2",
                            Definition = "Ürün Ekleme Yetkisi",
                            Name = "Product.Create",
                            NormalizedName = "PRODUCT.CREATE"
                        },
                        new
                        {
                            Id = 73,
                            AccessLevel = 3,
                            ConcurrencyStamp = "90f5ee00-3576-4671-a5ae-764f8fb8f7a5",
                            Definition = "Ürün Görüntüleme Yetkisi",
                            Name = "Product.Read",
                            NormalizedName = "PRODUCT.READ"
                        },
                        new
                        {
                            Id = 74,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1f480f31-bba2-4fc9-9cff-6aed8b559005",
                            Definition = "Ürün Güncelleme Yetkisi",
                            Name = "Product.Update",
                            NormalizedName = "PRODUCT.UPDATE"
                        },
                        new
                        {
                            Id = 75,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e18dc7f5-7764-4cb0-9603-cf54b23ddaf5",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "Product.Delete",
                            NormalizedName = "PRODUCT.DELETE"
                        },
                        new
                        {
                            Id = 76,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d78b95ff-ec89-46bd-a922-56a3268adb3b",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "Appointment.Create",
                            NormalizedName = "APPOINTMENT.CREATE"
                        },
                        new
                        {
                            Id = 77,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9fe19c6d-70df-4a88-8d3f-1f5b2b54f7f3",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "Appointment.Read",
                            NormalizedName = "APPOINTMENT.READ"
                        },
                        new
                        {
                            Id = 78,
                            AccessLevel = 3,
                            ConcurrencyStamp = "645f4d17-d920-40a9-b045-ce1c49820218",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "Appointment.Update",
                            NormalizedName = "APPOINTMENT.UPDATE"
                        },
                        new
                        {
                            Id = 79,
                            AccessLevel = 3,
                            ConcurrencyStamp = "63e722bd-9789-4149-8607-7fc201b634af",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "Appointment.Delete",
                            NormalizedName = "APPOINTMENT.DELETE"
                        },
                        new
                        {
                            Id = 80,
                            AccessLevel = 3,
                            ConcurrencyStamp = "197cf3a9-0683-4c42-b8fc-565f31e550b0",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "OutPayment.Create",
                            NormalizedName = "OUTPAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 81,
                            AccessLevel = 3,
                            ConcurrencyStamp = "845f4313-bbe9-44a5-bc66-cb1e81f35724",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "OutPayment.Read",
                            NormalizedName = "OUTPAYMENT.READ"
                        },
                        new
                        {
                            Id = 82,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6c72974e-6b3c-4fec-a883-fe760865fa50",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "OutPayment.Update",
                            NormalizedName = "OUTPAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 83,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8f089dc1-9d1b-4890-bc80-247c03a16699",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "OutPayment.Delete",
                            NormalizedName = "OUTPAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 84,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bde44a9c-a799-4925-b0c2-34602fa2deb9",
                            Definition = "Dış Ödeme Detayı Oluşturma Yetkisi",
                            Name = "OutPaymentDetail.Create",
                            NormalizedName = "OUTPAYMENTDETAIL.CREATE"
                        },
                        new
                        {
                            Id = 85,
                            AccessLevel = 3,
                            ConcurrencyStamp = "876a4980-96b8-47ea-ad3f-32e009ff1334",
                            Definition = "Dış Ödeme Detayı Görüntüleme Yetkisi",
                            Name = "OutPaymentDetail.Read",
                            NormalizedName = "OUTPAYMENTDETAIL.READ"
                        },
                        new
                        {
                            Id = 86,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8e150daf-b420-4363-bb6f-ec9620052ad8",
                            Definition = "Dış Ödeme Detayı Güncelleme Yetkisi",
                            Name = "OutPaymentDetail.Update",
                            NormalizedName = "OUTPAYMENTDETAIL.UPDATE"
                        },
                        new
                        {
                            Id = 87,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e656b547-1a4b-4d2c-b67d-e20b8954b0cc",
                            Definition = "Dış Ödeme Detayı Silme Yetkisi",
                            Name = "OutPaymentDetail.Delete",
                            NormalizedName = "OUTPAYMENTDETAIL.DELETE"
                        },
                        new
                        {
                            Id = 88,
                            AccessLevel = 2,
                            ConcurrencyStamp = "0cb5f009-8ed5-4fcc-b11d-2f1e01f46f3d",
                            Definition = "Markalar Programı Görüntüleme",
                            Name = "EmployeeProgram.Read",
                            NormalizedName = "EMPLOYEEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 89,
                            AccessLevel = 2,
                            ConcurrencyStamp = "a50a095d-752e-415b-883e-18a50591cbd3",
                            Definition = "Randevular Programı Görüntüleme",
                            Name = "InstitutionalProgram.Read",
                            NormalizedName = "INSTITUTIONALPROGRAM.READ"
                        },
                        new
                        {
                            Id = 90,
                            AccessLevel = 2,
                            ConcurrencyStamp = "56a61d8a-609d-46c7-8731-91f508700369",
                            Definition = "Hastalar Programı Görüntüleme",
                            Name = "CustomerProgram.Read",
                            NormalizedName = "CUSTOMERPROGRAM.READ"
                        },
                        new
                        {
                            Id = 91,
                            AccessLevel = 2,
                            ConcurrencyStamp = "0dbfcee9-adf2-4680-9929-75d16902dd6e",
                            Definition = "Referanslar Programı Görüntüleme",
                            Name = "PaymentProgram.Read",
                            NormalizedName = "PAYMENTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 92,
                            AccessLevel = 2,
                            ConcurrencyStamp = "6d159bb1-4e6b-418c-9886-b2656dc5f402",
                            Definition = "Ürünler Programı Görüntüleme",
                            Name = "ProductProgram.Read",
                            NormalizedName = "PRODUCTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 93,
                            AccessLevel = 2,
                            ConcurrencyStamp = "3b29b039-e3aa-4ed9-b586-d28c3d8b5afa",
                            Definition = "Roller Programı Görüntüleme",
                            Name = "MarketingProgram.Read",
                            NormalizedName = "MARKETINGPROGRAM.READ"
                        },
                        new
                        {
                            Id = 94,
                            AccessLevel = 2,
                            ConcurrencyStamp = "3a4bd1d8-3810-4ed2-b0d2-7b6b20e7ca4b",
                            Definition = "Satışlar Programı Görüntüleme",
                            Name = "AgendaProgram.Read",
                            NormalizedName = "AGENDAPROGRAM.READ"
                        },
                        new
                        {
                            Id = 95,
                            AccessLevel = 2,
                            ConcurrencyStamp = "ce8371e6-ee0c-4964-be30-41aede0b7d3e",
                            Definition = "Stok Programı Görüntüleme",
                            Name = "FinanceProgram.Read",
                            NormalizedName = "FINANCEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 96,
                            AccessLevel = 1,
                            ConcurrencyStamp = "e220be24-276d-4b81-9d58-29d2ee90bdb6",
                            Definition = "Anasayfa Görüntüleme Yetkisi",
                            Name = "HomeProgram.Read",
                            NormalizedName = "HOMEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 97,
                            AccessLevel = 1,
                            ConcurrencyStamp = "1d34b36e-d2ee-43e5-b074-fa0afe101ec7",
                            Definition = "Stok Modülü Görüntüleme",
                            Name = "StockModule.Read",
                            NormalizedName = "StockModule.Read"
                        },
                        new
                        {
                            Id = 98,
                            AccessLevel = 1,
                            ConcurrencyStamp = "b5e26950-4d22-4471-905f-9c96df9336f1",
                            Definition = "Personel Tipleri Modülü Görüntüleme",
                            Name = "EmployeeTypeModule.Read",
                            NormalizedName = "EMPLOYEETYPEMODULE.READ"
                        },
                        new
                        {
                            Id = 99,
                            AccessLevel = 1,
                            ConcurrencyStamp = "e1f6610c-9db9-4743-a0d1-f007a0a26c34",
                            Definition = "Personeller Modülü Görüntüleme",
                            Name = "EmployeeModule.Read",
                            NormalizedName = "EMPLOYEEMODULE.READ"
                        },
                        new
                        {
                            Id = 100,
                            AccessLevel = 1,
                            ConcurrencyStamp = "a05c8edc-43b7-4405-bfa6-56cd5ece4862",
                            Definition = "Kullanıcılar Modülü Görüntüleme",
                            Name = "UserModule.Read",
                            NormalizedName = "USERMODULE.READ"
                        },
                        new
                        {
                            Id = 101,
                            AccessLevel = 1,
                            ConcurrencyStamp = "5528cdf7-e0f6-46a9-971e-29fd011eb6f6",
                            Definition = "Hastalar Modülü Görüntüleme",
                            Name = "CustomerModule.Read",
                            NormalizedName = "CUSTOMERMODULE.READ"
                        },
                        new
                        {
                            Id = 102,
                            AccessLevel = 1,
                            ConcurrencyStamp = "3c4751da-b974-4ed9-acc5-09cc8cce9be7",
                            Definition = "HAsta Tipleri Modülü Görüntüleme",
                            Name = "CustomerTypeModule.Read",
                            NormalizedName = "CUSTOMERTYPEMODULE.READ"
                        },
                        new
                        {
                            Id = 103,
                            AccessLevel = 1,
                            ConcurrencyStamp = "c75393b2-4025-407b-9457-a40afebee51a",
                            Definition = "Ürünler Modülü Yetkisi",
                            Name = "ProductModule.Read",
                            NormalizedName = "PRODUCTMODULE.READ"
                        },
                        new
                        {
                            Id = 104,
                            AccessLevel = 1,
                            ConcurrencyStamp = "7d19f638-9790-498c-bb23-84cc10cc8821",
                            Definition = "Ürün Grupları Modülü Yetkisi",
                            Name = "ProductGroupModule.Read",
                            NormalizedName = "PRODUCTGROUPMODULE.READ"
                        },
                        new
                        {
                            Id = 105,
                            AccessLevel = 1,
                            ConcurrencyStamp = "e2d96b54-52e6-49e6-9644-fc80fdf13f1d",
                            Definition = "Ürün Alt Grupları Modülü Yetkisi",
                            Name = "ProductSubGroupModule.Read",
                            NormalizedName = "PRODUCTSUBGROUPMODULE.READ"
                        },
                        new
                        {
                            Id = 106,
                            AccessLevel = 1,
                            ConcurrencyStamp = "07820b0f-936b-4a01-aab4-c3d5fc05f055",
                            Definition = "Markalar Modülü Yetkisi",
                            Name = "BrandModule.Read",
                            NormalizedName = "BRANDMODULE.READ"
                        },
                        new
                        {
                            Id = 107,
                            AccessLevel = 1,
                            ConcurrencyStamp = "152e4171-8492-4acb-b2d9-f680981e94e7",
                            Definition = "Hasta Referanları Modülü Yetkisi",
                            Name = "CustomerReferanceModule.Read",
                            NormalizedName = "CUSTOMERREFERANCEMODULE.READ"
                        },
                        new
                        {
                            Id = 108,
                            AccessLevel = 1,
                            ConcurrencyStamp = "9ae367bc-2f46-4f54-a5ca-e38f5e05f10e",
                            Definition = "Randevular Modülü Yetkisi",
                            Name = "AppointmentModule.Read",
                            NormalizedName = "APPOINTMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 109,
                            AccessLevel = 1,
                            ConcurrencyStamp = "f6b1bd6b-2915-46a9-a891-743ee22d0c91",
                            Definition = "Bildirimler Modülü Yetkisi",
                            Name = "NotificationModule.Read",
                            NormalizedName = "NOTIFICATIONMODULE.READ"
                        },
                        new
                        {
                            Id = 110,
                            AccessLevel = 1,
                            ConcurrencyStamp = "5b46efc6-48b7-40d0-be0a-063c0789fa58",
                            Definition = "Dış Ödemeler Modülü Yetkisi",
                            Name = "OutPaymentModule.Read",
                            NormalizedName = "OUTPAYMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 111,
                            AccessLevel = 1,
                            ConcurrencyStamp = "22f36f71-4bc0-455a-9bd8-cf6657db3b00",
                            Definition = "Satışlar Modülü Yetkisi",
                            Name = "SaleModule.Read",
                            NormalizedName = "SALEMODULE.READ"
                        },
                        new
                        {
                            Id = 112,
                            AccessLevel = 1,
                            ConcurrencyStamp = "b9978755-e577-48ac-b015-34aa4f508a26",
                            Definition = "Gelen Ödemeler Modülü Yetkisi",
                            Name = "PaymentModule.Read",
                            NormalizedName = "PAYMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 113,
                            AccessLevel = 1,
                            ConcurrencyStamp = "f9b801ae-83d6-44e0-86c0-58ce8ef65157",
                            Definition = "Gelir Giderler Modülü Yetkisi",
                            Name = "ExpenseModule.Read",
                            NormalizedName = "EXPENSEMODULE.READ"
                        },
                        new
                        {
                            Id = 114,
                            AccessLevel = 1,
                            ConcurrencyStamp = "126b1596-2101-42da-89e3-f786cf33184c",
                            Definition = "Roller Modülü Yetkisi",
                            Name = "RoleModule.Read",
                            NormalizedName = "ROLEMODULE.READ"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfSgk")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DownPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvoiceDue")
                        .HasColumnType("bit");

                    b.Property<int>("IsProduct")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("SaleStatusId");

                    b.HasIndex("SaleTypeId");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SaleStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(5548),
                            Description = "açıklama deneme status sale 1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(5549),
                            Title = "Satış Aşamasında"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SaleTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(9122),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 70, DateTimeKind.Local).AddTicks(9123),
                            Title = "Nakit"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("Stocks", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortBy")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("SubModels", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("SubPrograms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4611),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4612),
                            Name = "User.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4614),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4615),
                            Name = "User.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4617),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4617),
                            Name = "User.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4619),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4620),
                            Name = "User.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 14,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4621),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4622),
                            Name = "Role.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4623),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4624),
                            Name = "Role.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4626),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4626),
                            Name = "Role.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4628),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4628),
                            Name = "Role.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 37,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4630),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4630),
                            Name = "Payment.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 38,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4633),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4634),
                            Name = "Payment.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 39,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4636),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4636),
                            Name = "Payment.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 40,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4638),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4638),
                            Name = "Payment.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 41,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4640),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4640),
                            Name = "PaymentType.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 42,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4642),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4643),
                            Name = "PaymentType.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 43,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4644),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4645),
                            Name = "PaymentType.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 44,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4646),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4647),
                            Name = "PaymentType.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 45,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4652),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4653),
                            Name = "Employee.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 46,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4655),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4656),
                            Name = "Employee.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 47,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4658),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4659),
                            Name = "Employee.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 48,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4661),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4661),
                            Name = "Employee.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 49,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4663),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4663),
                            Name = "EmployeeType.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 50,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4665),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4665),
                            Name = "EmployeeType.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 51,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4667),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4667),
                            Name = "EmployeeType.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 52,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4669),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4670),
                            Name = "EmployeeType.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 53,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4671),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4672),
                            Name = "Customer.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 54,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4673),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4674),
                            Name = "Customer.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 55,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4675),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4676),
                            Name = "Customer.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 56,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4677),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4678),
                            Name = "Customer.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 57,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4680),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4680),
                            Name = "CustomerType.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 58,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4682),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4682),
                            Name = "CustomerType.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 59,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4684),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4684),
                            Name = "CustomerType.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 60,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4686),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4687),
                            Name = "CustomerType.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 61,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4688),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4689),
                            Name = "Notification.Create",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 62,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4690),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4691),
                            Name = "Notification.Read",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 63,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4692),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4693),
                            Name = "Notification.Update",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 64,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4694),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4695),
                            Name = "Notification.Delete",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 65,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4701),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4701),
                            Name = "Brand.Create",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 66,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4703),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4703),
                            Name = "Brand.Update",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 67,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4705),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4705),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 85,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4707),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4708),
                            Name = "Brand.Read",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 68,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4709),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4710),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 69,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4711),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4712),
                            Name = "SaleStatus.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 70,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4713),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4714),
                            Name = "SaleStatus.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 71,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4716),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4716),
                            Name = "SaleStatus.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 72,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4718),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4718),
                            Name = "SaleStatus.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 73,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4723),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4723),
                            Name = "SaleType.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 74,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4725),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4726),
                            Name = "SaleType.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 75,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4727),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4728),
                            Name = "SaleType.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 76,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4729),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4730),
                            Name = "SaleType.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 77,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4731),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4732),
                            Name = "ProductGroup.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 78,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4733),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4734),
                            Name = "ProductGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 79,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4736),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4736),
                            Name = "ProductGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 80,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4738),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4738),
                            Name = "ProductGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 81,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4740),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4740),
                            Name = "ProductSubGroup.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 82,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4743),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4744),
                            Name = "ProductSubGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 83,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4748),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4748),
                            Name = "ProductSubGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 84,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4750),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4750),
                            Name = "ProductSubGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 89,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4752),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4753),
                            Name = "AppointmentType.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 90,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4754),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4755),
                            Name = "AppointmentType.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 91,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4756),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4757),
                            Name = "AppointmentType.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 92,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4758),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4759),
                            Name = "AppointmentType.Delete",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 93,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4761),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4761),
                            Name = "Sale.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 94,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4764),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4764),
                            Name = "Sale.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 95,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4766),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4766),
                            Name = "Sale.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 96,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4768),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4769),
                            Name = "Sale.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 97,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4770),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4771),
                            Name = "Product.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 98,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4772),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4773),
                            Name = "Product.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 99,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4776),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4776),
                            Name = "Product.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 100,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4778),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4779),
                            Name = "Product.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 101,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4781),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4782),
                            Name = "Appointment.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 102,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4783),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4784),
                            Name = "Appointment.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 103,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4785),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4786),
                            Name = "Appointment.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 104,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4787),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 71, DateTimeKind.Local).AddTicks(4788),
                            Name = "Appointment.Delete",
                            ProgramId = 5
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Link")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Admin | Bilal",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "606a19d9-7d7d-48c9-b0df-fa1eb2484c68",
                            Email = "bilalAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bilal",
                            Institution = "Fokus",
                            LastName = "Meto",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "BILALADMIN@GMAIL.COM",
                            NormalizedUserName = "BILALADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPiluVJfWC8vYQEj+sLUZGsfJbjF4wlUheVMPsaP7W8mOiwJgXU+0sE1e66PRpeXug==",
                            PhoneNumber = "+905537314131",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "55ab3b9b-548a-4ff1-8643-00bce58e51ee",
                            TwoFactorEnabled = false,
                            UserName = "bilalAdmin"
                        },
                        new
                        {
                            Id = 2,
                            About = "Admin | Nazlı",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e2d625d-669c-46cb-9e37-9dec82a1ce0d",
                            Email = "nazliAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nazlı",
                            Institution = "Fokus",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "NAZLIADMIN@GMAIL.COM",
                            NormalizedUserName = "NAZLIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECEYh5l9PIx+sUg2IbEuVYr63E5Nb6WY3dqEn24iElMjj43LSifiENs0Y42ZLLHAMg==",
                            PhoneNumber = "+905398815246",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "dabe62de-4a8c-4d54-bcb5-18bd85a47f32",
                            TwoFactorEnabled = false,
                            UserName = "nazliAdmin"
                        },
                        new
                        {
                            Id = 3,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d79b5d9-ff18-4779-82c8-047a593b16e2",
                            Email = "sema@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sema",
                            Institution = "Fokus",
                            LastName = "-",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEMA@GMAIL.COM",
                            NormalizedUserName = "SEMA",
                            PasswordHash = "AQAAAAEAACcQAAAAEMLV2d3WyGzuFmObZ0/BCCLcFj2/vzrBmWivvx/LNudlVpOov6zmgMytnZ1FYmmyrw==",
                            PhoneNumber = "+905071273567",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "646b8a19-068a-4ee0-896e-afa8a2da259c",
                            TwoFactorEnabled = false,
                            UserName = "sema"
                        },
                        new
                        {
                            Id = 4,
                            About = "Geliştirici",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cceb2878-3832-4520-8e70-271c22d14f75",
                            Email = "x@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bedirhan",
                            Institution = "Dev",
                            LastName = "Gündöner",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "X@GMAIL.COM",
                            NormalizedUserName = "DEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEK5EqaDd6CNWihY4Jsr9I5QdDEBLzagdI5Fa91wpvDdAks3akHFflA+mxpoisl6Fcw==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "aae8b87b-03c6-4418-99ff-eed8c55d5766",
                            TwoFactorEnabled = false,
                            UserName = "dev"
                        },
                        new
                        {
                            Id = 5,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9da6c910-56a6-41c7-85ed-5f92b88d7c37",
                            Email = "berra@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Berra",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERRA@GMAIL.COM",
                            NormalizedUserName = "BERRA",
                            PasswordHash = "AQAAAAEAACcQAAAAEEfokPkpd92N/m5cP9Jg+yuK6MLwDxvVQueOolakvXZ2cfNezj0BsRvU9279oRh8yQ==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "a910d632-c76a-4d28-8e8b-6302b623449b",
                            TwoFactorEnabled = false,
                            UserName = "berra"
                        },
                        new
                        {
                            Id = 6,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9cd60555-ddf1-4d2a-8932-b41aa9afbd28",
                            Email = "Elif@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elif",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF@GMAIL.COM",
                            NormalizedUserName = "ELIF",
                            PasswordHash = "AQAAAAEAACcQAAAAEHAWBFx+qzuAxfJN0OKsUtzLC+efYdoA+73r7RqKuHwujdWVWyC4XIDO6VCDbv1s8A==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "a6592dbf-3c32-43d4-9548-2f627c40c836",
                            TwoFactorEnabled = false,
                            UserName = "Elif"
                        },
                        new
                        {
                            Id = 7,
                            About = "Admin | Bilal",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c09966a6-264c-4790-b0b5-2f89dadbbc00",
                            Email = "esmaAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esma",
                            Institution = "Ases",
                            LastName = "Meto",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESMAADMIN@GMAIL.COM",
                            NormalizedUserName = "ESMAADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEKbyUS8OKZ2Pbmeca2Xy/PvkFVndCGCr1oaIrfXyuyuxFauus9xrWoGFrqhKFH+mMQ==",
                            PhoneNumber = "+905537314131",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "e433ea75-47ea-4964-9322-a8666c73ca23",
                            TwoFactorEnabled = false,
                            UserName = "esmaAdmin"
                        },
                        new
                        {
                            Id = 8,
                            About = "Admin | Nazlı",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dbbd4d98-fdfe-4787-b0d5-4120b2a7affa",
                            Email = "asiyeAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Asiye",
                            Institution = "Ases",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASIYEADMIN@GMAIL.COM",
                            NormalizedUserName = "ASIYEADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHOr6G3ZVwVfBfQmo2iy48f4OcDo8imCArDEIxUCymaO6BxQhLKO+5lubR4HTqPw9g==",
                            PhoneNumber = "+905398815246",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "72724547-d147-4b1d-bc13-a08107af7a74",
                            TwoFactorEnabled = false,
                            UserName = "asiyeAdmin"
                        },
                        new
                        {
                            Id = 10,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9bd6cbaa-acbd-4daa-a297-ce107f1585e5",
                            Email = "yeliz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Yeliz",
                            Institution = "Ases",
                            LastName = "Kılıç",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "YELIZ@GMAIL.COM",
                            NormalizedUserName = "YELIZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEHMfidHvFYFsuL6S7jGPtrU6qr+ZjI4XrabqIA3Vr2ecO+qrqe6z7njNlxl2KsuTRA==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "21a55213-bb0e-40df-8290-624517b851c9",
                            TwoFactorEnabled = false,
                            UserName = "yeliz"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(728),
                            Description = "C# Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(729),
                            Name = "C#",
                            Note = "C# Blog Kategorisi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(731),
                            Description = "C++ Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(731),
                            Name = "C++",
                            Note = "C++ Blog Kategorisi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(733),
                            Description = "JavaScript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(734),
                            Name = "JavaScript",
                            Note = "JavaScript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(736),
                            Description = "Typescript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(736),
                            Name = "Typescript",
                            Note = "Typescript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(738),
                            Description = "Java Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(738),
                            Name = "Java",
                            Note = "Java Blog Kategorisi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(740),
                            Description = "Python Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(741),
                            Name = "Python",
                            Note = "Python Blog Kategorisi"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(742),
                            Description = "Php Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(743),
                            Name = "Php",
                            Note = "Php Blog Kategorisi"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(745),
                            Description = "Kotlin Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(745),
                            Name = "Kotlin",
                            Note = "Kotlin Blog Kategorisi"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(747),
                            Description = "Swift Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(748),
                            Name = "Swift",
                            Note = "Swift Blog Kategorisi"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(749),
                            Description = "Ruby Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(750),
                            Name = "Ruby",
                            Note = "Ruby Blog Kategorisi"
                        });
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Test Verisi",
                            CreatedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(7117),
                            Description = "Product Kategori 2 Açıkama",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Test Verisi",
                            ModifiedDate = new DateTime(2024, 1, 22, 1, 27, 2, 55, DateTimeKind.Local).AddTicks(7118),
                            Name = "Product Kategori 1",
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany("Appointments")
                        .HasForeignKey("UserId");

                    b.Navigation("AppointmentType");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.HasOne("MyBlog.Shared.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany("AssociatedInstitutions")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferance", "CustomerReferance")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerReferanceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Customers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferance");

                    b.Navigation("CustomerType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferanceTitle", "CustomerReferanceTitle")
                        .WithMany("CustomersReferances")
                        .HasForeignKey("CustomerReferanceTitleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferanceTitle");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Model", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Notifications")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPaymentDetail", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("outPaymentDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.OutPayment", "OutPayment")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("OutPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("OutPayment");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", null)
                        .WithMany("Payments")
                        .HasForeignKey("AssociatedInstitutionId");

                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", "AssociatedInstitutions")
                        .WithMany()
                        .HasForeignKey("AssociatedInstitutionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", null)
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId1");

                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Brand", null)
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("MyBlog.Entities.Concrete.Model", "Model")
                        .WithMany("Products")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Shared.Entities.Concrete.ProductCategory", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("MyBlog.Entities.Concrete.ProductSubGroup", "ProductSubGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SubModel", "SubModel")
                        .WithMany("Products")
                        .HasForeignKey("SubModelId");

                    b.Navigation("Model");

                    b.Navigation("ProductSubGroup");

                    b.Navigation("SubModel");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.ProductGroup", "ProductGroup")
                        .WithMany("ProductSubGroups")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Module", "Module")
                        .WithMany("Programs")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId");

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Sales")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Sale")
                        .HasForeignKey("MyBlog.Entities.Concrete.Sale", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.SaleStatus", "SaleStatus")
                        .WithMany("Sales")
                        .HasForeignKey("SaleStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SaleType", "SaleType")
                        .WithMany("Sales")
                        .HasForeignKey("SaleTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Product");

                    b.Navigation("SaleStatus");

                    b.Navigation("SaleType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("MyBlog.Entities.Concrete.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubModel", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Program", "Program")
                        .WithMany("SubPrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Navigation("Models");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferanceTitle", b =>
                {
                    b.Navigation("CustomersReferances");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Customers");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");

                    b.Navigation("outPaymentDetails");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Model", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPayment", b =>
                {
                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Navigation("ProductSubGroups");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Navigation("SubPrograms");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubModel", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Articles");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
