// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.Data.Concrete.EntityFramework.Context;

#nullable disable

namespace MyBlog.Data.Migrations
{
    [DbContext(typeof(MyBlogContext))]
    [Migration("20230822181210_updateRequiredvalues")]
    partial class updateRequiredvalues
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMade")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTypeId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(6091),
                            CustomerId = 1,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama2",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(6092),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentTypeId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(6100),
                            CustomerId = 2,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(6102),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentTypeId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(6106),
                            CustomerId = 3,
                            Date = new DateTime(1998, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Açıklama3",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsMade = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(6107),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(8077),
                            Description = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(8078),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Test"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(8083),
                            Description = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(8084),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CommentCount = 0,
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9809),
                            Date = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9807),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9811),
                            Note = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C# 9.0 ve .NET 5 Yenilikleri",
                            SeoTags = "C#, C# 9, .NET5, .NET Framework, .NET Core",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C# 9.0 ve .NET 5 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CommentCount = 0,
                            Content = "Yinelenen bir sayfa içeriğinin okuyucunun dikkatini dağıttığı bilinen bir gerçektir. Lorem Ipsum kullanmanın amacı, sürekli 'buraya metin gelecek, buraya metin gelecek' yazmaya kıyasla daha dengeli bir harf dağılımı sağlayarak okunurluğu artırmasıdır. Şu anda birçok masaüstü yayıncılık paketi ve web sayfa düzenleyicisi, varsayılan mıgır metinler olarak Lorem Ipsum kullanmaktadır. Ayrıca arama motorlarında 'lorem ipsum' anahtar sözcükleri ile arama yapıldığında henüz tasarım aşamasında olan çok sayıda site listelenir. Yıllar içinde, bazen kazara, bazen bilinçli olarak (örneğin mizah katılarak), çeşitli sürümleri geliştirilmiştir.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9818),
                            Date = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9817),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9820),
                            Note = "C++ 11 ve 19 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "C++ 11 ve 19 Yenilikleri",
                            SeoTags = "C++ 11 ve 19 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "C++ 11 ve 19 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 295
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9826),
                            Date = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9825),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9827),
                            Note = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            SeoTags = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "JavaScript ES2019 ve ES2020 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 12
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CommentCount = 0,
                            Content = "É um facto estabelecido de que um leitor é distraído pelo conteúdo legível de uma página quando analisa a sua mancha gráfica. Logo, o uso de Lorem Ipsum leva a uma distribuição mais ou menos normal de letras, ao contrário do uso de 'Conteúdo aqui,conteúdo aqui'', tornando-o texto legível. Muitas ferramentas de publicação electrónica e editores de páginas web usam actualmente o Lorem Ipsum como o modelo de texto usado por omissão, e uma pesquisa por 'lorem ipsum' irá encontrar muitos websites ainda na sua infância. Várias versões têm evoluído ao longo dos anos, por vezes por acidente, por vezes propositadamente (como no caso do humor).",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9831),
                            Date = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9830),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9832),
                            Note = "Typescript 4.1 Yenilikleri",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Typescript 4.1, Typescript, TYPESCRIPT 2021",
                            SeoTags = "Typescript 4.1 Güncellemeleri",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Typescript 4.1",
                            UserId = 1,
                            ViewsCount = 666
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir. 1500'lerden beri kullanılmakta olan standard Lorem Ipsum metinleri ilgilenenler için yeniden üretilmiştir. Çiçero tarafından yazılan 1.10.32 ve 1.10.33 bölümleri de 1914 H. Rackham çevirisinden alınan İngilizce sürümleri eşliğinde özgün biçiminden yeniden üretilmiştir.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9837),
                            Date = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9836),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9838),
                            Note = "JAVA",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Java, Android, Mobile, Kotlin, Uygulama Geliştirme",
                            SeoTags = "Java, Mobil, Kotlin, Android, IOS, SWIFT",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Java ve Android'in Geleceği | 2021",
                            UserId = 1,
                            ViewsCount = 3225
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            CommentCount = 0,
                            Content = "Le Lorem Ipsum est simplement du faux texte employé dans la composition et la mise en page avant impression. Le Lorem Ipsum est le faux texte standard de l'imprimerie depuis les années 1500, quand un imprimeur anonyme assembla ensemble des morceaux de texte pour réaliser un livre spécimen de polices de texte. Il n'a pas fait que survivre cinq siècles, mais s'est aussi adapté à la bureautique informatique, sans que son contenu n'en soit modifié. Il a été popularisé dans les années 1960 grâce à la vente de feuilles Letraset contenant des passages du Lorem Ipsum, et, plus récemment, par son inclusion dans des applications de mise en page de texte, comme Aldus PageMaker.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9842),
                            Date = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9841),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9843),
                            Note = "Python",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Python ile Veri Madenciliği",
                            SeoTags = "Python, Veri Madenciliği Nasıl Yapılır?",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Python ile Veri Madenciliği | 2021",
                            UserId = 1,
                            ViewsCount = 9999
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            CommentCount = 0,
                            Content = "Contrairement à une opinion répandue, le Lorem Ipsum n'est pas simplement du texte aléatoire. Il trouve ses racines dans une oeuvre de la littérature latine classique datant de 45 av. J.-C., le rendant vieux de 2000 ans. Un professeur du Hampden-Sydney College, en Virginie, s'est intéressé à un des mots latins les plus obscurs, consectetur, extrait d'un passage du Lorem Ipsum, et en étudiant tous les usages de ce mot dans la littérature classique, découvrit la source incontestable du Lorem Ipsum. Il provient en fait des sections 1.10.32 et 1.10.33 du 0De Finibus Bonorum et Malorum' (Des Suprêmes Biens et des Suprêmes Maux) de Cicéron. Cet ouvrage, très populaire pendant la Renaissance, est un traité sur la théorie de l'éthique. Les premières lignes du Lorem Ipsum, 'Lorem ipsum dolor sit amet...'', proviennent de la section 1.10.32",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9848),
                            Date = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9847),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9849),
                            Note = "PHP",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Php ile API Oluşturma Rehberi",
                            SeoTags = "php, laravel, api, oop",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Php Laravel Başlangıç Rehberi | API",
                            UserId = 1,
                            ViewsCount = 4818
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            CommentCount = 0,
                            Content = "Plusieurs variations de Lorem Ipsum peuvent être trouvées ici ou là, mais la majeure partie d'entre elles a été altérée par l'addition d'humour ou de mots aléatoires qui ne ressemblent pas une seconde à du texte standard. Si vous voulez utiliser un passage du Lorem Ipsum, vous devez être sûr qu'il n'y a rien d'embarrassant caché dans le texte. Tous les générateurs de Lorem Ipsum sur Internet tendent à reproduire le même extrait sans fin, ce qui fait de lipsum.com le seul vrai générateur de Lorem Ipsum. Iil utilise un dictionnaire de plus de 200 mots latins, en combinaison de plusieurs structures de phrases, pour générer un Lorem Ipsum irréprochable. Le Lorem Ipsum ainsi obtenu ne contient aucune répétition, ni ne contient des mots farfelus, ou des touches d'humour.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9854),
                            Date = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9852),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9855),
                            Note = "Kotlin",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Kotlin ile Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "kotlin, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Kotlin ile Mobil Programlama",
                            UserId = 1,
                            ViewsCount = 750
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            CommentCount = 0,
                            Content = "Al contrario di quanto si pensi, Lorem Ipsum non è semplicemente una sequenza casuale di caratteri. Risale ad un classico della letteratura latina del 45 AC, cosa che lo rende vecchio di 2000 anni. Richard McClintock, professore di latino al Hampden-Sydney College in Virginia, ha ricercato una delle più oscure parole latine, consectetur, da un passaggio del Lorem Ipsum e ha scoperto tra i vari testi in cui è citata, la fonte da cui è tratto il testo, le sezioni 1.10.32 and 1.10.33 del 'de Finibus Bonorum et Malorum' di Cicerone. Questo testo è un trattato su teorie di etica, molto popolare nel Rinascimento. La prima riga del Lorem Ipsum, 'Lorem ipsum dolor sit amet..'', è tratta da un passaggio della sezione 1.10.32.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9859),
                            Date = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9858),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9860),
                            Note = "Swift",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Swift ile IOS Mobil Programlama Baştan Sona Adım Adım",
                            SeoTags = "IOS, android, mobil, programlama",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Swift ile IOS Programlama",
                            UserId = 1,
                            ViewsCount = 14900
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            CommentCount = 0,
                            Content = "Esistono innumerevoli variazioni dei passaggi del Lorem Ipsum, ma la maggior parte hanno subito delle variazioni del tempo, a causa dell’inserimento di passaggi ironici, o di sequenze casuali di caratteri palesemente poco verosimili. Se si decide di utilizzare un passaggio del Lorem Ipsum, è bene essere certi che non contenga nulla di imbarazzante. In genere, i generatori di testo segnaposto disponibili su internet tendono a ripetere paragrafi predefiniti, rendendo questo il primo vero generatore automatico su intenet. Infatti utilizza un dizionario di oltre 200 vocaboli latini, combinati con un insieme di modelli di strutture di periodi, per generare passaggi di testo verosimili. Il testo così generato è sempre privo di ripetizioni, parole imbarazzanti o fuori luogo ecc.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9864),
                            Date = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9863),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 891, DateTimeKind.Local).AddTicks(9865),
                            Note = "Ruby",
                            SeoAuthor = "Alper Tunga",
                            SeoDescription = "Ruby, Ruby on Rails Web Programlama, AirBnb Klon",
                            SeoTags = "Ruby on Rails, Ruby, Web Programlama, AirBnb",
                            Thumbnail = "postImages/defaultThumbnail.jpg",
                            Title = "Ruby on Rails ile AirBnb Klon Kodlayalım",
                            UserId = 1,
                            ViewsCount = 26777
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("AssociatedInstitutions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(15),
                            Description = "İş Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(16),
                            PaymentTypeId = 1,
                            Title = "İş Bankası"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(19),
                            Description = "Garanti Bankası Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(20),
                            PaymentTypeId = 1,
                            Title = "Garanti Bankası"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(22),
                            Description = "Yapı Kredi Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(22),
                            PaymentTypeId = 1,
                            Title = "Yapı Kredi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(24),
                            Description = "Akbank Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(24),
                            PaymentTypeId = 1,
                            Title = "Akbank"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(26),
                            Description = "Avrupa Ses Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(26),
                            PaymentTypeId = 2,
                            Title = "Avrupa Ses"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(27),
                            Description = "Sivasot Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(28),
                            PaymentTypeId = 2,
                            Title = "Sivasot"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(29),
                            Description = "Timtoptan Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(30),
                            PaymentTypeId = 2,
                            Title = "Timtoptan"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(7301),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(7302),
                            Title = "Brand Title Test"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "act Manuel"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2287),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2288),
                            Note = "C# Makale Yorumu",
                            Text = "Lorem Ipsum pasajlarının birçok çeşitlemesi vardır. Ancak bunların büyük bir çoğunluğu mizah katılarak veya rastgele sözcükler eklenerek değiştirilmişlerdir. Eğer bir Lorem Ipsum pasajı kullanacaksanız, metin aralarına utandırıcı sözcükler gizlenmediğinden emin olmanız gerekir. İnternet'teki tüm Lorem Ipsum üreteçleri önceden belirlenmiş metin bloklarını yineler. Bu da, bu üreteci İnternet üzerindeki gerçek Lorem Ipsum üreteci yapar. Bu üreteç, 200'den fazla Latince sözcük ve onlara ait cümle yapılarını içeren bir sözlük kullanır. Bu nedenle, üretilen Lorem Ipsum metinleri yinelemelerden, mizahtan ve karakteristik olmayan sözcüklerden uzaktır."
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2292),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2293),
                            Note = "C++ Makale Yorumu",
                            Text = "Lorem Ipsum jest tekstem stosowanym jako przykładowy wypełniacz w przemyśle poligraficznym. Został po raz pierwszy użyty w XV w. przez nieznanego drukarza do wypełnienia tekstem próbnej książki. Pięć wieków później zaczął być używany przemyśle elektronicznym, pozostając praktycznie niezmienionym. Spopularyzował się w latach 60. XX w. wraz z publikacją arkuszy Letrasetu, zawierających fragmenty Lorem Ipsum, a ostatnio z zawierającym różne wersje Lorem Ipsum oprogramowaniem przeznaczonym do realizacji druków na komputerach osobistych, jak Aldus PageMaker"
                        },
                        new
                        {
                            Id = 3,
                            ArticleId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2297),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2298),
                            Note = "JavaScript Makale Yorumu",
                            Text = "Ang Lorem Ipsum ay ginagamit na modelo ng industriya ng pagpriprint at pagtytypeset. Ang Lorem Ipsum ang naging regular na modelo simula pa noong 1500s, noong may isang di kilalang manlilimbag and kumuha ng galley ng type at ginulo ang pagkaka-ayos nito upang makagawa ng libro ng mga type specimen. Nalagpasan nito hindi lang limang siglo, kundi nalagpasan din nito ang paglaganap ng electronic typesetting at nanatiling parehas. Sumikat ito noong 1960s kasabay ng pag labas ng Letraset sheets na mayroong mga talata ng Lorem Ipsum, at kamakailan lang sa mga desktop publishing software tulad ng Aldus Pagemaker ginamit ang mga bersyon ng Lorem Ipsum."
                        },
                        new
                        {
                            Id = 4,
                            ArticleId = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2301),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2302),
                            Note = "Typescript Makale Yorumu",
                            Text = "Lorem Ipsum er rett og slett dummytekst fra og for trykkeindustrien. Lorem Ipsum har vært bransjens standard for dummytekst helt siden 1500-tallet, da en ukjent boktrykker stokket en mengde bokstaver for å lage et prøveeksemplar av en bok. Lorem Ipsum har tålt tidens tann usedvanlig godt, og har i tillegg til å bestå gjennom fem århundrer også tålt spranget over til elektronisk typografi uten vesentlige endringer. Lorem Ipsum ble gjort allment kjent i 1960-årene ved lanseringen av Letraset-ark med avsnitt fra Lorem Ipsum, og senere med sideombrekkingsprogrammet Aldus PageMaker som tok i bruk nettopp Lorem Ipsum for dummytekst."
                        },
                        new
                        {
                            Id = 5,
                            ArticleId = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2306),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2307),
                            Note = "Java Makale Yorumu",
                            Text = "Lorem Ipsum este pur şi simplu o machetă pentru text a industriei tipografice. Lorem Ipsum a fost macheta standard a industriei încă din secolul al XVI-lea, când un tipograf anonim a luat o planşetă de litere şi le-a amestecat pentru a crea o carte demonstrativă pentru literele respective. Nu doar că a supravieţuit timp de cinci secole, dar şi a facut saltul în tipografia electronică practic neschimbată. A fost popularizată în anii '60 odată cu ieşirea colilor Letraset care conţineau pasaje Lorem Ipsum, iar mai recent, prin programele de publicare pentru calculator, ca Aldus PageMaker care includeau versiuni de Lorem Ipsum."
                        },
                        new
                        {
                            Id = 6,
                            ArticleId = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2310),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2311),
                            Note = "Python Makale Yorumu",
                            Text = "Lorem Ipsum je jednostavno probni tekst koji se koristi u tiskarskoj i slovoslagarskoj industriji. Lorem Ipsum postoji kao industrijski standard još od 16-og stoljeća, kada je nepoznati tiskar uzeo tiskarsku galiju slova i posložio ih da bi napravio knjigu s uzorkom tiska. Taj je tekst ne samo preživio pet stoljeća, već se i vinuo u svijet elektronskog slovoslagarstva, ostajući u suštini nepromijenjen. Postao je popularan tijekom 1960-ih s pojavom Letraset listova s odlomcima Lorem Ipsum-a, a u skorije vrijeme sa software-om za stolno izdavaštvo kao što je Aldus PageMaker koji također sadrži varijante Lorem Ipsum-a."
                        },
                        new
                        {
                            Id = 7,
                            ArticleId = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2314),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2315),
                            Note = "Php Makale Yorumu",
                            Text = "Lorem Ipsum – tas ir teksta salikums, kuru izmanto poligrāfijā un maketēšanas darbos. Lorem Ipsum ir kļuvis par vispārpieņemtu teksta aizvietotāju kopš 16. gadsimta sākuma. Tajā laikā kāds nezināms iespiedējs izveidoja teksta fragmentu, lai nodrukātu grāmatu ar burtu paraugiem. Tas ir ne tikai pārdzīvojis piecus gadsimtus, bet bez ievērojamām izmaiņām saglabājies arī mūsdienās, pārejot uz datorizētu teksta apstrādi. Tā popularizēšanai 60-tajos gados kalpoja Letraset burtu paraugu publicēšana ar Lorem Ipsum teksta fragmentiem un, nesenā pagātnē, tādas maketēšanas programmas kā Aldus PageMaker, kuras šablonu paraugos ir izmantots Lorem Ipsum teksts."
                        },
                        new
                        {
                            Id = 8,
                            ArticleId = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2318),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2319),
                            Note = "Kotlin Makale Yorumu",
                            Text = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like)."
                        },
                        new
                        {
                            Id = 9,
                            ArticleId = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2322),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2323),
                            Note = "Swift Makale Yorumu",
                            Text = "هنالك العديد من الأنواع المتوفرة لنصوص لوريم إيبسوم، ولكن الغالبية تم تعديلها بشكل ما عبر إدخال بعض النوادر أو الكلمات العشوائية إلى النص. إن كنت تريد أن تستخدم نص لوريم إيبسوم ما، عليك أن تتحقق أولاً أن ليس هناك أي كلمات أو عبارات محرجة أو غير لائقة مخبأة في هذا النص. بينما تعمل جميع مولّدات نصوص لوريم إيبسوم على الإنترنت على إعادة تكرار مقاطع من نص لوريم إيبسوم نفسه عدة مرات بما تتطلبه الحاجة، يقوم مولّدنا هذا باستخدام كلمات من قاموس يحوي على أكثر من 200 كلمة لا تينية، مضاف إليها مجموعة من الجمل النموذجية، لتكوين نص لوريم إيبسوم ذو شكل منطقي قريب إلى النص الحقيقي. وبالتالي يكون النص الناتح خالي من التكرار، أو أي كلمات أو عبارات غير لائقة أو ما شابه. وهذا ما يجعله أول مولّد نص لوريم إيبسوم حقيقي على الإنترنت."
                        },
                        new
                        {
                            Id = 10,
                            ArticleId = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2326),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(2327),
                            Note = "Ruby Makale Yorumu",
                            Text = "Lorem Ipsum，也称乱数假文或者哑元文本， 是印刷及排版领域所常用的虚拟文字。由于曾经一台匿名的打印机刻意打乱了一盒印刷字体从而造出一本字体样品书，Lorem Ipsum从西元15世纪起就被作为此领域的标准文本使用。它不仅延续了五个世纪，还通过了电子排版的挑战，其雏形却依然保存至今。在1960年代，”Leatraset”公司发布了印刷着Lorem Ipsum段落的纸张，从而广泛普及了它的使用。最近，计算机桌面出版软件”Aldus PageMaker”也通过同样的方式使Lorem Ipsum落入大众的视野。"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HospitalOfReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 8, 26, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5086),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5079),
                            CustomerReferanceId = 1,
                            CustomerTypeId = 1,
                            Email = "hasta1@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5081),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 2,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 8, 27, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5099),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5095),
                            CustomerReferanceId = 1,
                            CustomerTypeId = 2,
                            Email = "hasta2@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5096),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 3,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 8, 28, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5106),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5103),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5104),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 4,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 8, 29, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5112),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5109),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5110),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 5,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 8, 30, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5185),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5181),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5182),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 6,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 8, 31, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5192),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5189),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5190),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 7,
                            About = "Yazılımcı, 20 yaşında",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            BirthDate = new DateTime(2023, 9, 1, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5198),
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5195),
                            CustomerReferanceId = 2,
                            CustomerTypeId = 3,
                            Email = "hasta3@gmail.com",
                            EmployeeId = 1,
                            FirstName = "Bedirhan",
                            HospitalOfReport = "Kadıköy Hastanesi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(5196),
                            Note = "TEST",
                            Phone = "05050102249",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerReferanceTitleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReferanceTitleId");

                    b.ToTable("CustomerReferances", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(7811),
                            CustomerReferanceTitleId = 2,
                            Description = "Description",
                            FirstName = "Sema",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(7813),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Phone = "+905050102249"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(7820),
                            CustomerReferanceTitleId = 2,
                            Description = "Description",
                            FirstName = "Sema",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Gündöner",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(7821),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Phone = "+905050102249"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferanceTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("CustomerReferanceTitles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(6238),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(6239),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Referans Unvan 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(6243),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(6245),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Referans Unvan 2"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(8604),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(8605),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(8609),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(8611),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(8614),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(8615),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Title = "Type 3"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(6356),
                            Email = "bedirhangn@gmail.com",
                            EmployeeTypeId = 1,
                            FirstName = "Personel 1",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(6358),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 2,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(6363),
                            EmployeeTypeId = 1,
                            FirstName = "Ikinci Personel",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(6364),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        },
                        new
                        {
                            Id = 3,
                            About = "Editor User of MyBlog",
                            Address = "Kocaeli Avclar Cadde 1000 Kat 2034 Daire 2",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(6368),
                            EmployeeTypeId = 1,
                            FirstName = "Ucuncu perosnel",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(6369),
                            Phone = "+905555555555",
                            Picture = "/userImages/defaultUser.png",
                            TC = "45677891170"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(6520),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(6521),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(6526),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(6527),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(6528),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(6529),
                            Note = "Not",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(6533),
                            Description = "Description",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(6534),
                            Note = "Not",
                            Title = "Title"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDaily")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncome")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Expenses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 100,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(175),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(178),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 122,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(183),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(184),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 21,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(188),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(189),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 341,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(192),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(194),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 422,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(197),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(198),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 6,
                            Amount = 122,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(201),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(202),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 7,
                            Amount = 322,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(206),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(207),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 8,
                            Amount = 422,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(210),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(211),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 9,
                            Amount = 522,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(214),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(215),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 10,
                            Amount = 122,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(218),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(220),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 11,
                            Amount = 232,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(223),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(224),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 12,
                            Amount = 122,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(227),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(228),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 13,
                            Amount = 222,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(231),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(232),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 14,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(235),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(237),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 15,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(240),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(241),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 16,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(244),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(245),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 17,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(248),
                            IsActive = true,
                            IsDaily = true,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(249),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 18,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(253),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(254),
                            Note = "TEST"
                        },
                        new
                        {
                            Id = 19,
                            Amount = 22,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 7, 24, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(257),
                            IsActive = true,
                            IsDaily = false,
                            IsDeleted = false,
                            IsIncome = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 908, DateTimeKind.Local).AddTicks(258),
                            Note = "TEST"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(7969),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(7970),
                            Name = "AgendaProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(7974),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(7975),
                            Name = "CustomerModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(7978),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(7979),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(7982),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(7983),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(7986),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(7987),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(7990),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(7991),
                            Name = "RoleModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(7994),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(7995),
                            Name = "StockModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(5303),
                            CustomerId = 1,
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(5305),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 8, 25, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(5311),
                            Title = "Title",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(5322),
                            CustomerId = 2,
                            Description = "Doğum günü yaklaşmakta.",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(5324),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 8, 24, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(5327),
                            Title = "Doğum Günü!",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(5332),
                            CustomerId = 3,
                            Description = "Aylık cihaz bakımı için konuşulacak",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(5333),
                            NotificationType = "Reminder",
                            TargetDate = new DateTime(2023, 8, 23, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(5335),
                            Title = "Cihaz Bakımı!",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DebtAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PaidPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutPayments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 0m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(4117),
                            DebtAmount = 15000m,
                            Description = "TEST desc 1 ",
                            DueDate = new DateTime(2023, 8, 26, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(4128),
                            IsActive = true,
                            IsDeleted = false,
                            IsPaid = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(4118),
                            PaidPlace = "Ödemenin Yapılacağı yer"
                        },
                        new
                        {
                            Id = 2,
                            AmountPaid = 0m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(4182),
                            DebtAmount = 10000m,
                            Description = "TEST desc 1 ",
                            DueDate = new DateTime(2023, 8, 26, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(4185),
                            IsActive = true,
                            IsDeleted = false,
                            IsPaid = true,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(4183),
                            PaidPlace = "Ödemenin Yapılacağı yer"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OutPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OutPaymentId");

                    b.ToTable("OutPaymentDetails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1000m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(5004),
                            Description = "TEST desc 1 ",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(5005),
                            OutPaymentId = 1
                        },
                        new
                        {
                            Id = 2,
                            AmountPaid = 2000m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(5011),
                            Description = "TEST desc 1 ",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(5012),
                            OutPaymentId = 1
                        },
                        new
                        {
                            Id = 3,
                            AmountPaid = 1500m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(5016),
                            Description = "TEST desc 1 ",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(5018),
                            OutPaymentId = 1
                        },
                        new
                        {
                            Id = 4,
                            AmountPaid = 2300m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(5021),
                            Description = "TEST desc 1 ",
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(5022),
                            OutPaymentId = 2
                        },
                        new
                        {
                            Id = 5,
                            AmountPaid = 1450m,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(5072),
                            Description = "TEST desc 1 ",
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(5073),
                            OutPaymentId = 2
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("AssociatedInstitutionId")
                        .HasColumnType("int");

                    b.Property<int?>("AssociatedInstitutionsId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId1")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PaymentTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTypeId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedInstitutionId");

                    b.HasIndex("AssociatedInstitutionsId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PaymentTypeId1");

                    b.ToTable("Payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(3119),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(3120),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(3128),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(3129),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(3134),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(3135),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(3138),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(3140),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(3143),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(3144),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(3148),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(3149),
                            PaymentTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            AmountPaid = 1m,
                            AssociatedInstitutionsId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(3152),
                            CustomerId = 1,
                            Description = "TEST",
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(3153),
                            PaymentTypeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(5201),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(5201),
                            Title = "KK | POS"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(5204),
                            Description = "Mail Order Payment",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(5204),
                            Title = "Mail Order"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(5206),
                            Description = "Point of Sale",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 905, DateTimeKind.Local).AddTicks(5206),
                            Title = "Peşin"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("ProductSubGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductSubGroupId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(1822),
                            IsActive = true,
                            IsDeleted = false,
                            IsSold = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(1823),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Siemens Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT4"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(1830),
                            IsActive = true,
                            IsDeleted = false,
                            IsSold = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(1831),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Jabra Signia",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT3"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(1835),
                            IsActive = true,
                            IsDeleted = false,
                            IsSold = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(1836),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Apple Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT2"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(1841),
                            IsActive = true,
                            IsDeleted = false,
                            IsSold = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(1842),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            Price = 100,
                            ProductName = "Samsung Signia Motion 1PX",
                            ProductSubGroupId = 1,
                            Quantity = 10,
                            SerialNumber = "A12BO9930HT1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(6756),
                            Description = "Ürün Grubu Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(6758),
                            Title = "Ürün Grubu 1"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductSubGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(8905),
                            Description = "Ürün Alt Grubu Açıklaması",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(8906),
                            ProductGroupId = 1,
                            Title = "Ürün Alt Grubu Başlığı"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Programs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8696),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8697),
                            ModuleId = 5,
                            Name = "EmployeeProgram.Read"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8701),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8702),
                            ModuleId = 5,
                            Name = "UserModule.Read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8706),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8707),
                            ModuleId = 7,
                            Name = "StockModule.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8710),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8711),
                            ModuleId = 6,
                            Name = "CustomerReferanceModule.Read"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8714),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8715),
                            ModuleId = 1,
                            Name = "AppointmentModule.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8718),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8719),
                            ModuleId = 1,
                            Name = "NotificationModule.Read"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8722),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8723),
                            ModuleId = 3,
                            Name = "PaymentProgram.Read"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8726),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8727),
                            ModuleId = 2,
                            Name = "CustomerProgram.Read"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8730),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8731),
                            ModuleId = 7,
                            Name = "BrandModule.Read"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8734),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8735),
                            ModuleId = 3,
                            Name = "SaleModule.Read"
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8738),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8739),
                            ModuleId = 7,
                            Name = "ProductProgram.Read"
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8742),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(8743),
                            ModuleId = 5,
                            Name = "RoleModule.Read"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessLevel = 1,
                            ConcurrencyStamp = "76445054-1c3f-457e-b542-66d3040e7359",
                            Definition = "SüperAdmin Yetkisi",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2,
                            AccessLevel = 3,
                            ConcurrencyStamp = "edc8af7b-12dc-4c23-a16a-3a6a4188d6dc",
                            Definition = "Kullanıcı Ekleme Yetkisi",
                            Name = "User.Create",
                            NormalizedName = "USER.CREATE"
                        },
                        new
                        {
                            Id = 3,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c5d7fc9c-bfa9-4e79-a06e-680490de3883",
                            Definition = "Kullanıcı Görüntüleme Yetkisi",
                            Name = "User.Read",
                            NormalizedName = "USER.READ"
                        },
                        new
                        {
                            Id = 4,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6d637c5a-3eda-49f0-a016-221e30ff3226",
                            Definition = "Kullanıcı Güncelleme Yetkisi",
                            Name = "User.Update",
                            NormalizedName = "USER.UPDATE"
                        },
                        new
                        {
                            Id = 5,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8bf453a6-a2a5-4cfc-985f-af136a520880",
                            Definition = "Kullanıcı Silme Yetkisi",
                            Name = "User.Delete",
                            NormalizedName = "USER.DELETE"
                        },
                        new
                        {
                            Id = 6,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e8ed877b-f96f-4071-85e4-1f0a0b1312b0",
                            Definition = "Rol Görüntüleme Yetkisi",
                            Name = "Role.Read",
                            NormalizedName = "ROLE.READ"
                        },
                        new
                        {
                            Id = 7,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4329b78d-01dc-46ff-9f7d-985a09717a1b",
                            Definition = "Rol Güncelleme Yetkisi",
                            Name = "Role.Update",
                            NormalizedName = "ROLE.UPDATE"
                        },
                        new
                        {
                            Id = 8,
                            AccessLevel = 3,
                            ConcurrencyStamp = "65f36d59-77bf-4351-926f-067f29f31393",
                            Definition = "Rol Silme Yetkisi",
                            Name = "Role.Delete",
                            NormalizedName = "ROLE.DELETE"
                        },
                        new
                        {
                            Id = 9,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c935e323-8c34-4491-a583-cc7e16687461",
                            Definition = "Rol Ekleme Yetkisi",
                            Name = "Role.Create",
                            NormalizedName = "ROLE.CREATE"
                        },
                        new
                        {
                            Id = 10,
                            AccessLevel = 3,
                            ConcurrencyStamp = "78344b56-3869-4f47-8000-bfac9e1a40ca",
                            Definition = "Ödeme Ekleme Yetkisi",
                            Name = "Payment.Create",
                            NormalizedName = "PAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 11,
                            AccessLevel = 3,
                            ConcurrencyStamp = "018f1645-3cd2-4c34-a151-9a82ab3bad4e",
                            Definition = "Ödeme Görüntüleme Yetkisi",
                            Name = "Payment.Read",
                            NormalizedName = "PAYMENT.READ"
                        },
                        new
                        {
                            Id = 12,
                            AccessLevel = 3,
                            ConcurrencyStamp = "85f755e4-1676-4973-a36e-468ae4e911d3",
                            Definition = "Ödeme Güncelleme Yetkisi",
                            Name = "Payment.Update",
                            NormalizedName = "PAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 13,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9ee64833-089a-4a49-8294-b1a5afcca207",
                            Definition = "Ödeme Silme Yetkisi",
                            Name = "Payment.Delete",
                            NormalizedName = "PAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 14,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3f23b222-f750-458d-aae1-7708f8fc8370",
                            Definition = "Ödeme Türü Ekleme Yetkisi",
                            Name = "PaymentType.Create",
                            NormalizedName = "PAYMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 15,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2691cd0a-82b9-4ebd-9cb9-e4bde5ec193c",
                            Definition = "Ödeme Türü Görüntüleme Yetkisi",
                            Name = "PaymentType.Read",
                            NormalizedName = "PAYMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 16,
                            AccessLevel = 3,
                            ConcurrencyStamp = "61bee589-d290-41be-924a-f503eef55833",
                            Definition = "Ödeme Türü Güncelleme Yetkisi",
                            Name = "PaymentType.Update",
                            NormalizedName = "PAYMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 17,
                            AccessLevel = 3,
                            ConcurrencyStamp = "61015093-73c9-4869-b83e-9cc33c25333f",
                            Definition = "Ödeme Türü Silme Yetkisi",
                            Name = "PaymentType.Delete",
                            NormalizedName = "PAYMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 18,
                            AccessLevel = 3,
                            ConcurrencyStamp = "34d89093-c6e3-445f-96b7-65f8097b0791",
                            Definition = "Personel Ekleme Yetkisi",
                            Name = "Employee.Create",
                            NormalizedName = "EMPLOYEE.CREATE"
                        },
                        new
                        {
                            Id = 19,
                            AccessLevel = 3,
                            ConcurrencyStamp = "43c0d8a2-46bf-4e5c-8de9-eba2988ee6c1",
                            Definition = "Personel Görüntüleme Yetkisi",
                            Name = "Employee.Read",
                            NormalizedName = "EMPLOYEE.READ"
                        },
                        new
                        {
                            Id = 20,
                            AccessLevel = 3,
                            ConcurrencyStamp = "66f6fe7b-4f44-43c5-8e87-adb33c542556",
                            Definition = "Personel Güncelleme Yetkisi",
                            Name = "Employee.Update",
                            NormalizedName = "EMPLOYEE.UPDATE"
                        },
                        new
                        {
                            Id = 21,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2d4f02f1-0562-4e1e-bdfc-1afb50db6dcf",
                            Definition = "Personel Silme Yetkisi",
                            Name = "Employee.Delete",
                            NormalizedName = "EMPLOYEE.DELETE"
                        },
                        new
                        {
                            Id = 22,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2a3e5a06-f4be-4986-ba68-08afbf60c595",
                            Definition = "Personel Türü Ekleme Yetkisi",
                            Name = "EmployeeType.Create",
                            NormalizedName = "EMPLOYEETYPE.CREATE"
                        },
                        new
                        {
                            Id = 23,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c76c3478-48d0-4e93-90d4-959127239b47",
                            Definition = "Personel Türü Görüntüleme Yetkisi",
                            Name = "EmployeeType.Read",
                            NormalizedName = "EMPLOYEETYPE.READ"
                        },
                        new
                        {
                            Id = 24,
                            AccessLevel = 3,
                            ConcurrencyStamp = "af4f8709-4f6b-4c70-aaa7-6b341111da80",
                            Definition = "Personel Türü Güncelleme Yetkisi",
                            Name = "EmployeeType.Update",
                            NormalizedName = "EMPLOYEETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 25,
                            AccessLevel = 3,
                            ConcurrencyStamp = "4de76327-7572-4bfd-9bc8-0b60e57a11db",
                            Definition = "Personel Türü Silme Yetkisi",
                            Name = "EmployeeType.Delete",
                            NormalizedName = "EMPLOYEETYPE.DELETE"
                        },
                        new
                        {
                            Id = 26,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d8fc1d42-99e2-4d5e-ac1d-9a4a003c87b8",
                            Definition = "Müşteri Ekleme Yetkisi",
                            Name = "Customer.Create",
                            NormalizedName = "CUSTOMER.CREATE"
                        },
                        new
                        {
                            Id = 27,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1facfda6-809c-47ac-844a-d524bd64a292",
                            Definition = "Müşteri Görüntüleme Yetkisi",
                            Name = "Customer.Read",
                            NormalizedName = "CUSTOMER.READ"
                        },
                        new
                        {
                            Id = 28,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5d7149aa-1374-4c37-aef6-637e42901726",
                            Definition = "Müşteri Güncelleme Yetkisi",
                            Name = "Customer.Update",
                            NormalizedName = "CUSTOMER.UPDATE"
                        },
                        new
                        {
                            Id = 29,
                            AccessLevel = 3,
                            ConcurrencyStamp = "84c0c874-bc32-418f-b736-fb4c5e52bb59",
                            Definition = "Müşteri Silme Yetkisi",
                            Name = "Customer.Delete",
                            NormalizedName = "CUSTOMER.DELETE"
                        },
                        new
                        {
                            Id = 30,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a9f518a5-b020-48fc-80e0-19a2095a4547",
                            Definition = "Müşteri Tipi Ekleme Yetkisi",
                            Name = "CustomerType.Create",
                            NormalizedName = "CUSTOMERTYPE.CREATE"
                        },
                        new
                        {
                            Id = 31,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7083dd45-0757-4e0a-9785-bf8ab9f30e12",
                            Definition = "Müşteri Tipi Görüntüleme Yetkisi",
                            Name = "CustomerType.Read",
                            NormalizedName = "CUSTOMERTYPE.READ"
                        },
                        new
                        {
                            Id = 32,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1407aa27-9beb-4077-ac58-e5e93d14c562",
                            Definition = "Müşteri Tipi Güncelleme Yetkisi",
                            Name = "CustomerType.Update",
                            NormalizedName = "CUSTOMERTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 33,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1fd56891-046d-483b-9530-17519bc1eaa5",
                            Definition = "Müşteri Tipi Silme Yetkisi",
                            Name = "CustomerType.Delete",
                            NormalizedName = "CUSTOMERTYPE.DELETE"
                        },
                        new
                        {
                            Id = 34,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9a8e6787-c4c5-44a1-a923-5309603bee86",
                            Definition = "Bildirim Ekleme Yetkisi",
                            Name = "Notification.Create",
                            NormalizedName = "NOTIFICATION.CREATE"
                        },
                        new
                        {
                            Id = 35,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a8b7129f-5182-46f2-bf91-a709a6164f76",
                            Definition = "Bildirim Görüntüleme Yetkisi",
                            Name = "Notification.Read",
                            NormalizedName = "NOTIFICATION.READ"
                        },
                        new
                        {
                            Id = 36,
                            AccessLevel = 3,
                            ConcurrencyStamp = "40df1694-17f4-410f-8b6f-668700508928",
                            Definition = "Bildirim Güncelleme Yetkisi",
                            Name = "Notification.Update",
                            NormalizedName = "NOTIFICATION.UPDATE"
                        },
                        new
                        {
                            Id = 37,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5e9601ad-d2e4-460b-9b4b-af792c290346",
                            Definition = "Bildirim Silme Yetkisi",
                            Name = "Notification.Delete",
                            NormalizedName = "NOTIFICATION.DELETE"
                        },
                        new
                        {
                            Id = 38,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c2e0165b-419d-49d6-8ba0-bb5395ef00a8",
                            Definition = "Geliştiriciye Mesaj Ekleme Yetkisi",
                            Name = "Brand.Create",
                            NormalizedName = "BRAND.CREATE"
                        },
                        new
                        {
                            Id = 39,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5545a5fd-30fa-4f29-8c38-3625ff0e0c78",
                            Definition = "Geliştiriciye Mesaj Görüntüleme Yetkisi",
                            Name = "Brand.Read",
                            NormalizedName = "BRAND.READ"
                        },
                        new
                        {
                            Id = 40,
                            AccessLevel = 3,
                            ConcurrencyStamp = "efdda925-29ca-4582-9a64-498260b00fe0",
                            Definition = "Geliştiriciye Mesaj Güncelleme Yetkisi",
                            Name = "Brand.Update",
                            NormalizedName = "BRAND.UPDATE"
                        },
                        new
                        {
                            Id = 41,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3ecebe19-3460-4cf8-a4e1-9ea100f7ec78",
                            Definition = "Geliştiriciye Mesaj Silme Yetkisi",
                            Name = "Brand.Delete",
                            NormalizedName = "BRAND.DELETE"
                        },
                        new
                        {
                            Id = 42,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2ba0bf82-910c-45e9-9ccc-65f402ee1eed",
                            Definition = "Satış Durumu Ekleme Yetkisi",
                            Name = "SaleStatus.Create",
                            NormalizedName = "SALESTATUS.CREATE"
                        },
                        new
                        {
                            Id = 43,
                            AccessLevel = 3,
                            ConcurrencyStamp = "2c46c158-5dc2-4bd8-8420-2f0184bc5c5d",
                            Definition = "Satış Durumu Görüntüleme Yetkisi",
                            Name = "SaleStatus.Read",
                            NormalizedName = "SALESTATUS.READ"
                        },
                        new
                        {
                            Id = 44,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b6d3cdd8-6b73-4a0b-8019-6473af765d3d",
                            Definition = "Satış Durumu Güncelleme Yetkisi",
                            Name = "SaleStatus.Update",
                            NormalizedName = "SALESTATUS.UPDATE"
                        },
                        new
                        {
                            Id = 45,
                            AccessLevel = 3,
                            ConcurrencyStamp = "46d299e4-da77-4e5b-8542-0fcd7bcc9a6c",
                            Definition = "Satış Durumu Silme Yetkisi",
                            Name = "SaleStatus.Delete",
                            NormalizedName = "SALESTATUS.DELETE"
                        },
                        new
                        {
                            Id = 46,
                            AccessLevel = 3,
                            ConcurrencyStamp = "0ae92075-7140-4031-9d51-e3dba9429f44",
                            Definition = "Satış Türü Ekleme Yetkisi",
                            Name = "SaleType.Create",
                            NormalizedName = "SALETYPE.CREATE"
                        },
                        new
                        {
                            Id = 47,
                            AccessLevel = 3,
                            ConcurrencyStamp = "1367ec09-d459-43c2-83b1-a5e2ff139ea0",
                            Definition = "Satış Türü Görüntüleme Yetkisi",
                            Name = "SaleType.Read",
                            NormalizedName = "SALETYPE.READ"
                        },
                        new
                        {
                            Id = 48,
                            AccessLevel = 3,
                            ConcurrencyStamp = "c79541c5-1343-446d-9e38-e98a4a21c064",
                            Definition = "Satış Türü Güncelleme Yetkisi",
                            Name = "SaleType.Update",
                            NormalizedName = "SALETYPE.UPDATE"
                        },
                        new
                        {
                            Id = 49,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d3d87362-ffa3-473a-9df5-13fdb639f341",
                            Definition = "Satış Türü Silme Yetkisi",
                            Name = "SaleType.Delete",
                            NormalizedName = "SALETYPE.DELETE"
                        },
                        new
                        {
                            Id = 50,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a6a81c79-e311-4784-8f2b-e5b0f40d321b",
                            Definition = "Ürün Grubu Ekleme Yetkisi",
                            Name = "ProductGroup.Create",
                            NormalizedName = "PRODUCTGROUP.CREATE"
                        },
                        new
                        {
                            Id = 51,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e4ed8eb0-b655-47c1-8d17-8855606205f1",
                            Definition = "Ürün Grubu Görüntüleme Yetkisi",
                            Name = "ProductGroup.Read",
                            NormalizedName = "PRODUCTGROUP.READ"
                        },
                        new
                        {
                            Id = 52,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a773350f-ed33-40d4-97d2-2c2f05d50bbf",
                            Definition = "Ürün Grubu Güncelleme Yetkisi",
                            Name = "ProductGroup.Update",
                            NormalizedName = "PRODUCTGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 53,
                            AccessLevel = 3,
                            ConcurrencyStamp = "879451d8-e74f-4783-8212-5136f1877de3",
                            Definition = "Ürün Grubu Silme Yetkisi",
                            Name = "ProductGroup.Delete",
                            NormalizedName = "PRODUCTGROUP.DELETE"
                        },
                        new
                        {
                            Id = 54,
                            AccessLevel = 3,
                            ConcurrencyStamp = "fec16fe1-2f7d-46dd-89fd-498eb69d1242",
                            Definition = "Ürün Alt Grubu Ekleme Yetkisi",
                            Name = "ProductSubGroup.Create",
                            NormalizedName = "PRODUCTSUBGROUP.CREATE"
                        },
                        new
                        {
                            Id = 55,
                            AccessLevel = 3,
                            ConcurrencyStamp = "3abe4ebf-9bee-4b61-9c6e-50774df0b9e6",
                            Definition = "Ürün Alt Grubu Görüntüleme Yetkisi",
                            Name = "ProductSubGroup.Read",
                            NormalizedName = "PRODUCTSUBGROUP.READ"
                        },
                        new
                        {
                            Id = 56,
                            AccessLevel = 3,
                            ConcurrencyStamp = "b9724c05-3247-493b-96e6-4a2e4bcf5ae0",
                            Definition = "Ürün Alt Grubu Güncelleme Yetkisi",
                            Name = "ProductSubGroup.Update",
                            NormalizedName = "PRODUCTSUBGROUP.UPDATE"
                        },
                        new
                        {
                            Id = 57,
                            AccessLevel = 3,
                            ConcurrencyStamp = "6d9dba35-8004-44a6-aab0-3698d5d9b7d7",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "ProductSubGroup.Delete",
                            NormalizedName = "PRODUCTSUBGROUP.DELETE"
                        },
                        new
                        {
                            Id = 58,
                            AccessLevel = 3,
                            ConcurrencyStamp = "51ebb652-eb6f-4ae1-855e-bd7fbfec17f0",
                            Definition = "Randevu Türü Ekleme Yetkisi",
                            Name = "AppointmentType.Create",
                            NormalizedName = "APPOINTMENTTYPE.CREATE"
                        },
                        new
                        {
                            Id = 59,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bcfe4bbf-cea8-41df-8996-25daba6db227",
                            Definition = "Randevu Türü Görüntüleme Yetkisi",
                            Name = "AppointmentType.Read",
                            NormalizedName = "APPOINTMENTTYPE.READ"
                        },
                        new
                        {
                            Id = 60,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8aac43dd-7bfe-4165-9561-4088d6f0bdf8",
                            Definition = "Randevu Türü Güncelleme Yetkisi",
                            Name = "AppointmentType.Update",
                            NormalizedName = "APPOINTMENTTYPE.UPDATE"
                        },
                        new
                        {
                            Id = 61,
                            AccessLevel = 3,
                            ConcurrencyStamp = "d2155d0a-d564-4237-b975-9d8b063e0cee",
                            Definition = "Randevu Türü Silme Yetkisi",
                            Name = "AppointmentType.Delete",
                            NormalizedName = "APPOINTMENTTYPE.DELETE"
                        },
                        new
                        {
                            Id = 62,
                            AccessLevel = 3,
                            ConcurrencyStamp = "a13a15e2-af0f-41a6-bd50-f02da2542466",
                            Definition = "Satış Oluşturma Yetkisi",
                            Name = "Sale.Create",
                            NormalizedName = "SALE.CREATE"
                        },
                        new
                        {
                            Id = 63,
                            AccessLevel = 3,
                            ConcurrencyStamp = "86d583d2-94f7-4f98-a952-e669d94675a9",
                            Definition = "Satış Görüntüleme Yetkisi",
                            Name = "Sale.Read",
                            NormalizedName = "SALE.READ"
                        },
                        new
                        {
                            Id = 64,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bd54aa4d-fd32-4f63-ba1b-eb340c3249b1",
                            Definition = "Satış Güncelleme Yetkisi",
                            Name = "Sale.Update",
                            NormalizedName = "SALE.UPDATE"
                        },
                        new
                        {
                            Id = 65,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bd334467-ec5b-4ac0-b8c5-9e48299941aa",
                            Definition = "Satış Silme Yetkisi",
                            Name = "Sale.Delete",
                            NormalizedName = "SALE.DELETE"
                        },
                        new
                        {
                            Id = 66,
                            AccessLevel = 3,
                            ConcurrencyStamp = "9275a04a-a04d-4d78-8e75-cdad408c8be6",
                            Definition = "Ürün Ekleme Yetkisi",
                            Name = "Product.Create",
                            NormalizedName = "PRODUCT.CREATE"
                        },
                        new
                        {
                            Id = 67,
                            AccessLevel = 3,
                            ConcurrencyStamp = "10e5d1d4-13f8-47e1-ae88-ae5b6bd1a007",
                            Definition = "Ürün Görüntüleme Yetkisi",
                            Name = "Product.Read",
                            NormalizedName = "PRODUCT.READ"
                        },
                        new
                        {
                            Id = 68,
                            AccessLevel = 3,
                            ConcurrencyStamp = "5e1695a0-ce9e-4614-ac93-e9dcddc37d32",
                            Definition = "Ürün Güncelleme Yetkisi",
                            Name = "Product.Update",
                            NormalizedName = "PRODUCT.UPDATE"
                        },
                        new
                        {
                            Id = 69,
                            AccessLevel = 3,
                            ConcurrencyStamp = "951838ff-f3cc-4185-b05d-b6545caa6220",
                            Definition = "Ürün Silme Yetkisi",
                            Name = "Product.Delete",
                            NormalizedName = "PRODUCT.DELETE"
                        },
                        new
                        {
                            Id = 70,
                            AccessLevel = 3,
                            ConcurrencyStamp = "46043f08-faf9-4df6-af0f-3b46f2fa79ca",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "Appointment.Create",
                            NormalizedName = "APPOINTMENT.CREATE"
                        },
                        new
                        {
                            Id = 71,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7ddf3f0d-8df4-4eb0-8973-fab2072f1510",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "Appointment.Read",
                            NormalizedName = "APPOINTMENT.READ"
                        },
                        new
                        {
                            Id = 72,
                            AccessLevel = 3,
                            ConcurrencyStamp = "60911132-2346-4b06-848f-0b5cba9cc6a6",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "Appointment.Update",
                            NormalizedName = "APPOINTMENT.UPDATE"
                        },
                        new
                        {
                            Id = 73,
                            AccessLevel = 3,
                            ConcurrencyStamp = "566c1903-9997-4bab-a2dc-7f4408d2c7b6",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "Appointment.Delete",
                            NormalizedName = "APPOINTMENT.DELETE"
                        },
                        new
                        {
                            Id = 74,
                            AccessLevel = 3,
                            ConcurrencyStamp = "84b02f72-993c-4ba8-be15-f3aa855d57a8",
                            Definition = "Randevu Oluşturma Yetkisi",
                            Name = "OutPayment.Create",
                            NormalizedName = "OUTPAYMENT.CREATE"
                        },
                        new
                        {
                            Id = 75,
                            AccessLevel = 3,
                            ConcurrencyStamp = "caf7f31f-bdb4-4b7d-b8aa-2f7d02a39ca0",
                            Definition = "Randevu Görüntüleme Yetkisi",
                            Name = "OutPayment.Read",
                            NormalizedName = "OUTPAYMENT.READ"
                        },
                        new
                        {
                            Id = 76,
                            AccessLevel = 3,
                            ConcurrencyStamp = "8ab99161-d863-4a3b-8d2e-c32dfc2106bd",
                            Definition = "Randevu Güncelleme Yetkisi",
                            Name = "OutPayment.Update",
                            NormalizedName = "OUTPAYMENT.UPDATE"
                        },
                        new
                        {
                            Id = 77,
                            AccessLevel = 3,
                            ConcurrencyStamp = "46396db9-8acc-4ae7-b1f9-f45e668013e3",
                            Definition = "Randevu Silme Yetkisi",
                            Name = "OutPayment.Delete",
                            NormalizedName = "OUTPAYMENT.DELETE"
                        },
                        new
                        {
                            Id = 78,
                            AccessLevel = 3,
                            ConcurrencyStamp = "bb138ec2-9932-40d4-b9ca-54b01561243d",
                            Definition = "Dış Ödeme Detayı Oluşturma Yetkisi",
                            Name = "OutPaymentDetail.Create",
                            NormalizedName = "OUTPAYMENTDETAIL.CREATE"
                        },
                        new
                        {
                            Id = 79,
                            AccessLevel = 3,
                            ConcurrencyStamp = "7215b132-544a-4612-96e8-f3bc757e9b52",
                            Definition = "Dış Ödeme Detayı Görüntüleme Yetkisi",
                            Name = "OutPaymentDetail.Read",
                            NormalizedName = "OUTPAYMENTDETAIL.READ"
                        },
                        new
                        {
                            Id = 80,
                            AccessLevel = 3,
                            ConcurrencyStamp = "e9e55ed9-ad06-4e86-992e-7de2898d5a8b",
                            Definition = "Dış Ödeme Detayı Güncelleme Yetkisi",
                            Name = "OutPaymentDetail.Update",
                            NormalizedName = "OUTPAYMENTDETAIL.UPDATE"
                        },
                        new
                        {
                            Id = 81,
                            AccessLevel = 3,
                            ConcurrencyStamp = "00e302ee-fb5e-420b-86b7-f0524091d33c",
                            Definition = "Dış Ödeme Detayı Silme Yetkisi",
                            Name = "OutPaymentDetail.Delete",
                            NormalizedName = "OUTPAYMENTDETAIL.DELETE"
                        },
                        new
                        {
                            Id = 82,
                            AccessLevel = 2,
                            ConcurrencyStamp = "e51a1ce8-7b72-406c-b097-daf8d8868573",
                            Definition = "Geliştiriciye Mesajlar Programı Görüntüleme",
                            Name = "EmployeeProgram.Read",
                            NormalizedName = "EMPLOYEEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 83,
                            AccessLevel = 2,
                            ConcurrencyStamp = "6de44a8b-5c19-4a0f-b495-4c4621076a82",
                            Definition = "Randevular Programı Görüntüleme",
                            Name = "InstitutionalProgram.Read",
                            NormalizedName = "INSTITUTIONALPROGRAM.READ"
                        },
                        new
                        {
                            Id = 84,
                            AccessLevel = 2,
                            ConcurrencyStamp = "3a643eab-991d-4409-9356-ce343c69add1",
                            Definition = "Hastalar Programı Görüntüleme",
                            Name = "CustomerProgram.Read",
                            NormalizedName = "CUSTOMERPROGRAM.READ"
                        },
                        new
                        {
                            Id = 85,
                            AccessLevel = 2,
                            ConcurrencyStamp = "fbbe7592-f9c4-4ab0-8241-8d35f5ae0f6e",
                            Definition = "Referanslar Programı Görüntüleme",
                            Name = "PaymentProgram.Read",
                            NormalizedName = "PAYMENTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 86,
                            AccessLevel = 2,
                            ConcurrencyStamp = "a703cd58-e476-4dbf-a0ae-4e6e406e4377",
                            Definition = "Ürünler Programı Görüntüleme",
                            Name = "ProductProgram.Read",
                            NormalizedName = "PRODUCTPROGRAM.READ"
                        },
                        new
                        {
                            Id = 87,
                            AccessLevel = 2,
                            ConcurrencyStamp = "de0b5b4d-af59-463e-9d8c-1c2e3822fbb6",
                            Definition = "Roller Programı Görüntüleme",
                            Name = "MarketingProgram.Read",
                            NormalizedName = "MARKETINGPROGRAM.READ"
                        },
                        new
                        {
                            Id = 88,
                            AccessLevel = 2,
                            ConcurrencyStamp = "5d1fcb72-b90c-4225-b69a-a4fd6b2d741c",
                            Definition = "Satışlar Programı Görüntüleme",
                            Name = "AgendaProgram.Read",
                            NormalizedName = "AGENDAPROGRAM.READ"
                        },
                        new
                        {
                            Id = 89,
                            AccessLevel = 2,
                            ConcurrencyStamp = "cce9cc73-4d36-4825-b23d-6271fde586d4",
                            Definition = "Stok Programı Görüntüleme",
                            Name = "FinanceProgram.Read",
                            NormalizedName = "FINANCEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 90,
                            AccessLevel = 1,
                            ConcurrencyStamp = "048403e8-5703-4c21-9800-da46de93a09d",
                            Definition = "Anasayfa Görüntüleme Yetkisi",
                            Name = "HomeProgram.Read",
                            NormalizedName = "HOMEPROGRAM.READ"
                        },
                        new
                        {
                            Id = 91,
                            AccessLevel = 1,
                            ConcurrencyStamp = "66ddf3a5-5141-4f94-8cfc-9b47e4f4dd49",
                            Definition = "Stok Modülü Görüntüleme",
                            Name = "StockModule.Read",
                            NormalizedName = "StockModule.Read"
                        },
                        new
                        {
                            Id = 92,
                            AccessLevel = 1,
                            ConcurrencyStamp = "39d81014-30fb-4c52-b35e-5e11693c4326",
                            Definition = "Personel Tipleri Modülü Görüntüleme",
                            Name = "EmployeeTypeModule.Read",
                            NormalizedName = "EMPLOYEETYPEMODULE.READ"
                        },
                        new
                        {
                            Id = 93,
                            AccessLevel = 1,
                            ConcurrencyStamp = "a27acbe4-d0da-4a75-b1a8-b27ee4e16e4e",
                            Definition = "Personeller Modülü Görüntüleme",
                            Name = "EmployeeModule.Read",
                            NormalizedName = "EMPLOYEEMODULE.READ"
                        },
                        new
                        {
                            Id = 94,
                            AccessLevel = 1,
                            ConcurrencyStamp = "c815c202-0995-4a2e-807e-c05a141c50f0",
                            Definition = "Kullanıcılar Modülü Görüntüleme",
                            Name = "UserModule.Read",
                            NormalizedName = "USERMODULE.READ"
                        },
                        new
                        {
                            Id = 95,
                            AccessLevel = 1,
                            ConcurrencyStamp = "266a1e16-9b3b-4d0c-84f8-b4d099a67e4e",
                            Definition = "Hastalar Modülü Görüntüleme",
                            Name = "CustomerModule.Read",
                            NormalizedName = "CUSTOMERMODULE.READ"
                        },
                        new
                        {
                            Id = 96,
                            AccessLevel = 1,
                            ConcurrencyStamp = "21cd38b6-0f55-43a9-abd6-768d36827010",
                            Definition = "HAsta Tipleri Modülü Görüntüleme",
                            Name = "CustomerTypeModule.Read",
                            NormalizedName = "CUSTOMERTYPEMODULE.READ"
                        },
                        new
                        {
                            Id = 97,
                            AccessLevel = 1,
                            ConcurrencyStamp = "9e415996-7603-4070-94bb-46bf1c85eca8",
                            Definition = "Ürünler Modülü Yetkisi",
                            Name = "ProductModule.Read",
                            NormalizedName = "PRODUCTMODULE.READ"
                        },
                        new
                        {
                            Id = 98,
                            AccessLevel = 1,
                            ConcurrencyStamp = "9ec4570d-4512-499f-bd34-da18d90edc8e",
                            Definition = "Ürün Grupları Modülü Yetkisi",
                            Name = "ProductGroupModule.Read",
                            NormalizedName = "PRODUCTGROUPMODULE.READ"
                        },
                        new
                        {
                            Id = 99,
                            AccessLevel = 1,
                            ConcurrencyStamp = "5f8d3303-eac0-4a63-88b3-5db9522bd06b",
                            Definition = "Ürün Alt Grupları Modülü Yetkisi",
                            Name = "ProductSubGroupModule.Read",
                            NormalizedName = "PRODUCTSUBGROUPMODULE.READ"
                        },
                        new
                        {
                            Id = 100,
                            AccessLevel = 1,
                            ConcurrencyStamp = "f5bb19b2-5d85-4b07-b433-4142317997dc",
                            Definition = "Geliştiriciye Mesajlar Modülü Yetkisi",
                            Name = "BrandModule.Read",
                            NormalizedName = "BRANDMODULE.READ"
                        },
                        new
                        {
                            Id = 101,
                            AccessLevel = 1,
                            ConcurrencyStamp = "6d194fbb-54d5-452e-a17b-98af6c4d124f",
                            Definition = "Hasta Referanları Modülü Yetkisi",
                            Name = "CustomerReferanceModule.Read",
                            NormalizedName = "CUSTOMERREFERANCEMODULE.READ"
                        },
                        new
                        {
                            Id = 102,
                            AccessLevel = 1,
                            ConcurrencyStamp = "4877885f-b438-4929-91c5-061c86dddfc5",
                            Definition = "Randevular Modülü Yetkisi",
                            Name = "AppointmentModule.Read",
                            NormalizedName = "APPOINTMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 103,
                            AccessLevel = 1,
                            ConcurrencyStamp = "43540aac-67d4-4596-91cb-76be5b2030a4",
                            Definition = "Bildirimler Modülü Yetkisi",
                            Name = "NotificationModule.Read",
                            NormalizedName = "NOTIFICATIONMODULE.READ"
                        },
                        new
                        {
                            Id = 104,
                            AccessLevel = 1,
                            ConcurrencyStamp = "136e1a5c-e82f-4681-84b1-b0c024a4b62f",
                            Definition = "Dış Ödemeler Modülü Yetkisi",
                            Name = "OutPaymentModule.Read",
                            NormalizedName = "OUTPAYMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 105,
                            AccessLevel = 1,
                            ConcurrencyStamp = "ca8cbb80-2158-4ba4-9e09-cfc14bbb22df",
                            Definition = "Satışlar Modülü Yetkisi",
                            Name = "SaleModule.Read",
                            NormalizedName = "SALEMODULE.READ"
                        },
                        new
                        {
                            Id = 106,
                            AccessLevel = 1,
                            ConcurrencyStamp = "5f5b4a6d-ab5d-4ba1-92da-f789e7eae8a1",
                            Definition = "Gelen Ödemeler Modülü Yetkisi",
                            Name = "PaymentModule.Read",
                            NormalizedName = "PAYMENTMODULE.READ"
                        },
                        new
                        {
                            Id = 107,
                            AccessLevel = 1,
                            ConcurrencyStamp = "3ce98508-3c3e-48b6-8f1b-990e58c6be07",
                            Definition = "Gelir Giderler Modülü Yetkisi",
                            Name = "ExpenseModule.Read",
                            NormalizedName = "EXPENSEMODULE.READ"
                        },
                        new
                        {
                            Id = 108,
                            AccessLevel = 1,
                            ConcurrencyStamp = "987101c2-bf87-43d6-a3a8-3cc761e65e62",
                            Definition = "Roller Modülü Yetkisi",
                            Name = "RoleModule.Read",
                            NormalizedName = "ROLEMODULE.READ"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfSgk")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvoiceDue")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("SaleStatusId");

                    b.HasIndex("SaleTypeId");

                    b.ToTable("Sales", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 500,
                            AmountOfSgk = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(5975),
                            CustomerId = 1,
                            EmployeeId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsInvoiceDue = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(5977),
                            ProductId = 1,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 200,
                            AmountOfSgk = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(5985),
                            CustomerId = 1,
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsInvoiceDue = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(5986),
                            ProductId = 2,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 500,
                            AmountOfSgk = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(5991),
                            CustomerId = 1,
                            EmployeeId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsInvoiceDue = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(5992),
                            ProductId = 3,
                            SaleStatusId = 1,
                            SaleTypeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SaleStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(9809),
                            Description = "açıklama deneme status sale 1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(9810),
                            Title = "Satış Aşamasında"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(9814),
                            Description = "açıklama deneme status sale 1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 906, DateTimeKind.Local).AddTicks(9815),
                            Title = "Satıldı"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SaleTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(6958),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(6959),
                            Title = "Nakit"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(6963),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(6964),
                            Title = "Kart"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(6968),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(6969),
                            Title = "Çek"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(6972),
                            Description = "TEST",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(6973),
                            Title = "Senet"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.ToTable("Stocks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(3202),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(3204),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 1,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(3209),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(3210),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 2,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(3214),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(3215),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 3,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(3218),
                            Description = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 893, DateTimeKind.Local).AddTicks(3219),
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek",
                            ProductId = 4,
                            Quantity = 20
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("SubPrograms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9454),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9455),
                            Name = "User.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9459),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9460),
                            Name = "User.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9464),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9465),
                            Name = "User.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9468),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9469),
                            Name = "User.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 14,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9472),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9473),
                            Name = "Role.Read",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9476),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9477),
                            Name = "Role.Update",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9480),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9481),
                            Name = "Role.Delete",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9484),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9485),
                            Name = "Role.Create",
                            ProgramId = 2
                        },
                        new
                        {
                            Id = 37,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9488),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9489),
                            Name = "Payment.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 38,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9491),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9492),
                            Name = "Payment.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 39,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9495),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9496),
                            Name = "Payment.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 40,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9499),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9500),
                            Name = "Payment.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 41,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9503),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9504),
                            Name = "PaymentType.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 42,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9507),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9508),
                            Name = "PaymentType.Read",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 43,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9511),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9512),
                            Name = "PaymentType.Update",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 44,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9515),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9516),
                            Name = "PaymentType.Delete",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 45,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9519),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9520),
                            Name = "Employee.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 46,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9523),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9524),
                            Name = "Employee.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 47,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9527),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9528),
                            Name = "Employee.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 48,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9531),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9532),
                            Name = "Employee.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 49,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9534),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9536),
                            Name = "EmployeeType.Create",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 50,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9538),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9539),
                            Name = "EmployeeType.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 51,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9542),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9543),
                            Name = "EmployeeType.Update",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 52,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9546),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9547),
                            Name = "EmployeeType.Delete",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 53,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9550),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9551),
                            Name = "Customer.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 54,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9554),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9555),
                            Name = "Customer.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 55,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9558),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9559),
                            Name = "Customer.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 56,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9562),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9563),
                            Name = "Customer.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 57,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9566),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9567),
                            Name = "CustomerType.Create",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 58,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9569),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9570),
                            Name = "CustomerType.Read",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 59,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9574),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9575),
                            Name = "CustomerType.Update",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 60,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9577),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9579),
                            Name = "CustomerType.Delete",
                            ProgramId = 8
                        },
                        new
                        {
                            Id = 61,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9581),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9582),
                            Name = "Notification.Create",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 62,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9585),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9586),
                            Name = "Notification.Read",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 63,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9589),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9590),
                            Name = "Notification.Update",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 64,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9593),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9594),
                            Name = "Notification.Delete",
                            ProgramId = 6
                        },
                        new
                        {
                            Id = 65,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9597),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9598),
                            Name = "Brand.Create",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 66,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9601),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9602),
                            Name = "Brand.Update",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 67,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9605),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9606),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 85,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9609),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9610),
                            Name = "Brand.Read",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 68,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9613),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9614),
                            Name = "Brand.Delete",
                            ProgramId = 9
                        },
                        new
                        {
                            Id = 69,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9616),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9617),
                            Name = "SaleStatus.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 70,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9620),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9621),
                            Name = "SaleStatus.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 71,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9624),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9625),
                            Name = "SaleStatus.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 72,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9628),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9629),
                            Name = "SaleStatus.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 73,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9632),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9633),
                            Name = "SaleType.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 74,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9636),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9637),
                            Name = "SaleType.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 75,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9640),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9641),
                            Name = "SaleType.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 76,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9644),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9645),
                            Name = "SaleType.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 77,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9648),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9649),
                            Name = "ProductGroup.Create",
                            ProgramId = 7
                        },
                        new
                        {
                            Id = 78,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9651),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9652),
                            Name = "ProductGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 79,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9655),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9656),
                            Name = "ProductGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 80,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9659),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9660),
                            Name = "ProductGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 81,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9663),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9664),
                            Name = "ProductSubGroup.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 82,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9667),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9668),
                            Name = "ProductSubGroup.Read",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 83,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9671),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9672),
                            Name = "ProductSubGroup.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 84,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9675),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9676),
                            Name = "ProductSubGroup.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 89,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9679),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9680),
                            Name = "AppointmentType.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 90,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9683),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9684),
                            Name = "AppointmentType.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 91,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9686),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9687),
                            Name = "AppointmentType.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 92,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9690),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9692),
                            Name = "AppointmentType.Delete",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 93,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9694),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9695),
                            Name = "Sale.Create",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 94,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9698),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9699),
                            Name = "Sale.Read",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 95,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9702),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9703),
                            Name = "Sale.Update",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 96,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9706),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9707),
                            Name = "Sale.Delete",
                            ProgramId = 10
                        },
                        new
                        {
                            Id = 97,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9710),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9711),
                            Name = "Product.Create",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 98,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9714),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9715),
                            Name = "Product.Read",
                            ProgramId = 1
                        },
                        new
                        {
                            Id = 99,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9718),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9719),
                            Name = "Product.Update",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 100,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9722),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9723),
                            Name = "Product.Delete",
                            ProgramId = 11
                        },
                        new
                        {
                            Id = 101,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9725),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9727),
                            Name = "Appointment.Create",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 102,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9730),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9731),
                            Name = "Appointment.Read",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 103,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9733),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9734),
                            Name = "Appointment.Update",
                            ProgramId = 5
                        },
                        new
                        {
                            Id = 104,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9737),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 907, DateTimeKind.Local).AddTicks(9738),
                            Name = "Appointment.Delete",
                            ProgramId = 5
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Link")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Admin | Bilal",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "510e8b10-fc68-4a0a-aeec-e18dc8a651bd",
                            Email = "bilalAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bilal",
                            LastName = "Meto",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "BILALADMIN@GMAIL.COM",
                            NormalizedUserName = "BILALADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEA1ZGOL8HuvC1TBD4dvWrzF71z7MGL9jLzikYi9qfqLAy68hCNv4fwGGWx9wOlBy0A==",
                            PhoneNumber = "+905537314131",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "65dad135-7b90-42da-b35c-7d683ef4e1ca",
                            TwoFactorEnabled = false,
                            UserName = "bilalAdmin"
                        },
                        new
                        {
                            Id = 2,
                            About = "Admin | Nazlı",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c0e94fb-185a-4b3a-97f1-a4ddd8ac3548",
                            Email = "nazliAdmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nazlı",
                            LastName = "-",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "NAZLIADMIN@GMAIL.COM",
                            NormalizedUserName = "NAZLIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAvL2Jyo8aLBbpUOOfX/j2RUPnPW6x/IJMlPAzrT+MZe8SoLm9yRh9ueFxo9r37bZA==",
                            PhoneNumber = "+905398815246",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "52db7f0c-b2d1-4187-914a-ac68f7a18e3d",
                            TwoFactorEnabled = false,
                            UserName = "nazliAdmin"
                        },
                        new
                        {
                            Id = 3,
                            About = "-",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e05b56e-bc0b-4492-bd7b-cb8fec8b93e3",
                            Email = "sema@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sema",
                            LastName = "-",
                            Link = "https://twitter.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEMA@GMAIL.COM",
                            NormalizedUserName = "SEMA",
                            PasswordHash = "AQAAAAEAACcQAAAAEA6MCqHHXzoSq8vHPfzaRNT1aUiQ643WBccrloqnHYHJ+JeXOdb0qkIKm5cj3uhVMA==",
                            PhoneNumber = "+905071273567",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "428d9376-7bd0-4b22-858a-10d6f1f746db",
                            TwoFactorEnabled = false,
                            UserName = "sema"
                        },
                        new
                        {
                            Id = 4,
                            About = "Geliştirici",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fb4613f-e644-47e4-a5cb-2b1051501472",
                            Email = "x@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bedirhan",
                            LastName = "Gündöner",
                            Link = "-",
                            LockoutEnabled = false,
                            NormalizedEmail = "X@GMAIL.COM",
                            NormalizedUserName = "DEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEB3lns6IiKDHjZI5DgOw9Q1Y4wMY4j09oVInfrhYOlYIeWaAtHh/XSW9kO3eHd1YOw==",
                            PhoneNumber = "+905050102249",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "fa2e0bce-76e9-4a66-a448-5b660aea4102",
                            TwoFactorEnabled = false,
                            UserName = "dev"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(891),
                            Description = "C# Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(892),
                            Name = "C#",
                            Note = "C# Blog Kategorisi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(896),
                            Description = "C++ Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(897),
                            Name = "C++",
                            Note = "C++ Blog Kategorisi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(901),
                            Description = "JavaScript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(902),
                            Name = "JavaScript",
                            Note = "JavaScript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(905),
                            Description = "Typescript Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(906),
                            Name = "Typescript",
                            Note = "Typescript Blog Kategorisi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(909),
                            Description = "Java Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(910),
                            Name = "Java",
                            Note = "Java Blog Kategorisi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(982),
                            Description = "Python Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(984),
                            Name = "Python",
                            Note = "Python Blog Kategorisi"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(988),
                            Description = "Php Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(989),
                            Name = "Php",
                            Note = "Php Blog Kategorisi"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(993),
                            Description = "Kotlin Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(994),
                            Name = "Kotlin",
                            Note = "Kotlin Blog Kategorisi"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(997),
                            Description = "Swift Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(998),
                            Name = "Swift",
                            Note = "Swift Blog Kategorisi"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(1001),
                            Description = "Ruby Programlama Dili ile İlgili En Güncel Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(1002),
                            Name = "Ruby",
                            Note = "Ruby Blog Kategorisi"
                        });
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(9528),
                            Description = "Product Kategori 2 Açıkama",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(9530),
                            Name = "Product Kategori 1",
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(9535),
                            Description = "Product Kategori 2 Açıkama",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2023, 8, 22, 21, 12, 7, 892, DateTimeKind.Local).AddTicks(9537),
                            Name = "Product Kategori 2",
                            Note = "Hastanın ihtiyaçları tespit edildi. Cihaz denenecek"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Appointment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany("Appointments")
                        .HasForeignKey("UserId");

                    b.Navigation("AppointmentType");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.HasOne("MyBlog.Shared.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany("AssociatedInstitutions")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferance", "CustomerReferance")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerReferanceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Customers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferance");

                    b.Navigation("CustomerType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.CustomerReferanceTitle", "CustomerReferanceTitle")
                        .WithMany("CustomersReferances")
                        .HasForeignKey("CustomerReferanceTitleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerReferanceTitle");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Notification", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Notifications")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPaymentDetail", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("outPaymentDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.OutPayment", "OutPayment")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("OutPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("OutPayment");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", null)
                        .WithMany("Payments")
                        .HasForeignKey("AssociatedInstitutionId");

                    b.HasOne("MyBlog.Entities.Concrete.AssociatedInstitution", "AssociatedInstitutions")
                        .WithMany()
                        .HasForeignKey("AssociatedInstitutionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Customer", null)
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Employee", null)
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.PaymentType", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId1");

                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Shared.Entities.Concrete.ProductCategory", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("MyBlog.Entities.Concrete.ProductSubGroup", "ProductSubGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("ProductSubGroup");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.ProductGroup", "ProductGroup")
                        .WithMany("ProductSubGroups")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Module", "Module")
                        .WithMany("Programs")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Sale", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Employee", "Employee")
                        .WithMany("Sales")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Sale")
                        .HasForeignKey("MyBlog.Entities.Concrete.Sale", "ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.SaleStatus", "SaleStatus")
                        .WithMany("Sales")
                        .HasForeignKey("SaleStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyBlog.Entities.Concrete.SaleType", "SaleType")
                        .WithMany("Sales")
                        .HasForeignKey("SaleTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Product");

                    b.Navigation("SaleStatus");

                    b.Navigation("SaleType");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Stock", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("MyBlog.Entities.Concrete.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SubProgram", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Program", "Program")
                        .WithMany("SubPrograms")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.AssociatedInstitution", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferance", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerReferanceTitle", b =>
                {
                    b.Navigation("CustomersReferances");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Customers");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Sales");

                    b.Navigation("outPaymentDetails");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Module", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.OutPayment", b =>
                {
                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.PaymentType", b =>
                {
                    b.Navigation("AssociatedInstitutions");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Product", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductGroup", b =>
                {
                    b.Navigation("ProductSubGroups");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ProductSubGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Program", b =>
                {
                    b.Navigation("SubPrograms");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleStatus", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.SaleType", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Articles");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("MyBlog.Shared.Entities.Concrete.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
